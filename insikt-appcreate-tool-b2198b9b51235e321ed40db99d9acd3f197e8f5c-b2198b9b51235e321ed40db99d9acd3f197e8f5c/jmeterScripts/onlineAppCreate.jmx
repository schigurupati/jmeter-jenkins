<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Online app test data create script" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="MyCROServer" elementType="Argument">
            <stringProp name="Argument.name">MyCROServer</stringProp>
            <stringProp name="Argument.value">ops.insikt.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CsvFilePath" elementType="Argument">
            <stringProp name="Argument.name">CsvFilePath</stringProp>
            <stringProp name="Argument.value">/Users/schigurupati/Desktop/Jmeter_Tests/QA/Jmeter_Tests/DataFiles/Criteria_Settings.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Online" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1391586690000</longProp>
        <longProp name="ThreadGroup.end_time">1391586690000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Environment URLs" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="baseUrl" elementType="Argument">
              <stringProp name="Argument.name">baseUrl</stringProp>
              <stringProp name="Argument.value">retail.${__P(env,qa)}.lendifyfin.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="baseIdpPartnerUrl" elementType="Argument">
              <stringProp name="Argument.name">baseIdpPartnerUrl</stringProp>
              <stringProp name="Argument.value">idp-directory.${__P(env,qa)}.lendifyfin.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="OnlineUrl" elementType="Argument">
              <stringProp name="Argument.name">OnlineUrl</stringProp>
              <stringProp name="Argument.value">www.${__P(env,qa)}.mylendify.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dev Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="2645995">User</stringProp>
            <stringProp name="2606829">Time</stringProp>
            <stringProp name="80811750">Time3</stringProp>
            <stringProp name="80811751">Time4</stringProp>
            <stringProp name="-201069322">Username</stringProp>
            <stringProp name="-125484198">uniqueIdentifier</stringProp>
            <stringProp name="2751581">Year</stringProp>
            <stringProp name="74527328">Month</stringProp>
            <stringProp name="68476">Day</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-1495155346">
              <stringProp name="-1332388061">${__Random(7122,9009234)}</stringProp>
              <stringProp name="217092793">${__time}</stringProp>
              <stringProp name="1196789496">${__time(ssssss)}</stringProp>
              <stringProp name="1821498968">${__time(HH:mm:ss)}</stringProp>
              <stringProp name="-193851953">admin@bbva.com</stringProp>
              <stringProp name="1573382938">3694d3c472e415ffe42b0682899cac185e83edf7</stringProp>
              <stringProp name="1711702808">${__time(yyyy)}</stringProp>
              <stringProp name="-811808355">${__time(M)}</stringProp>
              <stringProp name="604484184">${__time(dd)}</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">true</boolProp>
        </UserParameters>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="2645995">User</stringProp>
            <stringProp name="2606829">Time</stringProp>
            <stringProp name="80811750">Time3</stringProp>
            <stringProp name="2122702">Date</stringProp>
            <stringProp name="80811751">Time4</stringProp>
            <stringProp name="-1699764666">externalId</stringProp>
            <stringProp name="-1185250696">images</stringProp>
            <stringProp name="1911934138">images2</stringProp>
            <stringProp name="-1306693787">tenantId</stringProp>
            <stringProp name="100589">env</stringProp>
            <stringProp name="109264468">scope</stringProp>
            <stringProp name="96862150">admin_username</stringProp>
            <stringProp name="22193741">admin_pwd</stringProp>
            <stringProp name="-1700717821">agent_pwd</stringProp>
            <stringProp name="-1318255029">campaignId</stringProp>
            <stringProp name="0"></stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-1325885557">
              <stringProp name="-1332388061">${__Random(7122,9009234)}</stringProp>
              <stringProp name="217092793">${__time}</stringProp>
              <stringProp name="1196789496">${__time(ssssss)}</stringProp>
              <stringProp name="-1983561601">${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(new Date()))}</stringProp>
              <stringProp name="1821498968">${__time(HH:mm:ss)}</stringProp>
              <stringProp name="-485296928">${__Random(10000,50000)}</stringProp>
              <stringProp name="-849626933">${__Random(176990,990092)}</stringProp>
              <stringProp name="1343154419">${__Random(276990,290092)}</stringProp>
              <stringProp name="-1767846152">${__P(tenant,128)}</stringProp>
              <stringProp name="2085928178">${__P(env,qa)}</stringProp>
              <stringProp name="-392631510">${__P(scope,full)}</stringProp>
              <stringProp name="-975007779">${__P(adminUname,root@insikt.com)}</stringProp>
              <stringProp name="-896320290">${__P(adminPwd,password)}</stringProp>
              <stringProp name="208320677">${__P(agentPwd,Password1)}</stringProp>
              <stringProp name="1471017879">${__P(campaign,0)}</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">true</boolProp>
        </UserParameters>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Date time parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="2645995">User</stringProp>
            <stringProp name="2606829">Time</stringProp>
            <stringProp name="402974533">DaysExpiryId</stringProp>
            <stringProp name="-1206482410">DaysInPastNewestTxn</stringProp>
            <stringProp name="913100125">DaysInPastOldestTxn</stringProp>
            <stringProp name="-437874624">TodaysDate</stringProp>
            <stringProp name="-1187015640">DateNow</stringProp>
            <stringProp name="375488299">SignDate</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="1902435887">
              <stringProp name="-1997876883">${__Random(7754,9009987)}</stringProp>
              <stringProp name="217092793">${__time}</stringProp>
              <stringProp name="1665">45</stringProp>
              <stringProp name="1567">10</stringProp>
              <stringProp name="1758">75</stringProp>
              <stringProp name="963734563">${__time(&quot;yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS&apos;Z&apos;&quot;)}</stringProp>
              <stringProp name="-1521574952">${__time(YYYY-MM-dd)}</stringProp>
              <stringProp name="-831690024">${__time(MM/dd/YYYY)}</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">true</boolProp>
        </UserParameters>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller- Campaign Id provided as param" enabled="true">
          <stringProp name="IfController.condition">&apos;${campaignId}&apos; != &apos;0&apos;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-Lendify DB when env QA" enabled="true">
            <stringProp name="IfController.condition">&apos;${env}&apos; == &apos;qa&apos;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="DB Configuration QA" enabled="true">
              <boolProp name="autocommit">true</boolProp>
              <stringProp name="checkQuery">Select 1</stringProp>
              <stringProp name="connectionAge">5000</stringProp>
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="dbUrl">jdbc:postgresql://lendify-qa.cl6q9ofwkebd.us-west-2.rds.amazonaws.com:5432/lendify?autoReconnect=true</stringProp>
              <stringProp name="driver">org.postgresql.Driver</stringProp>
              <boolProp name="keepAlive">true</boolProp>
              <stringProp name="password">zemeFuKeT6trutUv</stringProp>
              <stringProp name="poolMax">10</stringProp>
              <stringProp name="timeout">10000</stringProp>
              <stringProp name="trimInterval">60000</stringProp>
              <stringProp name="username">lendify</stringProp>
              <stringProp name="transactionIsolation">DEFAULT</stringProp>
            </JDBCDataSource>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request to get tenant name" enabled="true">
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select name from lendify.fabric_tenant where id=${tenantId}</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">tenantname</stringProp>
              <stringProp name="resultVariable">tenantname</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;\nScript being executed against environment(script param &apos;env&apos;): &quot; + vars.get(&quot;env&quot;).toUpperCase());
System.out.println(&quot;Script being executed for scope(script param &apos;scope&apos;): &quot; + vars.get(&quot;scope&quot;).toUpperCase());
System.out.println(&quot;Script being executed for Tenant ID(script param &apos;tenant&apos;): &quot; + vars.get(&quot;tenantId&quot;).toUpperCase() + &quot; (&quot; + vars.get(&quot;tenantname_1&quot;).toUpperCase() +&quot;)&quot; +  &quot;\n&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request to get campaign name for campaign id" enabled="true">
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT campaign_name FROM marketing_campaign WHERE tenant_id=${tenantId} AND disabled=false and id=${campaignId}</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">campaignName</stringProp>
              <stringProp name="resultVariable">campaignName</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request to get solicitation key" enabled="true">
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT solicitation_key FROM lendify.marketing_solicitation WHERE idp_account_id IS NULL AND solicitation_date IS NOT NULL AND responded=&apos;false&apos; AND campaign_id=${campaignId} ORDER BY solicitation_date DESC LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">solicitation_key</stringProp>
              <stringProp name="resultVariable">solicitation_key</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller- Lendify DB when env DEV(docker)" enabled="true">
            <stringProp name="IfController.condition">${env}==dev</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="DB Configuration DEV (docker)" enabled="true">
              <boolProp name="autocommit">true</boolProp>
              <stringProp name="checkQuery">Select 1</stringProp>
              <stringProp name="connectionAge">5000</stringProp>
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="dbUrl">jdbc:postgresql://ldev-docker01:5432/test?autoReconnect=true</stringProp>
              <stringProp name="driver">org.postgresql.Driver</stringProp>
              <boolProp name="keepAlive">true</boolProp>
              <stringProp name="password">password</stringProp>
              <stringProp name="poolMax">10</stringProp>
              <stringProp name="timeout">10000</stringProp>
              <stringProp name="trimInterval">60000</stringProp>
              <stringProp name="username">app</stringProp>
              <stringProp name="transactionIsolation">DEFAULT</stringProp>
            </JDBCDataSource>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request to get tenant name" enabled="true">
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select name from lendify.fabric_tenant where id=${tenantId}</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">tenantname</stringProp>
              <stringProp name="resultVariable">tenantname</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;\nScript being executed against environment(script param &apos;env&apos;): &quot; + vars.get(&quot;env&quot;).toUpperCase());
System.out.println(&quot;Script being executed for scope(script param &apos;scope&apos;): &quot; + vars.get(&quot;scope&quot;).toUpperCase());
System.out.println(&quot;Script being executed for Tenant ID(script param &apos;tenant&apos;): &quot; + vars.get(&quot;tenantId&quot;).toUpperCase() + &quot; (&quot; + vars.get(&quot;tenantname_1&quot;).toUpperCase() +&quot;)&quot; +  &quot;\n&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request to get solicitation key" enabled="true">
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT solicitation_key FROM lendify.marketing_solicitation WHERE idp_account_id IS NULL AND solicitation_date IS NOT NULL AND responded=&apos;false&apos; AND campaign_id=${campaignId} ORDER BY solicitation_date DESC LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">solicitation_key</stringProp>
              <stringProp name="resultVariable">solicitation_key</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request to get campaign name for campaign id" enabled="true">
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT campaign_name FROM marketing_campaign WHERE tenant_id=${tenantId} AND disabled=false and id=${campaignId}</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">campaignName</stringProp>
              <stringProp name="resultVariable">campaignName</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller- Lendify DB when env TRAINING" enabled="true">
            <stringProp name="IfController.condition">&apos;${env}&apos; == &apos;training&apos;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="DB Configuration TRAINING" enabled="true">
              <boolProp name="autocommit">true</boolProp>
              <stringProp name="checkQuery">Select 1</stringProp>
              <stringProp name="connectionAge">5000</stringProp>
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="dbUrl">jdbc:postgresql://lendify-training.cl6q9ofwkebd.us-west-2.rds.amazonaws.com:5432/lendify?autoReconnect=true</stringProp>
              <stringProp name="driver">org.postgresql.Driver</stringProp>
              <boolProp name="keepAlive">true</boolProp>
              <stringProp name="password">password</stringProp>
              <stringProp name="poolMax">10</stringProp>
              <stringProp name="timeout">10000</stringProp>
              <stringProp name="trimInterval">60000</stringProp>
              <stringProp name="username">app</stringProp>
              <stringProp name="transactionIsolation">DEFAULT</stringProp>
            </JDBCDataSource>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request to get tenant name" enabled="true">
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select name from lendify.fabric_tenant where id=${tenantId}</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">tenantname</stringProp>
              <stringProp name="resultVariable">tenantname</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;\nScript being executed against environment(script param &apos;env&apos;): &quot; + vars.get(&quot;env&quot;).toUpperCase());
System.out.println(&quot;Script being executed for scope(script param &apos;scope&apos;): &quot; + vars.get(&quot;scope&quot;).toUpperCase());
System.out.println(&quot;Script being executed for Tenant ID(script param &apos;tenant&apos;): &quot; + vars.get(&quot;tenantId&quot;).toUpperCase() + &quot; (&quot; + vars.get(&quot;tenantname_1&quot;).toUpperCase() +&quot;)&quot; +  &quot;\n&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request to get solicitation key" enabled="true">
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT solicitation_key FROM lendify.marketing_solicitation WHERE idp_account_id IS NULL AND solicitation_date IS NOT NULL AND responded=&apos;false&apos; AND campaign_id=${campaignId} ORDER BY solicitation_date DESC LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">solicitation_key</stringProp>
              <stringProp name="resultVariable">solicitation_key</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request to get campaign name for campaign id" enabled="true">
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT campaign_name FROM marketing_campaign WHERE tenant_id=${tenantId} AND disabled=false and id=${campaignId}</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">campaignName</stringProp>
              <stringProp name="resultVariable">campaignName</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller- create account" enabled="true">
            <stringProp name="IfController.condition">&apos;${scope}&apos; == &apos;createAccount&apos;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dev Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="2645995">User</stringProp>
                <stringProp name="2606829">Time</stringProp>
                <stringProp name="80811750">Time3</stringProp>
                <stringProp name="2122702">Date</stringProp>
                <stringProp name="80811751">Time4</stringProp>
                <stringProp name="-201069322">Username</stringProp>
                <stringProp name="-125484198">uniqueIdentifier</stringProp>
                <stringProp name="1674314293">reservationNumber</stringProp>
                <stringProp name="-386871910">dateOfBirth</stringProp>
                <stringProp name="-478379258">TodaysDateBySlash</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="551912850">
                  <stringProp name="-1332388061">${__Random(7122,9009234)}</stringProp>
                  <stringProp name="217092793">${__time}</stringProp>
                  <stringProp name="1196789496">${__time(ssssss)}</stringProp>
                  <stringProp name="-1983561601">${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(new Date()))}</stringProp>
                  <stringProp name="1821498968">${__time(HH:mm:ss)}</stringProp>
                  <stringProp name="-193851953">admin@bbva.com</stringProp>
                  <stringProp name="1573382938">3694d3c472e415ffe42b0682899cac185e83edf7</stringProp>
                  <stringProp name="62061615">ABCD1</stringProp>
                  <stringProp name="-1187136416">1980-01-01</stringProp>
                  <stringProp name="814952664">${__javaScript(var date=d.getDate(); var month=d.getMonth()+1;var d=new Date();d.setDate(d.getDate());$DATE=d.getFullYear() + &quot;/&quot; + (month&lt;10?&quot;0&quot;+month:month) + &quot;/&quot; + (date&lt;10?&quot;0&quot;+date:date);,DATE)} </stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
              <boolProp name="clearEachIteration">true</boolProp>
              <boolProp name="useExpires">false</boolProp>
            </CacheManager>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
              <collectionProp name="CookieManager.cookies"/>
              <boolProp name="CookieManager.clearEachIteration">true</boolProp>
              <stringProp name="CookieManager.policy">standard</stringProp>
              <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
            </CookieManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Auth Create Account" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;username&quot;:&quot;test${solicitation_key_1}@mailinator.com&quot;,&#xd;
&quot;password&quot;:&quot;Password1!&quot;,&#xd;
&quot;confirmPassword&quot;:&quot;Password1!&quot;,&#xd;
&quot;solicitationKey&quot;:&quot;${solicitation_key_1}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/registration</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
                <stringProp name="BeanShellAssertion.query">if (ResponseCode.equals(&quot;422&quot;) == true) { 
    SampleResult.setResponseOK();  

    /* the same is 
    SampleResult.setSuccessful(true);
    SampleResult.setResponseCodeOK();
    SampleResult.setResponseMessageOK();
    */
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;idpAccountId&quot;:(.+?)}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="applicantId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">applicantId</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;idpAccountId&quot;:(.+?)}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">applicantId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="198152773">&quot;success&quot;:true,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Create account/register Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Auth login -Valid Login" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;username&quot;: &quot;test${solicitation_key_1}@mailinator.com&quot;, &#xd;
&quot;password&quot;: &quot;Password1!&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/v2/auth</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">refreshToken</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">bearer</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;refreshToken&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">bearer</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Login with newly created account Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;\n\nAPP ID = &quot; + vars.get(&quot;loanappId&quot;));
System.out.println(&quot;PARTY ID = &quot; + vars.get(&quot;partyId_1&quot;));
System.out.println(&quot;PRODUCT KEY = &quot; + vars.get(&quot;productAccountId&quot;));
System.out.println(&quot;User credentials = &quot; + &quot;test&quot; + vars.get(&quot;solicitation_key_1&quot;) + &quot;@mailinator.com/Password1!&quot;);
System.out.println(&quot;\n\n ------------------------------------------------------------------ \n\n&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="1826958442">{&quot;success&quot;:true,</stringProp>
                  <stringProp name="1798555">&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller- Submt Personal Info (Prescreen execute)" enabled="true">
            <stringProp name="IfController.condition">&apos;${scope}&apos; == &apos;submitPersonalInfo&apos;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dev Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="2645995">User</stringProp>
                <stringProp name="2606829">Time</stringProp>
                <stringProp name="80811750">Time3</stringProp>
                <stringProp name="2122702">Date</stringProp>
                <stringProp name="80811751">Time4</stringProp>
                <stringProp name="-201069322">Username</stringProp>
                <stringProp name="-125484198">uniqueIdentifier</stringProp>
                <stringProp name="1674314293">reservationNumber</stringProp>
                <stringProp name="-386871910">dateOfBirth</stringProp>
                <stringProp name="-478379258">TodaysDateBySlash</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="551912850">
                  <stringProp name="-1332388061">${__Random(7122,9009234)}</stringProp>
                  <stringProp name="217092793">${__time}</stringProp>
                  <stringProp name="1196789496">${__time(ssssss)}</stringProp>
                  <stringProp name="-1983561601">${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(new Date()))}</stringProp>
                  <stringProp name="1821498968">${__time(HH:mm:ss)}</stringProp>
                  <stringProp name="-193851953">admin@bbva.com</stringProp>
                  <stringProp name="1573382938">3694d3c472e415ffe42b0682899cac185e83edf7</stringProp>
                  <stringProp name="62061615">ABCD1</stringProp>
                  <stringProp name="-1187136416">1980-01-01</stringProp>
                  <stringProp name="814952664">${__javaScript(var date=d.getDate(); var month=d.getMonth()+1;var d=new Date();d.setDate(d.getDate());$DATE=d.getFullYear() + &quot;/&quot; + (month&lt;10?&quot;0&quot;+month:month) + &quot;/&quot; + (date&lt;10?&quot;0&quot;+date:date);,DATE)} </stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
              <boolProp name="clearEachIteration">true</boolProp>
              <boolProp name="useExpires">false</boolProp>
            </CacheManager>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
              <collectionProp name="CookieManager.cookies"/>
              <boolProp name="CookieManager.clearEachIteration">true</boolProp>
              <stringProp name="CookieManager.policy">standard</stringProp>
              <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
            </CookieManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Auth Create Account" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;username&quot;:&quot;test${solicitation_key_1}@mailinator.com&quot;,&#xd;
&quot;password&quot;:&quot;Password1!&quot;,&#xd;
&quot;confirmPassword&quot;:&quot;Password1!&quot;,&#xd;
&quot;solicitationKey&quot;:&quot;${solicitation_key_1}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/registration</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
                <stringProp name="BeanShellAssertion.query">if (ResponseCode.equals(&quot;422&quot;) == true) { 
    SampleResult.setResponseOK();  

    /* the same is 
    SampleResult.setSuccessful(true);
    SampleResult.setResponseCodeOK();
    SampleResult.setResponseMessageOK();
    */
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;idpAccountId&quot;:(.+?)}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="applicantId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">applicantId</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;idpAccountId&quot;:(.+?)}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">applicantId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="198152773">&quot;success&quot;:true,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Create account/register Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Auth login -Valid Login" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;username&quot;: &quot;test${solicitation_key_1}@mailinator.com&quot;, &#xd;
&quot;password&quot;: &quot;Password1!&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/v2/auth</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">refreshToken</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">bearer</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;refreshToken&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">bearer</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Login with newly created account Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="1826958442">{&quot;success&quot;:true,</stringProp>
                  <stringProp name="1798555">&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Applications" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;campaign__reservationNumber&quot;:&quot;${solicitation_key_1}&quot;,&quot;person__firstName&quot;:&quot;Test&quot;,&quot;person__lastName&quot;:&quot;User&quot;,&quot;person__dateOfBirth&quot;:&quot;1980-01-01&quot;,&quot;person__memberOfArmedForces&quot;:&quot;Y&quot;,&quot;person__ssn&quot;:&quot;111111111&quot;,&quot;address__address1&quot;:&quot;Easy Street&quot;,&quot;address__address2&quot;:&quot;&quot;,&quot;address__city&quot;:&quot;SF&quot;,&quot;address__state&quot;:&quot;TX&quot;,&quot;address__postalCode&quot;:&quot;94109&quot;,&quot;address__since&quot;:&quot;GREATER_THAN_2_YEARS&quot;,&quot;phone__type&quot;:&quot;MOBILE&quot;,&quot;phone__number&quot;:&quot;(415) 555-5555&quot;}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/applications</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="loanappId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">loanappId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;appId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">loanappId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Submit Personal info(Prescreen execute) Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select eid from lendify.app_loan_app where id=&apos;${loanappId}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">partyId</stringProp>
              <stringProp name="resultVariable">partyId</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;\n\nAPP ID = &quot; + vars.get(&quot;loanappId&quot;));
System.out.println(&quot;PARTY ID = &quot; + vars.get(&quot;partyId_1&quot;));
System.out.println(&quot;PRODUCT KEY = &quot; + vars.get(&quot;productAccountId&quot;));
System.out.println(&quot;User credentials = &quot; + &quot;test&quot; + vars.get(&quot;solicitation_key_1&quot;) + &quot;@mailinator.com/Password1!&quot;);
System.out.println(&quot;\n\n ------------------------------------------------------------------ \n\n&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Submit Financial Info (Final Approval execute)" enabled="true">
            <stringProp name="IfController.condition">&apos;${scope}&apos; == &apos;submitFinancialInfo&apos;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dev Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="2645995">User</stringProp>
                <stringProp name="2606829">Time</stringProp>
                <stringProp name="80811750">Time3</stringProp>
                <stringProp name="2122702">Date</stringProp>
                <stringProp name="80811751">Time4</stringProp>
                <stringProp name="-201069322">Username</stringProp>
                <stringProp name="-125484198">uniqueIdentifier</stringProp>
                <stringProp name="1674314293">reservationNumber</stringProp>
                <stringProp name="-386871910">dateOfBirth</stringProp>
                <stringProp name="-478379258">TodaysDateBySlash</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="551912850">
                  <stringProp name="-1332388061">${__Random(7122,9009234)}</stringProp>
                  <stringProp name="217092793">${__time}</stringProp>
                  <stringProp name="1196789496">${__time(ssssss)}</stringProp>
                  <stringProp name="-1983561601">${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(new Date()))}</stringProp>
                  <stringProp name="1821498968">${__time(HH:mm:ss)}</stringProp>
                  <stringProp name="-193851953">admin@bbva.com</stringProp>
                  <stringProp name="1573382938">3694d3c472e415ffe42b0682899cac185e83edf7</stringProp>
                  <stringProp name="62061615">ABCD1</stringProp>
                  <stringProp name="-1187136416">1980-01-01</stringProp>
                  <stringProp name="814952664">${__javaScript(var date=d.getDate(); var month=d.getMonth()+1;var d=new Date();d.setDate(d.getDate());$DATE=d.getFullYear() + &quot;/&quot; + (month&lt;10?&quot;0&quot;+month:month) + &quot;/&quot; + (date&lt;10?&quot;0&quot;+date:date);,DATE)} </stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
              <boolProp name="clearEachIteration">true</boolProp>
              <boolProp name="useExpires">false</boolProp>
            </CacheManager>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
              <collectionProp name="CookieManager.cookies"/>
              <boolProp name="CookieManager.clearEachIteration">true</boolProp>
              <stringProp name="CookieManager.policy">standard</stringProp>
              <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
            </CookieManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Auth Create Account" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;username&quot;:&quot;test${solicitation_key_1}@mailinator.com&quot;,&#xd;
&quot;password&quot;:&quot;Password1!&quot;,&#xd;
&quot;confirmPassword&quot;:&quot;Password1!&quot;,&#xd;
&quot;solicitationKey&quot;:&quot;${solicitation_key_1}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/registration</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
                <stringProp name="BeanShellAssertion.query">if (ResponseCode.equals(&quot;422&quot;) == true) { 
    SampleResult.setResponseOK();  

    /* the same is 
    SampleResult.setSuccessful(true);
    SampleResult.setResponseCodeOK();
    SampleResult.setResponseMessageOK();
    */
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;idpAccountId&quot;:(.+?)}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="applicantId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">applicantId</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;idpAccountId&quot;:(.+?)}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">applicantId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="198152773">&quot;success&quot;:true,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Create account/register Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Auth login -Valid Login" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;username&quot;: &quot;test${solicitation_key_1}@mailinator.com&quot;, &#xd;
&quot;password&quot;: &quot;Password1!&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/v2/auth</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">refreshToken</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">bearer</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;refreshToken&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">bearer</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Login with newly created account Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="1826958442">{&quot;success&quot;:true,</stringProp>
                  <stringProp name="1798555">&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Applications" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;campaign__reservationNumber&quot;:&quot;${solicitation_key_1}&quot;,&quot;person__firstName&quot;:&quot;Test&quot;,&quot;person__lastName&quot;:&quot;User&quot;,&quot;person__dateOfBirth&quot;:&quot;1980-01-01&quot;,&quot;person__memberOfArmedForces&quot;:&quot;Y&quot;,&quot;person__ssn&quot;:&quot;111111111&quot;,&quot;address__address1&quot;:&quot;Easy Street&quot;,&quot;address__address2&quot;:&quot;&quot;,&quot;address__city&quot;:&quot;SF&quot;,&quot;address__state&quot;:&quot;TX&quot;,&quot;address__postalCode&quot;:&quot;94109&quot;,&quot;address__since&quot;:&quot;GREATER_THAN_2_YEARS&quot;,&quot;phone__type&quot;:&quot;MOBILE&quot;,&quot;phone__number&quot;:&quot;(415) 555-5555&quot;}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/applications</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="loanappId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">loanappId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;appId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">loanappId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Submit Personal info(Prescreen execute) Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select eid from lendify.app_loan_app where id=&apos;${loanappId}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">partyId</stringProp>
              <stringProp name="resultVariable">partyId</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT - Financial Info" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;income__employmentStatus&quot;:&quot;0&quot;,&quot;income__employedSince&quot;:&quot;GREATER_THAN_2_YEARS&quot;,&quot;income__takeHomeAmount&quot;:&quot;5000&quot;&#xd;
,&quot;income__frequency&quot;:&quot;MONTHLY&quot;,&quot;income__nextPaycheckDate&quot;:&quot;${DateNow}&quot;,&quot;expense__homeOwnership&quot;:&quot;RENT&quot;&#xd;
,&quot;expense__housing&quot;:&quot;12&quot;,&quot;expense__car&quot;:&quot;12&quot;,&quot;expense__phone&quot;:&quot;12&quot;,&quot;expense__utilities&quot;:&quot;12&quot;,&quot;expense__dependents&quot;&#xd;
:&quot;2&quot;,&quot;financial__hasBankAccount&quot;:&quot;Y&quot;,&quot;financial__cardStatedUsage&quot;:&quot;ALL&quot;,&quot;financial__paydayStatedUsage&quot;:&quot;Y&quot;,&quot;preferredLoan__purpose&quot;:&quot;PAY_BILLS&quot;,&quot;authorization__consent&quot;:true}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/applications/${loanappId}/financial-info</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1303721089">&quot;route&quot;:&quot;choose-loan&quot;</stringProp>
                  <stringProp name="891288745">&quot;name&quot;:&quot;PRESCREEN&quot;,&quot;status&quot;:&quot;COMPLETED&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Submit Financial info(Final Approval execute) Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;\n\nAPP ID = &quot; + vars.get(&quot;loanappId&quot;));
System.out.println(&quot;PARTY ID = &quot; + vars.get(&quot;partyId_1&quot;));
System.out.println(&quot;PRODUCT KEY = &quot; + vars.get(&quot;productAccountId&quot;));
System.out.println(&quot;User credentials = &quot; + &quot;test&quot; + vars.get(&quot;solicitation_key_1&quot;) + &quot;@mailinator.com/Password1!&quot;);
System.out.println(&quot;\n\n ------------------------------------------------------------------ \n\n&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
                <stringProp name="BeanShellAssertion.query">if (ResponseCode.equals(&quot;422&quot;) == true) { 
    SampleResult.setResponseOK();  

    /* the same is 
    SampleResult.setSuccessful(true);
    SampleResult.setResponseCodeOK();
    SampleResult.setResponseMessageOK();
    */
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Select Loan" enabled="true">
            <stringProp name="IfController.condition">&apos;${scope}&apos; == &apos;selectLoan&apos;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dev Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="2645995">User</stringProp>
                <stringProp name="2606829">Time</stringProp>
                <stringProp name="80811750">Time3</stringProp>
                <stringProp name="2122702">Date</stringProp>
                <stringProp name="80811751">Time4</stringProp>
                <stringProp name="-201069322">Username</stringProp>
                <stringProp name="-125484198">uniqueIdentifier</stringProp>
                <stringProp name="1674314293">reservationNumber</stringProp>
                <stringProp name="-386871910">dateOfBirth</stringProp>
                <stringProp name="-478379258">TodaysDateBySlash</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="551912850">
                  <stringProp name="-1332388061">${__Random(7122,9009234)}</stringProp>
                  <stringProp name="217092793">${__time}</stringProp>
                  <stringProp name="1196789496">${__time(ssssss)}</stringProp>
                  <stringProp name="-1983561601">${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(new Date()))}</stringProp>
                  <stringProp name="1821498968">${__time(HH:mm:ss)}</stringProp>
                  <stringProp name="-193851953">admin@bbva.com</stringProp>
                  <stringProp name="1573382938">3694d3c472e415ffe42b0682899cac185e83edf7</stringProp>
                  <stringProp name="62061615">ABCD1</stringProp>
                  <stringProp name="-1187136416">1980-01-01</stringProp>
                  <stringProp name="814952664">${__javaScript(var date=d.getDate(); var month=d.getMonth()+1;var d=new Date();d.setDate(d.getDate());$DATE=d.getFullYear() + &quot;/&quot; + (month&lt;10?&quot;0&quot;+month:month) + &quot;/&quot; + (date&lt;10?&quot;0&quot;+date:date);,DATE)} </stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
              <boolProp name="clearEachIteration">true</boolProp>
              <boolProp name="useExpires">false</boolProp>
            </CacheManager>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
              <collectionProp name="CookieManager.cookies"/>
              <boolProp name="CookieManager.clearEachIteration">true</boolProp>
              <stringProp name="CookieManager.policy">standard</stringProp>
              <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
            </CookieManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Auth Create Account" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;username&quot;:&quot;test${solicitation_key_1}@mailinator.com&quot;,&#xd;
&quot;password&quot;:&quot;Password1!&quot;,&#xd;
&quot;confirmPassword&quot;:&quot;Password1!&quot;,&#xd;
&quot;solicitationKey&quot;:&quot;${solicitation_key_1}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/registration</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
                <stringProp name="BeanShellAssertion.query">if (ResponseCode.equals(&quot;422&quot;) == true) { 
    SampleResult.setResponseOK();  

    /* the same is 
    SampleResult.setSuccessful(true);
    SampleResult.setResponseCodeOK();
    SampleResult.setResponseMessageOK();
    */
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;idpAccountId&quot;:(.+?)}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="applicantId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">applicantId</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;idpAccountId&quot;:(.+?)}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">applicantId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="198152773">&quot;success&quot;:true,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Create account/register Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Auth login -Valid Login" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;username&quot;: &quot;test${solicitation_key_1}@mailinator.com&quot;, &#xd;
&quot;password&quot;: &quot;Password1!&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/v2/auth</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">refreshToken</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">bearer</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;refreshToken&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">bearer</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Login with newly created account Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="1826958442">{&quot;success&quot;:true,</stringProp>
                  <stringProp name="1798555">&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Applications" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;campaign__reservationNumber&quot;:&quot;${solicitation_key_1}&quot;,&quot;person__firstName&quot;:&quot;Test&quot;,&quot;person__lastName&quot;:&quot;User&quot;,&quot;person__dateOfBirth&quot;:&quot;1980-01-01&quot;,&quot;person__memberOfArmedForces&quot;:&quot;Y&quot;,&quot;person__ssn&quot;:&quot;111111111&quot;,&quot;address__address1&quot;:&quot;Easy Street&quot;,&quot;address__address2&quot;:&quot;&quot;,&quot;address__city&quot;:&quot;SF&quot;,&quot;address__state&quot;:&quot;TX&quot;,&quot;address__postalCode&quot;:&quot;94109&quot;,&quot;address__since&quot;:&quot;GREATER_THAN_2_YEARS&quot;,&quot;phone__type&quot;:&quot;MOBILE&quot;,&quot;phone__number&quot;:&quot;(415) 555-5555&quot;}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/applications</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="loanappId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">loanappId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;appId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">loanappId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Submit Personal info(Prescreen execute) Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select eid from lendify.app_loan_app where id=&apos;${loanappId}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">partyId</stringProp>
              <stringProp name="resultVariable">partyId</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT - Financial Info" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;income__employmentStatus&quot;:&quot;0&quot;,&quot;income__employedSince&quot;:&quot;GREATER_THAN_2_YEARS&quot;,&quot;income__takeHomeAmount&quot;:&quot;5000&quot;&#xd;
,&quot;income__frequency&quot;:&quot;MONTHLY&quot;,&quot;income__nextPaycheckDate&quot;:&quot;${DateNow}&quot;,&quot;expense__homeOwnership&quot;:&quot;RENT&quot;&#xd;
,&quot;expense__housing&quot;:&quot;12&quot;,&quot;expense__car&quot;:&quot;12&quot;,&quot;expense__phone&quot;:&quot;12&quot;,&quot;expense__utilities&quot;:&quot;12&quot;,&quot;expense__dependents&quot;&#xd;
:&quot;2&quot;,&quot;financial__hasBankAccount&quot;:&quot;Y&quot;,&quot;financial__cardStatedUsage&quot;:&quot;ALL&quot;,&quot;financial__paydayStatedUsage&quot;:&quot;Y&quot;,&quot;preferredLoan__purpose&quot;:&quot;PAY_BILLS&quot;,&quot;authorization__consent&quot;:true}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/applications/${loanappId}/financial-info</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1303721089">&quot;route&quot;:&quot;choose-loan&quot;</stringProp>
                  <stringProp name="891288745">&quot;name&quot;:&quot;PRESCREEN&quot;,&quot;status&quot;:&quot;COMPLETED&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Submit Financial info(Final Approval execute) Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
                <stringProp name="BeanShellAssertion.query">if (ResponseCode.equals(&quot;422&quot;) == true) { 
    SampleResult.setResponseOK();  

    /* the same is 
    SampleResult.setSuccessful(true);
    SampleResult.setResponseCodeOK();
    SampleResult.setResponseMessageOK();
    */
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - loan offers" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/products/loan/applications/${loanappId}/loanOffers</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regex- loan term" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">loanTerm</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;default_loan_amount&quot;:(.+?),&quot;default_loan_term&quot;:(.+?),&quot;payment_frequency&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regex - loan amount" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">loanAmount</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;max_loan_amount&quot;:(.+?),&quot;default_loan_amount&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Get Loan offers Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT - Choose loan" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;preferredLoan__amount&quot;:${loanAmount},&quot;preferredLoan__loanTerm&quot;:${loanTerm}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/applications/${loanappId}/choose-loan</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Choose Loan Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;\n\nAPP ID = &quot; + vars.get(&quot;loanappId&quot;));
System.out.println(&quot;PARTY ID = &quot; + vars.get(&quot;partyId_1&quot;));
System.out.println(&quot;PRODUCT KEY = &quot; + vars.get(&quot;productAccountId&quot;));
System.out.println(&quot;User credentials = &quot; + &quot;test&quot; + vars.get(&quot;solicitation_key_1&quot;) + &quot;@mailinator.com/Password1!&quot;);
System.out.println(&quot;\n\n ------------------------------------------------------------------ \n\n&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - full" enabled="true">
            <stringProp name="IfController.condition">&apos;${scope}&apos; == &apos;full&apos;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dev Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="2645995">User</stringProp>
                <stringProp name="2606829">Time</stringProp>
                <stringProp name="80811750">Time3</stringProp>
                <stringProp name="2122702">Date</stringProp>
                <stringProp name="80811751">Time4</stringProp>
                <stringProp name="-201069322">Username</stringProp>
                <stringProp name="-125484198">uniqueIdentifier</stringProp>
                <stringProp name="1674314293">reservationNumber</stringProp>
                <stringProp name="-386871910">dateOfBirth</stringProp>
                <stringProp name="-478379258">TodaysDateBySlash</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="551912850">
                  <stringProp name="-1332388061">${__Random(7122,9009234)}</stringProp>
                  <stringProp name="217092793">${__time}</stringProp>
                  <stringProp name="1196789496">${__time(ssssss)}</stringProp>
                  <stringProp name="-1983561601">${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(new Date()))}</stringProp>
                  <stringProp name="1821498968">${__time(HH:mm:ss)}</stringProp>
                  <stringProp name="-193851953">admin@bbva.com</stringProp>
                  <stringProp name="1573382938">3694d3c472e415ffe42b0682899cac185e83edf7</stringProp>
                  <stringProp name="62061615">ABCD1</stringProp>
                  <stringProp name="-1187136416">1980-01-01</stringProp>
                  <stringProp name="814952664">${__javaScript(var date=d.getDate(); var month=d.getMonth()+1;var d=new Date();d.setDate(d.getDate());$DATE=d.getFullYear() + &quot;/&quot; + (month&lt;10?&quot;0&quot;+month:month) + &quot;/&quot; + (date&lt;10?&quot;0&quot;+date:date);,DATE)} </stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
              <boolProp name="clearEachIteration">true</boolProp>
              <boolProp name="useExpires">false</boolProp>
            </CacheManager>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
              <collectionProp name="CookieManager.cookies"/>
              <boolProp name="CookieManager.clearEachIteration">true</boolProp>
              <stringProp name="CookieManager.policy">standard</stringProp>
              <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
            </CookieManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Auth Create Account" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;username&quot;:&quot;test${solicitation_key_1}@mailinator.com&quot;,&#xd;
&quot;password&quot;:&quot;Password1!&quot;,&#xd;
&quot;confirmPassword&quot;:&quot;Password1!&quot;,&#xd;
&quot;solicitationKey&quot;:&quot;${solicitation_key_1}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/registration</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
                <stringProp name="BeanShellAssertion.query">if (ResponseCode.equals(&quot;422&quot;) == true) { 
    SampleResult.setResponseOK();  

    /* the same is 
    SampleResult.setSuccessful(true);
    SampleResult.setResponseCodeOK();
    SampleResult.setResponseMessageOK();
    */
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;idpAccountId&quot;:(.+?)}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="applicantId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">applicantId</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;idpAccountId&quot;:(.+?)}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">applicantId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="198152773">&quot;success&quot;:true,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Create account/register Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Auth login -Valid Login" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;username&quot;: &quot;test${solicitation_key_1}@mailinator.com&quot;, &#xd;
&quot;password&quot;: &quot;Password1!&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/v2/auth</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">refreshToken</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">bearer</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;refreshToken&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">bearer</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Login with newly created account Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="1826958442">{&quot;success&quot;:true,</stringProp>
                  <stringProp name="1798555">&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Applications" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;campaign__reservationNumber&quot;:&quot;${solicitation_key_1}&quot;,&quot;person__firstName&quot;:&quot;Test&quot;,&quot;person__lastName&quot;:&quot;User&quot;,&quot;person__dateOfBirth&quot;:&quot;1980-01-01&quot;,&quot;person__memberOfArmedForces&quot;:&quot;N&quot;,&quot;person__ssn&quot;:&quot;111111111&quot;,&quot;address__address1&quot;:&quot;Easy Street&quot;,&quot;address__address2&quot;:&quot;&quot;,&quot;address__city&quot;:&quot;SF&quot;,&quot;address__state&quot;:&quot;TX&quot;,&quot;address__postalCode&quot;:&quot;94109&quot;,&quot;address__since&quot;:&quot;GREATER_THAN_2_YEARS&quot;,&quot;phone__type&quot;:&quot;MOBILE&quot;,&quot;phone__number&quot;:&quot;(415) 555-5555&quot;}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/applications</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="loanappId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">loanappId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;appId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">loanappId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Submit Personal info(Prescreen execute) Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select eid from lendify.app_loan_app where id=&apos;${loanappId}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">partyId</stringProp>
              <stringProp name="resultVariable">partyId</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT - Financial Info" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;income__employmentStatus&quot;:&quot;0&quot;,&quot;income__employedSince&quot;:&quot;GREATER_THAN_2_YEARS&quot;,&quot;income__takeHomeAmount&quot;:&quot;5000&quot;&#xd;
,&quot;income__frequency&quot;:&quot;MONTHLY&quot;,&quot;income__nextPaycheckDate&quot;:&quot;${DateNow}&quot;,&quot;expense__homeOwnership&quot;:&quot;RENT&quot;&#xd;
,&quot;expense__housing&quot;:&quot;12&quot;,&quot;expense__car&quot;:&quot;12&quot;,&quot;expense__phone&quot;:&quot;12&quot;,&quot;expense__utilities&quot;:&quot;12&quot;,&quot;expense__dependents&quot;&#xd;
:&quot;2&quot;,&quot;financial__hasBankAccount&quot;:&quot;Y&quot;,&quot;financial__cardStatedUsage&quot;:&quot;ALL&quot;,&quot;financial__paydayStatedUsage&quot;:&quot;Y&quot;,&quot;preferredLoan__purpose&quot;:&quot;PAY_BILLS&quot;,&quot;authorization__consent&quot;:true}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/applications/${loanappId}/financial-info</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1303721089">&quot;route&quot;:&quot;choose-loan&quot;</stringProp>
                  <stringProp name="891288745">&quot;name&quot;:&quot;PRESCREEN&quot;,&quot;status&quot;:&quot;COMPLETED&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Submit Financial info(Final Approval execute) Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
                <stringProp name="BeanShellAssertion.query">if (ResponseCode.equals(&quot;422&quot;) == true) { 
    SampleResult.setResponseOK();  

    /* the same is 
    SampleResult.setSuccessful(true);
    SampleResult.setResponseCodeOK();
    SampleResult.setResponseMessageOK();
    */
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - loan offers" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/products/loan/applications/${loanappId}/loanOffers</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regex- loan term" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">loanTerm</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;default_loan_amount&quot;:(.+?),&quot;default_loan_term&quot;:(.+?),&quot;payment_frequency&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regex - loan amount" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">loanAmount</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;max_loan_amount&quot;:(.+?),&quot;default_loan_amount&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Get Loan offers Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT - Choose loan" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;preferredLoan__amount&quot;:${loanAmount},&quot;preferredLoan__loanTerm&quot;:${loanTerm}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/applications/${loanappId}/choose-loan</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Choose Loan Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT - Sign Loan Contract" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;disbursement__signatureFirstName&quot;:&quot;Test&quot;,&quot;disbursement__signatureLastName&quot;:&quot;User&quot;,&quot;disbursement__signatureDate&quot;&#xd;
:&quot;${SignDate}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/applications/${loanappId}/sign-loan</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Sign Loan contract Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.tika.Tika;

InputStream in = new ByteArrayInputStream(data);
Tika tika = new Tika();
String content = tika.parseToString(in);
log.info(content);
vars.put(&quot;content&quot;, content);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="154018593">Consent to Electronic Disclosures</stringProp>
                  <stringProp name="-939393818">and Communications</stringProp>
                  <stringProp name="699862137">In order for us to provide disclosures and other communications related to this loan application or </stringProp>
                  <stringProp name="2120717428">obtain your consent in accordance with the provisions set forth in this Consent to Electronic </stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">content</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">5000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Products" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/products</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productAccountId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productAccountId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;productAccountId&quot;:&quot;(.+?)&quot;,&quot;name&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">productAccountId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Get Loan product Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Get Payment Means" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/paymentMeans/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="PaymentMeanAlias" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">PaymentMeanAlias</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;alias&quot;:&quot;(.+?)&quot;,&quot;consentAuthorizationCode&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">PaymentMeanAlias</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="PaymentMeanType" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">PaymentMeanType</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;preferredAccount&quot;:(.+?),&quot;type&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="PaymentMeanId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">PaymentMeanId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),&quot;accountNumberDisplay&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">PaymentMeanId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Get default payment mean Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Loan Accounts" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/products/loan/accounts/${productAccountId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="currentPaymentDue" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">currentPaymentDue</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;currentPaymentDue&quot;:(.+?),&quot;totalPaid&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">currentPaymentDue</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="totalPaidInstallments" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">totalPaidInstallments</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;totalPaidInstallments&quot; :(.+?),&quot;balance&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">totalPaidInstallments</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="balance" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">balance</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;balance&quot;:(.+?),&quot;asOf&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">balance</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="repaymentProgress" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">repaymentProgress</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;repaymentProgress&quot;:(.+?)},&quot;loanProduct&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">repaymentProgress</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="disbursementAmount" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">disbursementAmount</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;DISBURSEMENT&quot;,&quot;amount&quot;:(.+?),&quot;balance&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">balance</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Get Loan summary Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="PaymentMeanAlias" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">PaymentMeanAlias</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;alias&quot;:&quot;(.+?)&quot;,&quot;disabled&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">PaymentMeanAlias</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Funding" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;disbursementAmount&quot;: &quot;${disbursementAmount}&quot;,&#xd;
	&quot;paymentMethod&quot;: &quot;${PaymentMeanType}&quot;, &#xd;
	&quot;paymentMeanName&quot;: &quot;${PaymentMeanAlias}&quot;&#xd;
	&#xd;
	}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/products/loan/accounts/${productAccountId}/fund</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="fundingTransactionKey" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">fundingTransactionKey</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;fundingTransactionKey&quot;:&quot;(.+?)&quot;,&quot;canFundProduct&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">fundingTransactionKey</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Funding authorization Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT - Funding" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;disbursementAmount&quot;: &quot;${disbursementAmount}&quot;,&#xd;
	&quot;paymentMethod&quot;: &quot;${PaymentMeanType}&quot;, &#xd;
	&quot;paymentMeanName&quot;: &quot;${PaymentMeanAlias}&quot;&#xd;
	&#xd;
	}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/products/loan/accounts/${productAccountId}/fund/${fundingTransactionKey}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Funding Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;\n\nAPP ID = &quot; + vars.get(&quot;loanappId&quot;));
System.out.println(&quot;PARTY ID = &quot; + vars.get(&quot;partyId_1&quot;));
System.out.println(&quot;PRODUCT KEY = &quot; + vars.get(&quot;productAccountId&quot;));
System.out.println(&quot;User credentials = &quot; + &quot;test&quot; + vars.get(&quot;solicitation_key_1&quot;) + &quot;@mailinator.com/Password1!&quot;);
System.out.println(&quot;\n\n ------------------------------------------------------------------ \n\n&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-104562505">&quot;fundingStatus&quot;:&quot;ERROR&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Sign loan contract" enabled="true">
            <stringProp name="IfController.condition">&apos;${scope}&apos; == &apos;signLoanContract&apos;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dev Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="2645995">User</stringProp>
                <stringProp name="2606829">Time</stringProp>
                <stringProp name="80811750">Time3</stringProp>
                <stringProp name="2122702">Date</stringProp>
                <stringProp name="80811751">Time4</stringProp>
                <stringProp name="-201069322">Username</stringProp>
                <stringProp name="-125484198">uniqueIdentifier</stringProp>
                <stringProp name="1674314293">reservationNumber</stringProp>
                <stringProp name="-386871910">dateOfBirth</stringProp>
                <stringProp name="-478379258">TodaysDateBySlash</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="551912850">
                  <stringProp name="-1332388061">${__Random(7122,9009234)}</stringProp>
                  <stringProp name="217092793">${__time}</stringProp>
                  <stringProp name="1196789496">${__time(ssssss)}</stringProp>
                  <stringProp name="-1983561601">${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(new Date()))}</stringProp>
                  <stringProp name="1821498968">${__time(HH:mm:ss)}</stringProp>
                  <stringProp name="-193851953">admin@bbva.com</stringProp>
                  <stringProp name="1573382938">3694d3c472e415ffe42b0682899cac185e83edf7</stringProp>
                  <stringProp name="62061615">ABCD1</stringProp>
                  <stringProp name="-1187136416">1980-01-01</stringProp>
                  <stringProp name="814952664">${__javaScript(var date=d.getDate(); var month=d.getMonth()+1;var d=new Date();d.setDate(d.getDate());$DATE=d.getFullYear() + &quot;/&quot; + (month&lt;10?&quot;0&quot;+month:month) + &quot;/&quot; + (date&lt;10?&quot;0&quot;+date:date);,DATE)} </stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
              <boolProp name="clearEachIteration">true</boolProp>
              <boolProp name="useExpires">false</boolProp>
            </CacheManager>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
              <collectionProp name="CookieManager.cookies"/>
              <boolProp name="CookieManager.clearEachIteration">true</boolProp>
              <stringProp name="CookieManager.policy">standard</stringProp>
              <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
            </CookieManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Auth Create Account" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;username&quot;:&quot;test${solicitation_key_1}@mailinator.com&quot;,&#xd;
&quot;password&quot;:&quot;Password1!&quot;,&#xd;
&quot;confirmPassword&quot;:&quot;Password1!&quot;,&#xd;
&quot;solicitationKey&quot;:&quot;${solicitation_key_1}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/registration</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
                <stringProp name="BeanShellAssertion.query">if (ResponseCode.equals(&quot;422&quot;) == true) { 
    SampleResult.setResponseOK();  

    /* the same is 
    SampleResult.setSuccessful(true);
    SampleResult.setResponseCodeOK();
    SampleResult.setResponseMessageOK();
    */
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;idpAccountId&quot;:(.+?)}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="applicantId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">applicantId</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;idpAccountId&quot;:(.+?)}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">applicantId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="198152773">&quot;success&quot;:true,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Create account/register Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Auth login -Valid Login" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;username&quot;: &quot;test${solicitation_key_1}@mailinator.com&quot;, &#xd;
&quot;password&quot;: &quot;Password1!&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/v2/auth</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">refreshToken</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">bearer</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;refreshToken&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">bearer</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Login with newly created account Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="1826958442">{&quot;success&quot;:true,</stringProp>
                  <stringProp name="1798555">&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Applications" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;campaign__reservationNumber&quot;:&quot;${solicitation_key_1}&quot;,&quot;person__firstName&quot;:&quot;Test&quot;,&quot;person__lastName&quot;:&quot;User&quot;,&quot;person__dateOfBirth&quot;:&quot;1980-01-01&quot;,&quot;person__memberOfArmedForces&quot;:&quot;Y&quot;,&quot;person__ssn&quot;:&quot;111111111&quot;,&quot;address__address1&quot;:&quot;Easy Street&quot;,&quot;address__address2&quot;:&quot;&quot;,&quot;address__city&quot;:&quot;SF&quot;,&quot;address__state&quot;:&quot;TX&quot;,&quot;address__postalCode&quot;:&quot;94109&quot;,&quot;address__since&quot;:&quot;GREATER_THAN_2_YEARS&quot;,&quot;phone__type&quot;:&quot;MOBILE&quot;,&quot;phone__number&quot;:&quot;(415) 555-5555&quot;}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/applications</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="loanappId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">loanappId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;appId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">loanappId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Submit Personal info(Prescreen execute) Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select eid from lendify.app_loan_app where id=&apos;${loanappId}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">partyId</stringProp>
              <stringProp name="resultVariable">partyId</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT - Financial Info" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;income__employmentStatus&quot;:&quot;0&quot;,&quot;income__employedSince&quot;:&quot;GREATER_THAN_2_YEARS&quot;,&quot;income__takeHomeAmount&quot;:&quot;5000&quot;&#xd;
,&quot;income__frequency&quot;:&quot;MONTHLY&quot;,&quot;income__nextPaycheckDate&quot;:&quot;${DateNow}&quot;,&quot;expense__homeOwnership&quot;:&quot;RENT&quot;&#xd;
,&quot;expense__housing&quot;:&quot;12&quot;,&quot;expense__car&quot;:&quot;12&quot;,&quot;expense__phone&quot;:&quot;12&quot;,&quot;expense__utilities&quot;:&quot;12&quot;,&quot;expense__dependents&quot;&#xd;
:&quot;2&quot;,&quot;financial__hasBankAccount&quot;:&quot;Y&quot;,&quot;financial__cardStatedUsage&quot;:&quot;ALL&quot;,&quot;financial__paydayStatedUsage&quot;:&quot;Y&quot;,&quot;preferredLoan__purpose&quot;:&quot;PAY_BILLS&quot;,&quot;authorization__consent&quot;:true}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/applications/${loanappId}/financial-info</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1303721089">&quot;route&quot;:&quot;choose-loan&quot;</stringProp>
                  <stringProp name="891288745">&quot;name&quot;:&quot;PRESCREEN&quot;,&quot;status&quot;:&quot;COMPLETED&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Submit Financial info(Final Approval execute) Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
                <stringProp name="BeanShellAssertion.query">if (ResponseCode.equals(&quot;422&quot;) == true) { 
    SampleResult.setResponseOK();  

    /* the same is 
    SampleResult.setSuccessful(true);
    SampleResult.setResponseCodeOK();
    SampleResult.setResponseMessageOK();
    */
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - loan offers" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/products/loan/applications/${loanappId}/loanOffers</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regex- loan term" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">loanTerm</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;default_loan_amount&quot;:(.+?),&quot;default_loan_term&quot;:(.+?),&quot;payment_frequency&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regex - loan amount" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">loanAmount</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;max_loan_amount&quot;:(.+?),&quot;default_loan_amount&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Get Loan offers Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT - Choose loan" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;preferredLoan__amount&quot;:${loanAmount},&quot;preferredLoan__loanTerm&quot;:${loanTerm}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/applications/${loanappId}/choose-loan</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Choose Loan Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT - Sign Loan Contract" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;disbursement__signatureFirstName&quot;:&quot;Test&quot;,&quot;disbursement__signatureLastName&quot;:&quot;User&quot;,&quot;disbursement__signatureDate&quot;&#xd;
:&quot;${SignDate}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/applications/${loanappId}/sign-loan</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Sign Loan contract Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.tika.Tika;

InputStream in = new ByteArrayInputStream(data);
Tika tika = new Tika();
String content = tika.parseToString(in);
log.info(content);
vars.put(&quot;content&quot;, content);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="154018593">Consent to Electronic Disclosures</stringProp>
                  <stringProp name="-939393818">and Communications</stringProp>
                  <stringProp name="699862137">In order for us to provide disclosures and other communications related to this loan application or </stringProp>
                  <stringProp name="2120717428">obtain your consent in accordance with the provisions set forth in this Consent to Electronic </stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">content</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">5000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Products" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/products</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productAccountId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productAccountId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;productAccountId&quot;:&quot;(.+?)&quot;,&quot;name&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">productAccountId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Get Loan product Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;\n\nAPP ID = &quot; + vars.get(&quot;loanappId&quot;));
System.out.println(&quot;PARTY ID = &quot; + vars.get(&quot;partyId_1&quot;));
System.out.println(&quot;PRODUCT KEY = &quot; + vars.get(&quot;productAccountId&quot;));
System.out.println(&quot;User credentials = &quot; + &quot;test&quot; + vars.get(&quot;solicitation_key_1&quot;) + &quot;@mailinator.com/Password1!&quot;);
System.out.println(&quot;\n\n ------------------------------------------------------------------ \n\n&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller- Campaign Id not provided as param(use latest campaign for tenant)" enabled="true">
          <stringProp name="IfController.condition">&apos;${campaignId}&apos; == &apos;0&apos;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-Lendify DB when env QA" enabled="true">
            <stringProp name="IfController.condition">&apos;${env}&apos; == &apos;qa&apos;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="DB Configuration QA" enabled="true">
              <boolProp name="autocommit">true</boolProp>
              <stringProp name="checkQuery">Select 1</stringProp>
              <stringProp name="connectionAge">5000</stringProp>
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="dbUrl">jdbc:postgresql://lendify-qa.cl6q9ofwkebd.us-west-2.rds.amazonaws.com:5432/lendify?autoReconnect=true</stringProp>
              <stringProp name="driver">org.postgresql.Driver</stringProp>
              <boolProp name="keepAlive">true</boolProp>
              <stringProp name="password">zemeFuKeT6trutUv</stringProp>
              <stringProp name="poolMax">10</stringProp>
              <stringProp name="timeout">10000</stringProp>
              <stringProp name="trimInterval">60000</stringProp>
              <stringProp name="username">lendify</stringProp>
              <stringProp name="transactionIsolation">DEFAULT</stringProp>
            </JDBCDataSource>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request to get tenant name" enabled="true">
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select name from lendify.fabric_tenant where id=${tenantId}</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">tenantname</stringProp>
              <stringProp name="resultVariable">tenantname</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;\nScript being executed against environment(script param &apos;env&apos;): &quot; + vars.get(&quot;env&quot;).toUpperCase());
System.out.println(&quot;Script being executed for scope(script param &apos;scope&apos;): &quot; + vars.get(&quot;scope&quot;).toUpperCase());
System.out.println(&quot;Script being executed for Tenant ID(script param &apos;tenant&apos;): &quot; + vars.get(&quot;tenantId&quot;).toUpperCase() + &quot; (&quot; + vars.get(&quot;tenantname_1&quot;).toUpperCase() +&quot;)&quot; +  &quot;\n&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request to get latest campaign Id for tenant" enabled="true">
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT id, campaign_name FROM marketing_campaign WHERE tenant_id=${tenantId} AND disabled=false order by start_date desc limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">latestCampaignId,campaignName</stringProp>
              <stringProp name="resultVariable">latestCampaignId,campaignName</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request to get solicitation key" enabled="true">
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT solicitation_key FROM lendify.marketing_solicitation WHERE idp_account_id IS NULL AND solicitation_date IS NOT NULL AND responded=&apos;false&apos; AND campaign_id=${latestCampaignId_1} ORDER BY solicitation_date DESC LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">solicitation_key</stringProp>
              <stringProp name="resultVariable">solicitation_key</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings"/>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//int sol= vars.get(&quot;solicitation_key_#&quot;);
if (vars.get(&quot;solicitation_key_#&quot;) == 0) {
  System.out.println(&quot;no valid solicitations found for campaign&quot;);
  org.apache.jmeter.engine.StandardJMeterEngine.stopThread(Thread.currentThread().getName()); 
  };</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller- Lendify DB when env DEV(docker)" enabled="true">
            <stringProp name="IfController.condition">${env}==dev</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="DB Configuration DEV (docker)" enabled="true">
              <boolProp name="autocommit">true</boolProp>
              <stringProp name="checkQuery">Select 1</stringProp>
              <stringProp name="connectionAge">5000</stringProp>
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="dbUrl">jdbc:postgresql://ldev-docker01:5432/test?autoReconnect=true</stringProp>
              <stringProp name="driver">org.postgresql.Driver</stringProp>
              <boolProp name="keepAlive">true</boolProp>
              <stringProp name="password">password</stringProp>
              <stringProp name="poolMax">10</stringProp>
              <stringProp name="timeout">10000</stringProp>
              <stringProp name="trimInterval">60000</stringProp>
              <stringProp name="username">app</stringProp>
              <stringProp name="transactionIsolation">DEFAULT</stringProp>
            </JDBCDataSource>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request to get tenant name" enabled="true">
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select name from lendify.fabric_tenant where id=${tenantId}</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">tenantname</stringProp>
              <stringProp name="resultVariable">tenantname</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;\nScript being executed against environment(script param &apos;env&apos;): &quot; + vars.get(&quot;env&quot;).toUpperCase());
System.out.println(&quot;Script being executed for scope(script param &apos;scope&apos;): &quot; + vars.get(&quot;scope&quot;).toUpperCase());
System.out.println(&quot;Script being executed for Tenant ID(script param &apos;tenant&apos;): &quot; + vars.get(&quot;tenantId&quot;).toUpperCase() + &quot; (&quot; + vars.get(&quot;tenantname_1&quot;).toUpperCase() +&quot;)&quot; +  &quot;\n&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request to get latest campaign Id for tenant" enabled="true">
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT id, campaign_name FROM marketing_campaign WHERE tenant_id=${tenantId} AND disabled=false order by start_date desc limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">latestCampaignId,campaignName</stringProp>
              <stringProp name="resultVariable">latestCampaignId,campaignName</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request to get solicitation key" enabled="true">
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT solicitation_key FROM lendify.marketing_solicitation WHERE idp_account_id IS NULL AND solicitation_date IS NOT NULL AND responded=&apos;false&apos; AND campaign_id=${latestCampaignId_1} ORDER BY solicitation_date DESC LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">solicitation_key</stringProp>
              <stringProp name="resultVariable">solicitation_key</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings"/>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//int sol= vars.get(&quot;solicitation_key_#&quot;);
if (vars.get(&quot;solicitation_key_#&quot;) == 0) {
  System.out.println(&quot;no valid solicitations found for campaign&quot;);
  org.apache.jmeter.engine.StandardJMeterEngine.stopThread(Thread.currentThread().getName()); 
  };</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller- Lendify DB when env TRAINING" enabled="true">
            <stringProp name="IfController.condition">&apos;${env}&apos; == &apos;training&apos;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="DB Configuration TRAINING" enabled="true">
              <boolProp name="autocommit">true</boolProp>
              <stringProp name="checkQuery">Select 1</stringProp>
              <stringProp name="connectionAge">5000</stringProp>
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="dbUrl">jdbc:postgresql://lendify-training.cl6q9ofwkebd.us-west-2.rds.amazonaws.com:5432/lendify?autoReconnect=true</stringProp>
              <stringProp name="driver">org.postgresql.Driver</stringProp>
              <boolProp name="keepAlive">true</boolProp>
              <stringProp name="password">password</stringProp>
              <stringProp name="poolMax">10</stringProp>
              <stringProp name="timeout">10000</stringProp>
              <stringProp name="trimInterval">60000</stringProp>
              <stringProp name="username">app</stringProp>
              <stringProp name="transactionIsolation">DEFAULT</stringProp>
            </JDBCDataSource>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request to get tenant name" enabled="true">
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select name from lendify.fabric_tenant where id=${tenantId}</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">tenantname</stringProp>
              <stringProp name="resultVariable">tenantname</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;\nScript being executed against environment(script param &apos;env&apos;): &quot; + vars.get(&quot;env&quot;).toUpperCase());
System.out.println(&quot;Script being executed for scope(script param &apos;scope&apos;): &quot; + vars.get(&quot;scope&quot;).toUpperCase());
System.out.println(&quot;Script being executed for Tenant ID(script param &apos;tenant&apos;): &quot; + vars.get(&quot;tenantId&quot;).toUpperCase() + &quot; (&quot; + vars.get(&quot;tenantname_1&quot;).toUpperCase() +&quot;)&quot; +  &quot;\n&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request to get latest campaign Id for tenant" enabled="true">
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT id, campaign_name FROM marketing_campaign WHERE tenant_id=${tenantId} AND disabled=false order by start_date desc limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">latestCampaignId,campaignName</stringProp>
              <stringProp name="resultVariable">latestCampaignId,campaignName</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request to get solicitation key" enabled="true">
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT solicitation_key FROM lendify.marketing_solicitation WHERE idp_account_id IS NULL AND solicitation_date IS NOT NULL AND responded=&apos;false&apos; AND campaign_id=${latestCampaignId_1} ORDER BY solicitation_date DESC LIMIT 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">solicitation_key</stringProp>
              <stringProp name="resultVariable">solicitation_key</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings"/>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//int sol= vars.get(&quot;solicitation_key_#&quot;);
if (vars.get(&quot;solicitation_key_#&quot;) == 0) {
  System.out.println(&quot;no valid solicitations found for campaign&quot;);
  org.apache.jmeter.engine.StandardJMeterEngine.stopThread(Thread.currentThread().getName()); 
  };</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller- create account" enabled="true">
            <stringProp name="IfController.condition">&apos;${scope}&apos; == &apos;createAccount&apos;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dev Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="2645995">User</stringProp>
                <stringProp name="2606829">Time</stringProp>
                <stringProp name="80811750">Time3</stringProp>
                <stringProp name="2122702">Date</stringProp>
                <stringProp name="80811751">Time4</stringProp>
                <stringProp name="-201069322">Username</stringProp>
                <stringProp name="-125484198">uniqueIdentifier</stringProp>
                <stringProp name="1674314293">reservationNumber</stringProp>
                <stringProp name="-386871910">dateOfBirth</stringProp>
                <stringProp name="-478379258">TodaysDateBySlash</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="551912850">
                  <stringProp name="-1332388061">${__Random(7122,9009234)}</stringProp>
                  <stringProp name="217092793">${__time}</stringProp>
                  <stringProp name="1196789496">${__time(ssssss)}</stringProp>
                  <stringProp name="-1983561601">${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(new Date()))}</stringProp>
                  <stringProp name="1821498968">${__time(HH:mm:ss)}</stringProp>
                  <stringProp name="-193851953">admin@bbva.com</stringProp>
                  <stringProp name="1573382938">3694d3c472e415ffe42b0682899cac185e83edf7</stringProp>
                  <stringProp name="62061615">ABCD1</stringProp>
                  <stringProp name="-1187136416">1980-01-01</stringProp>
                  <stringProp name="814952664">${__javaScript(var date=d.getDate(); var month=d.getMonth()+1;var d=new Date();d.setDate(d.getDate());$DATE=d.getFullYear() + &quot;/&quot; + (month&lt;10?&quot;0&quot;+month:month) + &quot;/&quot; + (date&lt;10?&quot;0&quot;+date:date);,DATE)} </stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
              <boolProp name="clearEachIteration">true</boolProp>
              <boolProp name="useExpires">false</boolProp>
            </CacheManager>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
              <collectionProp name="CookieManager.cookies"/>
              <boolProp name="CookieManager.clearEachIteration">true</boolProp>
              <stringProp name="CookieManager.policy">standard</stringProp>
              <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
            </CookieManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Auth Create Account" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;username&quot;:&quot;test${solicitation_key_1}@mailinator.com&quot;,&#xd;
&quot;password&quot;:&quot;Password1!&quot;,&#xd;
&quot;confirmPassword&quot;:&quot;Password1!&quot;,&#xd;
&quot;solicitationKey&quot;:&quot;${solicitation_key_1}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/registration</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
                <stringProp name="BeanShellAssertion.query">if (ResponseCode.equals(&quot;422&quot;) == true) { 
    SampleResult.setResponseOK();  

    /* the same is 
    SampleResult.setSuccessful(true);
    SampleResult.setResponseCodeOK();
    SampleResult.setResponseMessageOK();
    */
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;idpAccountId&quot;:(.+?)}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="applicantId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">applicantId</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;idpAccountId&quot;:(.+?)}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">applicantId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="198152773">&quot;success&quot;:true,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Create account/register Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Auth login -Valid Login" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;username&quot;: &quot;test${solicitation_key_1}@mailinator.com&quot;, &#xd;
&quot;password&quot;: &quot;Password1!&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/v2/auth</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">refreshToken</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">bearer</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;refreshToken&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">bearer</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Login with newly created account Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;\n\nAPP ID = &quot; + vars.get(&quot;loanappId&quot;));
System.out.println(&quot;PARTY ID = &quot; + vars.get(&quot;partyId_1&quot;));
System.out.println(&quot;PRODUCT KEY = &quot; + vars.get(&quot;productAccountId&quot;));
System.out.println(&quot;User credentials = &quot; + &quot;test&quot; + vars.get(&quot;solicitation_key_1&quot;) + &quot;@mailinator.com/Password1!&quot;);
System.out.println(&quot;\n\n ------------------------------------------------------------------ \n\n&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="1826958442">{&quot;success&quot;:true,</stringProp>
                  <stringProp name="1798555">&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller- Submt Personal Info (Prescreen execute)" enabled="true">
            <stringProp name="IfController.condition">&apos;${scope}&apos; == &apos;submitPersonalInfo&apos;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dev Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="2645995">User</stringProp>
                <stringProp name="2606829">Time</stringProp>
                <stringProp name="80811750">Time3</stringProp>
                <stringProp name="2122702">Date</stringProp>
                <stringProp name="80811751">Time4</stringProp>
                <stringProp name="-201069322">Username</stringProp>
                <stringProp name="-125484198">uniqueIdentifier</stringProp>
                <stringProp name="1674314293">reservationNumber</stringProp>
                <stringProp name="-386871910">dateOfBirth</stringProp>
                <stringProp name="-478379258">TodaysDateBySlash</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="551912850">
                  <stringProp name="-1332388061">${__Random(7122,9009234)}</stringProp>
                  <stringProp name="217092793">${__time}</stringProp>
                  <stringProp name="1196789496">${__time(ssssss)}</stringProp>
                  <stringProp name="-1983561601">${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(new Date()))}</stringProp>
                  <stringProp name="1821498968">${__time(HH:mm:ss)}</stringProp>
                  <stringProp name="-193851953">admin@bbva.com</stringProp>
                  <stringProp name="1573382938">3694d3c472e415ffe42b0682899cac185e83edf7</stringProp>
                  <stringProp name="62061615">ABCD1</stringProp>
                  <stringProp name="-1187136416">1980-01-01</stringProp>
                  <stringProp name="814952664">${__javaScript(var date=d.getDate(); var month=d.getMonth()+1;var d=new Date();d.setDate(d.getDate());$DATE=d.getFullYear() + &quot;/&quot; + (month&lt;10?&quot;0&quot;+month:month) + &quot;/&quot; + (date&lt;10?&quot;0&quot;+date:date);,DATE)} </stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
              <boolProp name="clearEachIteration">true</boolProp>
              <boolProp name="useExpires">false</boolProp>
            </CacheManager>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
              <collectionProp name="CookieManager.cookies"/>
              <boolProp name="CookieManager.clearEachIteration">true</boolProp>
              <stringProp name="CookieManager.policy">standard</stringProp>
              <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
            </CookieManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Auth Create Account" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;username&quot;:&quot;test${solicitation_key_1}@mailinator.com&quot;,&#xd;
&quot;password&quot;:&quot;Password1!&quot;,&#xd;
&quot;confirmPassword&quot;:&quot;Password1!&quot;,&#xd;
&quot;solicitationKey&quot;:&quot;${solicitation_key_1}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/registration</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
                <stringProp name="BeanShellAssertion.query">if (ResponseCode.equals(&quot;422&quot;) == true) { 
    SampleResult.setResponseOK();  

    /* the same is 
    SampleResult.setSuccessful(true);
    SampleResult.setResponseCodeOK();
    SampleResult.setResponseMessageOK();
    */
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;idpAccountId&quot;:(.+?)}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="applicantId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">applicantId</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;idpAccountId&quot;:(.+?)}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">applicantId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="198152773">&quot;success&quot;:true,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Create account/register Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Auth login -Valid Login" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;username&quot;: &quot;test${solicitation_key_1}@mailinator.com&quot;, &#xd;
&quot;password&quot;: &quot;Password1!&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/v2/auth</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">refreshToken</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">bearer</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;refreshToken&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">bearer</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Login with newly created account Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="1826958442">{&quot;success&quot;:true,</stringProp>
                  <stringProp name="1798555">&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Applications" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;campaign__reservationNumber&quot;:&quot;${solicitation_key_1}&quot;,&quot;person__firstName&quot;:&quot;Test&quot;,&quot;person__lastName&quot;:&quot;User&quot;,&quot;person__dateOfBirth&quot;:&quot;1980-01-01&quot;,&quot;person__memberOfArmedForces&quot;:&quot;Y&quot;,&quot;person__ssn&quot;:&quot;111111111&quot;,&quot;address__address1&quot;:&quot;Easy Street&quot;,&quot;address__address2&quot;:&quot;&quot;,&quot;address__city&quot;:&quot;SF&quot;,&quot;address__state&quot;:&quot;TX&quot;,&quot;address__postalCode&quot;:&quot;94109&quot;,&quot;address__since&quot;:&quot;GREATER_THAN_2_YEARS&quot;,&quot;phone__type&quot;:&quot;MOBILE&quot;,&quot;phone__number&quot;:&quot;(415) 555-5555&quot;}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/applications</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="loanappId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">loanappId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;appId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">loanappId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Submit Personal info(Prescreen execute) Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select eid from lendify.app_loan_app where id=&apos;${loanappId}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">partyId</stringProp>
              <stringProp name="resultVariable">partyId</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;\n\nAPP ID = &quot; + vars.get(&quot;loanappId&quot;));
System.out.println(&quot;PARTY ID = &quot; + vars.get(&quot;partyId_1&quot;));
System.out.println(&quot;PRODUCT KEY = &quot; + vars.get(&quot;productAccountId&quot;));
System.out.println(&quot;User credentials = &quot; + &quot;test&quot; + vars.get(&quot;solicitation_key_1&quot;) + &quot;@mailinator.com/Password1!&quot;);
System.out.println(&quot;\n\n ------------------------------------------------------------------ \n\n&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Submit Financial Info (Final Approval execute)" enabled="true">
            <stringProp name="IfController.condition">&apos;${scope}&apos; == &apos;submitFinancialInfo&apos;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dev Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="2645995">User</stringProp>
                <stringProp name="2606829">Time</stringProp>
                <stringProp name="80811750">Time3</stringProp>
                <stringProp name="2122702">Date</stringProp>
                <stringProp name="80811751">Time4</stringProp>
                <stringProp name="-201069322">Username</stringProp>
                <stringProp name="-125484198">uniqueIdentifier</stringProp>
                <stringProp name="1674314293">reservationNumber</stringProp>
                <stringProp name="-386871910">dateOfBirth</stringProp>
                <stringProp name="-478379258">TodaysDateBySlash</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="551912850">
                  <stringProp name="-1332388061">${__Random(7122,9009234)}</stringProp>
                  <stringProp name="217092793">${__time}</stringProp>
                  <stringProp name="1196789496">${__time(ssssss)}</stringProp>
                  <stringProp name="-1983561601">${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(new Date()))}</stringProp>
                  <stringProp name="1821498968">${__time(HH:mm:ss)}</stringProp>
                  <stringProp name="-193851953">admin@bbva.com</stringProp>
                  <stringProp name="1573382938">3694d3c472e415ffe42b0682899cac185e83edf7</stringProp>
                  <stringProp name="62061615">ABCD1</stringProp>
                  <stringProp name="-1187136416">1980-01-01</stringProp>
                  <stringProp name="814952664">${__javaScript(var date=d.getDate(); var month=d.getMonth()+1;var d=new Date();d.setDate(d.getDate());$DATE=d.getFullYear() + &quot;/&quot; + (month&lt;10?&quot;0&quot;+month:month) + &quot;/&quot; + (date&lt;10?&quot;0&quot;+date:date);,DATE)} </stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
              <boolProp name="clearEachIteration">true</boolProp>
              <boolProp name="useExpires">false</boolProp>
            </CacheManager>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
              <collectionProp name="CookieManager.cookies"/>
              <boolProp name="CookieManager.clearEachIteration">true</boolProp>
              <stringProp name="CookieManager.policy">standard</stringProp>
              <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
            </CookieManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Auth Create Account" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;username&quot;:&quot;test${solicitation_key_1}@mailinator.com&quot;,&#xd;
&quot;password&quot;:&quot;Password1!&quot;,&#xd;
&quot;confirmPassword&quot;:&quot;Password1!&quot;,&#xd;
&quot;solicitationKey&quot;:&quot;${solicitation_key_1}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/registration</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
                <stringProp name="BeanShellAssertion.query">if (ResponseCode.equals(&quot;422&quot;) == true) { 
    SampleResult.setResponseOK();  

    /* the same is 
    SampleResult.setSuccessful(true);
    SampleResult.setResponseCodeOK();
    SampleResult.setResponseMessageOK();
    */
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;idpAccountId&quot;:(.+?)}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="applicantId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">applicantId</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;idpAccountId&quot;:(.+?)}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">applicantId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="198152773">&quot;success&quot;:true,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Create account/register Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Auth login -Valid Login" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;username&quot;: &quot;test${solicitation_key_1}@mailinator.com&quot;, &#xd;
&quot;password&quot;: &quot;Password1!&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/v2/auth</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">refreshToken</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">bearer</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;refreshToken&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">bearer</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Login with newly created account Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="1826958442">{&quot;success&quot;:true,</stringProp>
                  <stringProp name="1798555">&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Applications" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;campaign__reservationNumber&quot;:&quot;${solicitation_key_1}&quot;,&quot;person__firstName&quot;:&quot;Test&quot;,&quot;person__lastName&quot;:&quot;User&quot;,&quot;person__dateOfBirth&quot;:&quot;1980-01-01&quot;,&quot;person__memberOfArmedForces&quot;:&quot;Y&quot;,&quot;person__ssn&quot;:&quot;111111111&quot;,&quot;address__address1&quot;:&quot;Easy Street&quot;,&quot;address__address2&quot;:&quot;&quot;,&quot;address__city&quot;:&quot;SF&quot;,&quot;address__state&quot;:&quot;TX&quot;,&quot;address__postalCode&quot;:&quot;94109&quot;,&quot;address__since&quot;:&quot;GREATER_THAN_2_YEARS&quot;,&quot;phone__type&quot;:&quot;MOBILE&quot;,&quot;phone__number&quot;:&quot;(415) 555-5555&quot;}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/applications</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="loanappId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">loanappId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;appId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">loanappId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Submit Personal info(Prescreen execute) Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select eid from lendify.app_loan_app where id=&apos;${loanappId}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">partyId</stringProp>
              <stringProp name="resultVariable">partyId</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT - Financial Info" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;income__employmentStatus&quot;:&quot;0&quot;,&quot;income__employedSince&quot;:&quot;GREATER_THAN_2_YEARS&quot;,&quot;income__takeHomeAmount&quot;:&quot;5000&quot;&#xd;
,&quot;income__frequency&quot;:&quot;MONTHLY&quot;,&quot;income__nextPaycheckDate&quot;:&quot;${DateNow}&quot;,&quot;expense__homeOwnership&quot;:&quot;RENT&quot;&#xd;
,&quot;expense__housing&quot;:&quot;12&quot;,&quot;expense__car&quot;:&quot;12&quot;,&quot;expense__phone&quot;:&quot;12&quot;,&quot;expense__utilities&quot;:&quot;12&quot;,&quot;expense__dependents&quot;&#xd;
:&quot;2&quot;,&quot;financial__hasBankAccount&quot;:&quot;Y&quot;,&quot;financial__cardStatedUsage&quot;:&quot;ALL&quot;,&quot;financial__paydayStatedUsage&quot;:&quot;Y&quot;,&quot;preferredLoan__purpose&quot;:&quot;PAY_BILLS&quot;,&quot;authorization__consent&quot;:true}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/applications/${loanappId}/financial-info</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1303721089">&quot;route&quot;:&quot;choose-loan&quot;</stringProp>
                  <stringProp name="891288745">&quot;name&quot;:&quot;PRESCREEN&quot;,&quot;status&quot;:&quot;COMPLETED&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Submit Financial info(Final Approval execute) Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;\n\nAPP ID = &quot; + vars.get(&quot;loanappId&quot;));
System.out.println(&quot;PARTY ID = &quot; + vars.get(&quot;partyId_1&quot;));
System.out.println(&quot;PRODUCT KEY = &quot; + vars.get(&quot;productAccountId&quot;));
System.out.println(&quot;User credentials = &quot; + &quot;test&quot; + vars.get(&quot;solicitation_key_1&quot;) + &quot;@mailinator.com/Password1!&quot;);
System.out.println(&quot;\n\n ------------------------------------------------------------------ \n\n&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
                <stringProp name="BeanShellAssertion.query">if (ResponseCode.equals(&quot;422&quot;) == true) { 
    SampleResult.setResponseOK();  

    /* the same is 
    SampleResult.setSuccessful(true);
    SampleResult.setResponseCodeOK();
    SampleResult.setResponseMessageOK();
    */
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Select Loan" enabled="true">
            <stringProp name="IfController.condition">&apos;${scope}&apos; == &apos;selectLoan&apos;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dev Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="2645995">User</stringProp>
                <stringProp name="2606829">Time</stringProp>
                <stringProp name="80811750">Time3</stringProp>
                <stringProp name="2122702">Date</stringProp>
                <stringProp name="80811751">Time4</stringProp>
                <stringProp name="-201069322">Username</stringProp>
                <stringProp name="-125484198">uniqueIdentifier</stringProp>
                <stringProp name="1674314293">reservationNumber</stringProp>
                <stringProp name="-386871910">dateOfBirth</stringProp>
                <stringProp name="-478379258">TodaysDateBySlash</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="551912850">
                  <stringProp name="-1332388061">${__Random(7122,9009234)}</stringProp>
                  <stringProp name="217092793">${__time}</stringProp>
                  <stringProp name="1196789496">${__time(ssssss)}</stringProp>
                  <stringProp name="-1983561601">${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(new Date()))}</stringProp>
                  <stringProp name="1821498968">${__time(HH:mm:ss)}</stringProp>
                  <stringProp name="-193851953">admin@bbva.com</stringProp>
                  <stringProp name="1573382938">3694d3c472e415ffe42b0682899cac185e83edf7</stringProp>
                  <stringProp name="62061615">ABCD1</stringProp>
                  <stringProp name="-1187136416">1980-01-01</stringProp>
                  <stringProp name="814952664">${__javaScript(var date=d.getDate(); var month=d.getMonth()+1;var d=new Date();d.setDate(d.getDate());$DATE=d.getFullYear() + &quot;/&quot; + (month&lt;10?&quot;0&quot;+month:month) + &quot;/&quot; + (date&lt;10?&quot;0&quot;+date:date);,DATE)} </stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
              <boolProp name="clearEachIteration">true</boolProp>
              <boolProp name="useExpires">false</boolProp>
            </CacheManager>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
              <collectionProp name="CookieManager.cookies"/>
              <boolProp name="CookieManager.clearEachIteration">true</boolProp>
              <stringProp name="CookieManager.policy">standard</stringProp>
              <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
            </CookieManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Auth Create Account" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;username&quot;:&quot;test${solicitation_key_1}@mailinator.com&quot;,&#xd;
&quot;password&quot;:&quot;Password1!&quot;,&#xd;
&quot;confirmPassword&quot;:&quot;Password1!&quot;,&#xd;
&quot;solicitationKey&quot;:&quot;${solicitation_key_1}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/registration</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
                <stringProp name="BeanShellAssertion.query">if (ResponseCode.equals(&quot;422&quot;) == true) { 
    SampleResult.setResponseOK();  

    /* the same is 
    SampleResult.setSuccessful(true);
    SampleResult.setResponseCodeOK();
    SampleResult.setResponseMessageOK();
    */
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;idpAccountId&quot;:(.+?)}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="applicantId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">applicantId</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;idpAccountId&quot;:(.+?)}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">applicantId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="198152773">&quot;success&quot;:true,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Create account/register Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Auth login -Valid Login" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;username&quot;: &quot;test${solicitation_key_1}@mailinator.com&quot;, &#xd;
&quot;password&quot;: &quot;Password1!&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/v2/auth</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">refreshToken</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">bearer</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;refreshToken&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">bearer</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Login with newly created account Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="1826958442">{&quot;success&quot;:true,</stringProp>
                  <stringProp name="1798555">&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Applications" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;campaign__reservationNumber&quot;:&quot;${solicitation_key_1}&quot;,&quot;person__firstName&quot;:&quot;Test&quot;,&quot;person__lastName&quot;:&quot;User&quot;,&quot;person__dateOfBirth&quot;:&quot;1980-01-01&quot;,&quot;person__memberOfArmedForces&quot;:&quot;Y&quot;,&quot;person__ssn&quot;:&quot;111111111&quot;,&quot;address__address1&quot;:&quot;Easy Street&quot;,&quot;address__address2&quot;:&quot;&quot;,&quot;address__city&quot;:&quot;SF&quot;,&quot;address__state&quot;:&quot;TX&quot;,&quot;address__postalCode&quot;:&quot;94109&quot;,&quot;address__since&quot;:&quot;GREATER_THAN_2_YEARS&quot;,&quot;phone__type&quot;:&quot;MOBILE&quot;,&quot;phone__number&quot;:&quot;(415) 555-5555&quot;}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/applications</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="loanappId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">loanappId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;appId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">loanappId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Submit Personal info(Prescreen execute) Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select eid from lendify.app_loan_app where id=&apos;${loanappId}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">partyId</stringProp>
              <stringProp name="resultVariable">partyId</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT - Financial Info" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;income__employmentStatus&quot;:&quot;0&quot;,&quot;income__employedSince&quot;:&quot;GREATER_THAN_2_YEARS&quot;,&quot;income__takeHomeAmount&quot;:&quot;5000&quot;&#xd;
,&quot;income__frequency&quot;:&quot;MONTHLY&quot;,&quot;income__nextPaycheckDate&quot;:&quot;${DateNow}&quot;,&quot;expense__homeOwnership&quot;:&quot;RENT&quot;&#xd;
,&quot;expense__housing&quot;:&quot;12&quot;,&quot;expense__car&quot;:&quot;12&quot;,&quot;expense__phone&quot;:&quot;12&quot;,&quot;expense__utilities&quot;:&quot;12&quot;,&quot;expense__dependents&quot;&#xd;
:&quot;2&quot;,&quot;financial__hasBankAccount&quot;:&quot;Y&quot;,&quot;financial__cardStatedUsage&quot;:&quot;ALL&quot;,&quot;financial__paydayStatedUsage&quot;:&quot;Y&quot;,&quot;preferredLoan__purpose&quot;:&quot;PAY_BILLS&quot;,&quot;authorization__consent&quot;:true}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/applications/${loanappId}/financial-info</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1303721089">&quot;route&quot;:&quot;choose-loan&quot;</stringProp>
                  <stringProp name="891288745">&quot;name&quot;:&quot;PRESCREEN&quot;,&quot;status&quot;:&quot;COMPLETED&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Submit Financial info(Final Approval execute) Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
                <stringProp name="BeanShellAssertion.query">if (ResponseCode.equals(&quot;422&quot;) == true) { 
    SampleResult.setResponseOK();  

    /* the same is 
    SampleResult.setSuccessful(true);
    SampleResult.setResponseCodeOK();
    SampleResult.setResponseMessageOK();
    */
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - loan offers" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/products/loan/applications/${loanappId}/loanOffers</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regex- loan term" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">loanTerm</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;default_loan_amount&quot;:(.+?),&quot;default_loan_term&quot;:(.+?)</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regex - loan amount" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">loanAmount</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;max_loan_amount&quot;:(.+?),&quot;default_loan_amount&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Get Loan offers Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT - Choose loan" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;preferredLoan__amount&quot;:${loanAmount},&quot;preferredLoan__loanTerm&quot;:${loanTerm}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/applications/${loanappId}/choose-loan</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Choose Loan Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;\n\nAPP ID = &quot; + vars.get(&quot;loanappId&quot;));
System.out.println(&quot;PARTY ID = &quot; + vars.get(&quot;partyId_1&quot;));
System.out.println(&quot;PRODUCT KEY = &quot; + vars.get(&quot;productAccountId&quot;));
System.out.println(&quot;User credentials = &quot; + &quot;test&quot; + vars.get(&quot;solicitation_key_1&quot;) + &quot;@mailinator.com/Password1!&quot;);
System.out.println(&quot;\n\n ------------------------------------------------------------------ \n\n&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Sign loan contract" enabled="true">
            <stringProp name="IfController.condition">&apos;${scope}&apos; == &apos;signLoanContract&apos;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dev Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="2645995">User</stringProp>
                <stringProp name="2606829">Time</stringProp>
                <stringProp name="80811750">Time3</stringProp>
                <stringProp name="2122702">Date</stringProp>
                <stringProp name="80811751">Time4</stringProp>
                <stringProp name="-201069322">Username</stringProp>
                <stringProp name="-125484198">uniqueIdentifier</stringProp>
                <stringProp name="1674314293">reservationNumber</stringProp>
                <stringProp name="-386871910">dateOfBirth</stringProp>
                <stringProp name="-478379258">TodaysDateBySlash</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="551912850">
                  <stringProp name="-1332388061">${__Random(7122,9009234)}</stringProp>
                  <stringProp name="217092793">${__time}</stringProp>
                  <stringProp name="1196789496">${__time(ssssss)}</stringProp>
                  <stringProp name="-1983561601">${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(new Date()))}</stringProp>
                  <stringProp name="1821498968">${__time(HH:mm:ss)}</stringProp>
                  <stringProp name="-193851953">admin@bbva.com</stringProp>
                  <stringProp name="1573382938">3694d3c472e415ffe42b0682899cac185e83edf7</stringProp>
                  <stringProp name="62061615">ABCD1</stringProp>
                  <stringProp name="-1187136416">1980-01-01</stringProp>
                  <stringProp name="814952664">${__javaScript(var date=d.getDate(); var month=d.getMonth()+1;var d=new Date();d.setDate(d.getDate());$DATE=d.getFullYear() + &quot;/&quot; + (month&lt;10?&quot;0&quot;+month:month) + &quot;/&quot; + (date&lt;10?&quot;0&quot;+date:date);,DATE)} </stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
              <boolProp name="clearEachIteration">true</boolProp>
              <boolProp name="useExpires">false</boolProp>
            </CacheManager>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
              <collectionProp name="CookieManager.cookies"/>
              <boolProp name="CookieManager.clearEachIteration">true</boolProp>
              <stringProp name="CookieManager.policy">standard</stringProp>
              <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
            </CookieManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Auth Create Account" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;username&quot;:&quot;test${solicitation_key_1}@mailinator.com&quot;,&#xd;
&quot;password&quot;:&quot;Password1!&quot;,&#xd;
&quot;confirmPassword&quot;:&quot;Password1!&quot;,&#xd;
&quot;solicitationKey&quot;:&quot;${solicitation_key_1}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/registration</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
                <stringProp name="BeanShellAssertion.query">if (ResponseCode.equals(&quot;422&quot;) == true) { 
    SampleResult.setResponseOK();  

    /* the same is 
    SampleResult.setSuccessful(true);
    SampleResult.setResponseCodeOK();
    SampleResult.setResponseMessageOK();
    */
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;idpAccountId&quot;:(.+?)}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="applicantId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">applicantId</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;idpAccountId&quot;:(.+?)}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">applicantId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="198152773">&quot;success&quot;:true,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Create account/register Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Auth login -Valid Login" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;username&quot;: &quot;test${solicitation_key_1}@mailinator.com&quot;, &#xd;
&quot;password&quot;: &quot;Password1!&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/v2/auth</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">refreshToken</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">bearer</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;refreshToken&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">bearer</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Login with newly created account Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="1826958442">{&quot;success&quot;:true,</stringProp>
                  <stringProp name="1798555">&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Applications" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;campaign__reservationNumber&quot;:&quot;${solicitation_key_1}&quot;,&quot;person__firstName&quot;:&quot;Test&quot;,&quot;person__lastName&quot;:&quot;User&quot;,&quot;person__dateOfBirth&quot;:&quot;1980-01-01&quot;,&quot;person__memberOfArmedForces&quot;:&quot;Y&quot;,&quot;person__ssn&quot;:&quot;111111111&quot;,&quot;address__address1&quot;:&quot;Easy Street&quot;,&quot;address__address2&quot;:&quot;&quot;,&quot;address__city&quot;:&quot;SF&quot;,&quot;address__state&quot;:&quot;TX&quot;,&quot;address__postalCode&quot;:&quot;94109&quot;,&quot;address__since&quot;:&quot;GREATER_THAN_2_YEARS&quot;,&quot;phone__type&quot;:&quot;MOBILE&quot;,&quot;phone__number&quot;:&quot;(415) 555-5555&quot;}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/applications</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="loanappId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">loanappId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;appId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">loanappId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Submit Personal info(Prescreen execute) Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select eid from lendify.app_loan_app where id=&apos;${loanappId}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">partyId</stringProp>
              <stringProp name="resultVariable">partyId</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT - Financial Info" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;income__employmentStatus&quot;:&quot;0&quot;,&quot;income__employedSince&quot;:&quot;GREATER_THAN_2_YEARS&quot;,&quot;income__takeHomeAmount&quot;:&quot;5000&quot;&#xd;
,&quot;income__frequency&quot;:&quot;MONTHLY&quot;,&quot;income__nextPaycheckDate&quot;:&quot;${DateNow}&quot;,&quot;expense__homeOwnership&quot;:&quot;RENT&quot;&#xd;
,&quot;expense__housing&quot;:&quot;12&quot;,&quot;expense__car&quot;:&quot;12&quot;,&quot;expense__phone&quot;:&quot;12&quot;,&quot;expense__utilities&quot;:&quot;12&quot;,&quot;expense__dependents&quot;&#xd;
:&quot;2&quot;,&quot;financial__hasBankAccount&quot;:&quot;Y&quot;,&quot;financial__cardStatedUsage&quot;:&quot;ALL&quot;,&quot;financial__paydayStatedUsage&quot;:&quot;Y&quot;,&quot;preferredLoan__purpose&quot;:&quot;PAY_BILLS&quot;,&quot;authorization__consent&quot;:true}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/applications/${loanappId}/financial-info</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1303721089">&quot;route&quot;:&quot;choose-loan&quot;</stringProp>
                  <stringProp name="891288745">&quot;name&quot;:&quot;PRESCREEN&quot;,&quot;status&quot;:&quot;COMPLETED&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Submit Financial info(Final Approval execute) Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
                <stringProp name="BeanShellAssertion.query">if (ResponseCode.equals(&quot;422&quot;) == true) { 
    SampleResult.setResponseOK();  

    /* the same is 
    SampleResult.setSuccessful(true);
    SampleResult.setResponseCodeOK();
    SampleResult.setResponseMessageOK();
    */
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - loan offers" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/products/loan/applications/${loanappId}/loanOffers</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regex- loan term" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">loanTerm</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;default_loan_amount&quot;:(.+?),&quot;default_loan_term&quot;:(.+?)</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regex - loan amount" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">loanAmount</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;max_loan_amount&quot;:(.+?),&quot;default_loan_amount&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Get Loan offers Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT - Choose loan" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;preferredLoan__amount&quot;:${loanAmount},&quot;preferredLoan__loanTerm&quot;:${loanTerm}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/applications/${loanappId}/choose-loan</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Choose Loan Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT - Sign Loan Contract" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;disbursement__signatureFirstName&quot;:&quot;Test&quot;,&quot;disbursement__signatureLastName&quot;:&quot;User&quot;,&quot;disbursement__signatureDate&quot;&#xd;
:&quot;${SignDate}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/applications/${loanappId}/sign-loan</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Sign Loan contract Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.tika.Tika;

InputStream in = new ByteArrayInputStream(data);
Tika tika = new Tika();
String content = tika.parseToString(in);
log.info(content);
vars.put(&quot;content&quot;, content);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="154018593">Consent to Electronic Disclosures</stringProp>
                  <stringProp name="-939393818">and Communications</stringProp>
                  <stringProp name="699862137">In order for us to provide disclosures and other communications related to this loan application or </stringProp>
                  <stringProp name="2120717428">obtain your consent in accordance with the provisions set forth in this Consent to Electronic </stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">content</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">5000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Products" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/products</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productAccountId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productAccountId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;productAccountId&quot;:&quot;(.+?)&quot;,&quot;name&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">productAccountId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Get Loan product Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;\n\nAPP ID = &quot; + vars.get(&quot;loanappId&quot;));
System.out.println(&quot;PARTY ID = &quot; + vars.get(&quot;partyId_1&quot;));
System.out.println(&quot;PRODUCT KEY = &quot; + vars.get(&quot;productAccountId&quot;));
System.out.println(&quot;User credentials = &quot; + &quot;test&quot; + vars.get(&quot;solicitation_key_1&quot;) + &quot;@mailinator.com/Password1!&quot;);
System.out.println(&quot;\n\n ------------------------------------------------------------------ \n\n&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - full" enabled="true">
            <stringProp name="IfController.condition">&apos;${scope}&apos; == &apos;full&apos;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dev Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="2645995">User</stringProp>
                <stringProp name="2606829">Time</stringProp>
                <stringProp name="80811750">Time3</stringProp>
                <stringProp name="2122702">Date</stringProp>
                <stringProp name="80811751">Time4</stringProp>
                <stringProp name="-201069322">Username</stringProp>
                <stringProp name="-125484198">uniqueIdentifier</stringProp>
                <stringProp name="1674314293">reservationNumber</stringProp>
                <stringProp name="-386871910">dateOfBirth</stringProp>
                <stringProp name="-478379258">TodaysDateBySlash</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="551912850">
                  <stringProp name="-1332388061">${__Random(7122,9009234)}</stringProp>
                  <stringProp name="217092793">${__time}</stringProp>
                  <stringProp name="1196789496">${__time(ssssss)}</stringProp>
                  <stringProp name="-1983561601">${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(new Date()))}</stringProp>
                  <stringProp name="1821498968">${__time(HH:mm:ss)}</stringProp>
                  <stringProp name="-193851953">admin@bbva.com</stringProp>
                  <stringProp name="1573382938">3694d3c472e415ffe42b0682899cac185e83edf7</stringProp>
                  <stringProp name="62061615">ABCD1</stringProp>
                  <stringProp name="-1187136416">1980-01-01</stringProp>
                  <stringProp name="814952664">${__javaScript(var date=d.getDate(); var month=d.getMonth()+1;var d=new Date();d.setDate(d.getDate());$DATE=d.getFullYear() + &quot;/&quot; + (month&lt;10?&quot;0&quot;+month:month) + &quot;/&quot; + (date&lt;10?&quot;0&quot;+date:date);,DATE)} </stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
              <boolProp name="clearEachIteration">true</boolProp>
              <boolProp name="useExpires">false</boolProp>
            </CacheManager>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
              <collectionProp name="CookieManager.cookies"/>
              <boolProp name="CookieManager.clearEachIteration">true</boolProp>
              <stringProp name="CookieManager.policy">standard</stringProp>
              <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
            </CookieManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Auth Create Account" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;username&quot;:&quot;test${solicitation_key_1}@mailinator.com&quot;,&#xd;
&quot;password&quot;:&quot;Password1!&quot;,&#xd;
&quot;confirmPassword&quot;:&quot;Password1!&quot;,&#xd;
&quot;solicitationKey&quot;:&quot;${solicitation_key_1}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/registration</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
                <stringProp name="BeanShellAssertion.query">if (ResponseCode.equals(&quot;422&quot;) == true) { 
    SampleResult.setResponseOK();  

    /* the same is 
    SampleResult.setSuccessful(true);
    SampleResult.setResponseCodeOK();
    SampleResult.setResponseMessageOK();
    */
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;idpAccountId&quot;:(.+?)}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="applicantId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">applicantId</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;idpAccountId&quot;:(.+?)}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">applicantId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="198152773">&quot;success&quot;:true,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Create account/register Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Auth login -Valid Login" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;username&quot;: &quot;test${solicitation_key_1}@mailinator.com&quot;, &#xd;
&quot;password&quot;: &quot;Password1!&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/v2/auth</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">refreshToken</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">bearer</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;refreshToken&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">bearer</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Login with newly created account Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="1826958442">{&quot;success&quot;:true,</stringProp>
                  <stringProp name="1798555">&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Applications" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;campaign__reservationNumber&quot;:&quot;${solicitation_key_1}&quot;,&quot;person__firstName&quot;:&quot;Test&quot;,&quot;person__lastName&quot;:&quot;User&quot;,&quot;person__dateOfBirth&quot;:&quot;1980-01-01&quot;,&quot;person__memberOfArmedForces&quot;:&quot;Y&quot;,&quot;person__ssn&quot;:&quot;111111111&quot;,&quot;address__address1&quot;:&quot;Easy Street&quot;,&quot;address__address2&quot;:&quot;&quot;,&quot;address__city&quot;:&quot;SF&quot;,&quot;address__state&quot;:&quot;TX&quot;,&quot;address__postalCode&quot;:&quot;94109&quot;,&quot;address__since&quot;:&quot;GREATER_THAN_2_YEARS&quot;,&quot;phone__type&quot;:&quot;MOBILE&quot;,&quot;phone__number&quot;:&quot;(415) 555-5555&quot;}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/applications</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="loanappId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">loanappId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;appId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">loanappId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Submit Personal info(Prescreen execute) Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
              <stringProp name="dataSource">lendifydb</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select eid from lendify.app_loan_app where id=&apos;${loanappId}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">partyId</stringProp>
              <stringProp name="resultVariable">partyId</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT - Financial Info" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;income__employmentStatus&quot;:&quot;0&quot;,&quot;income__employedSince&quot;:&quot;GREATER_THAN_2_YEARS&quot;,&quot;income__takeHomeAmount&quot;:&quot;5000&quot;&#xd;
,&quot;income__frequency&quot;:&quot;MONTHLY&quot;,&quot;income__nextPaycheckDate&quot;:&quot;${DateNow}&quot;,&quot;expense__homeOwnership&quot;:&quot;RENT&quot;&#xd;
,&quot;expense__housing&quot;:&quot;12&quot;,&quot;expense__car&quot;:&quot;12&quot;,&quot;expense__phone&quot;:&quot;12&quot;,&quot;expense__utilities&quot;:&quot;12&quot;,&quot;expense__dependents&quot;&#xd;
:&quot;2&quot;,&quot;financial__hasBankAccount&quot;:&quot;Y&quot;,&quot;financial__cardStatedUsage&quot;:&quot;ALL&quot;,&quot;financial__paydayStatedUsage&quot;:&quot;Y&quot;,&quot;preferredLoan__purpose&quot;:&quot;PAY_BILLS&quot;,&quot;authorization__consent&quot;:true}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/applications/${loanappId}/financial-info</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1303721089">&quot;route&quot;:&quot;choose-loan&quot;</stringProp>
                  <stringProp name="891288745">&quot;name&quot;:&quot;PRESCREEN&quot;,&quot;status&quot;:&quot;COMPLETED&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Submit Financial info(Final Approval execute) Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
                <stringProp name="BeanShellAssertion.query">if (ResponseCode.equals(&quot;422&quot;) == true) { 
    SampleResult.setResponseOK();  

    /* the same is 
    SampleResult.setSuccessful(true);
    SampleResult.setResponseCodeOK();
    SampleResult.setResponseMessageOK();
    */
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - loan offers" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/products/loan/applications/${loanappId}/loanOffers</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regex- loan term" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">loanTerm</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;default_loan_amount&quot;:(.+?),&quot;default_loan_term&quot;:(.+?)</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regex - loan amount" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">loanAmount</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;max_loan_amount&quot;:(.+?),&quot;default_loan_amount&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Get Loan offers Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT - Choose loan" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;preferredLoan__amount&quot;:${loanAmount},&quot;preferredLoan__loanTerm&quot;:${loanTerm}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/applications/${loanappId}/choose-loan</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Choose Loan Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT - Sign Loan Contract" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;disbursement__signatureFirstName&quot;:&quot;Test&quot;,&quot;disbursement__signatureLastName&quot;:&quot;User&quot;,&quot;disbursement__signatureDate&quot;&#xd;
:&quot;${SignDate}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/campaigns/${campaignName_1}/applications/${loanappId}/sign-loan</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Sign Loan contract Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.tika.Tika;

InputStream in = new ByteArrayInputStream(data);
Tika tika = new Tika();
String content = tika.parseToString(in);
log.info(content);
vars.put(&quot;content&quot;, content);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="154018593">Consent to Electronic Disclosures</stringProp>
                  <stringProp name="-939393818">and Communications</stringProp>
                  <stringProp name="699862137">In order for us to provide disclosures and other communications related to this loan application or </stringProp>
                  <stringProp name="2120717428">obtain your consent in accordance with the provisions set forth in this Consent to Electronic </stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">content</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">5000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Products" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/products</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productAccountId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">productAccountId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;productAccountId&quot;:&quot;(.+?)&quot;,&quot;name&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">productAccountId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Get Loan product Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Get Payment Means" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/paymentMeans/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="PaymentMeanAlias" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">PaymentMeanAlias</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;alias&quot;:&quot;(.+?)&quot;,&quot;consentAuthorizationCode&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">PaymentMeanAlias</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="PaymentMeanType" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">PaymentMeanType</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;preferredAccount&quot;:(.+?),&quot;type&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="PaymentMeanId" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">PaymentMeanId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),&quot;accountNumberDisplay&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">PaymentMeanId</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Get default payment mean Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Loan Accounts" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/products/loan/accounts/${productAccountId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="currentPaymentDue" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">currentPaymentDue</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;currentPaymentDue&quot;:(.+?),&quot;totalPaid&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">currentPaymentDue</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="totalPaidInstallments" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">totalPaidInstallments</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;totalPaidInstallments&quot; :(.+?),&quot;balance&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">totalPaidInstallments</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="balance" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">balance</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;balance&quot;:(.+?),&quot;asOf&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">balance</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="repaymentProgress" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">repaymentProgress</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;repaymentProgress&quot;:(.+?)},&quot;loanProduct&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">repaymentProgress</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="disbursementAmount" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">disbursementAmount</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;DISBURSEMENT&quot;,&quot;amount&quot;:(.+?),&quot;balance&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">balance</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Get Loan summary Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="PaymentMeanAlias" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">PaymentMeanAlias</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;alias&quot;:&quot;(.+?)&quot;,&quot;disabled&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">PaymentMeanAlias</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Funding" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;disbursementAmount&quot;: &quot;${disbursementAmount}&quot;,&#xd;
	&quot;paymentMethod&quot;: &quot;${PaymentMeanType}&quot;, &#xd;
	&quot;paymentMeanName&quot;: &quot;${PaymentMeanAlias}&quot;&#xd;
	&#xd;
	}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/products/loan/accounts/${productAccountId}/fund</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="fundingTransactionKey" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">fundingTransactionKey</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;fundingTransactionKey&quot;:&quot;(.+?)&quot;,&quot;canFundProduct&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">fundingTransactionKey</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Funding authorization Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT - Funding" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;disbursementAmount&quot;: &quot;${disbursementAmount}&quot;,&#xd;
	&quot;paymentMethod&quot;: &quot;${PaymentMeanType}&quot;, &#xd;
	&quot;paymentMeanName&quot;: &quot;${PaymentMeanAlias}&quot;&#xd;
	&#xd;
	}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${OnlineUrl}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/products/loan/accounts/${productAccountId}/fund/${fundingTransactionKey}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                  <elementProp name="https" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                  </elementProp>
                  <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Funding Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;\n\nAPP ID = &quot; + vars.get(&quot;loanappId&quot;));
System.out.println(&quot;PARTY ID = &quot; + vars.get(&quot;partyId_1&quot;));
System.out.println(&quot;PRODUCT KEY = &quot; + vars.get(&quot;productAccountId&quot;));
System.out.println(&quot;User credentials = &quot; + &quot;test&quot; + vars.get(&quot;solicitation_key_1&quot;) + &quot;@mailinator.com/Password1!&quot;);
System.out.println(&quot;\n\n ------------------------------------------------------------------ \n\n&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-104562505">&quot;fundingStatus&quot;:&quot;ERROR&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Netspend - Basic Flow" enabled="false"/>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dev Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="2645995">User</stringProp>
              <stringProp name="2606829">Time</stringProp>
              <stringProp name="80811750">Time3</stringProp>
              <stringProp name="2122702">Date</stringProp>
              <stringProp name="80811751">Time4</stringProp>
              <stringProp name="-201069322">Username</stringProp>
              <stringProp name="-125484198">uniqueIdentifier</stringProp>
              <stringProp name="1674314293">reservationNumber</stringProp>
              <stringProp name="-386871910">dateOfBirth</stringProp>
              <stringProp name="-478379258">TodaysDateBySlash</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="551912850">
                <stringProp name="-1332388061">${__Random(7122,9009234)}</stringProp>
                <stringProp name="217092793">${__time}</stringProp>
                <stringProp name="1196789496">${__time(ssssss)}</stringProp>
                <stringProp name="-1983561601">${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(new Date()))}</stringProp>
                <stringProp name="1821498968">${__time(HH:mm:ss)}</stringProp>
                <stringProp name="-193851953">admin@bbva.com</stringProp>
                <stringProp name="1573382938">3694d3c472e415ffe42b0682899cac185e83edf7</stringProp>
                <stringProp name="62061615">ABCD1</stringProp>
                <stringProp name="-1187136416">1980-01-01</stringProp>
                <stringProp name="814952664">${__javaScript(var date=d.getDate(); var month=d.getMonth()+1;var d=new Date();d.setDate(d.getDate());$DATE=d.getFullYear() + &quot;/&quot; + (month&lt;10?&quot;0&quot;+month:month) + &quot;/&quot; + (date&lt;10?&quot;0&quot;+date:date);,DATE)} </stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">true</boolProp>
            <stringProp name="CookieManager.policy">standard</stringProp>
            <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
          </CookieManager>
          <hashTree/>
          <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
            <boolProp name="clearEachIteration">true</boolProp>
            <boolProp name="useExpires">false</boolProp>
          </CacheManager>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Auth login -Retail Valid Login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;username&quot;: &quot;root@insikt.com&quot;, &#xd;
&quot;password&quot;: &quot;password&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">refreshToken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="1826958442">{&quot;success&quot;:true,</stringProp>
                <stringProp name="1798555">&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">bearer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">bearer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Get Campaign" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/marketing/campaigns/netspend</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Insikt-Tenant-Id</stringProp>
                  <stringProp name="Header.value">102</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="CampaignId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">CampaignId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),&quot;tenantId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">CampaignId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="CampaignName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">CampaignName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;campaignName&quot;:&quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">CampaignName</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Campaign Solicitations" enabled="true">
            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
              <collectionProp name="HTTPFileArgs.files">
                <elementProp name="/Users/schigurupati/Desktop/insikt-qa-automation/Jmeter-Tests/NetSpend/prospects.csv" elementType="HTTPFileArg">
                  <stringProp name="File.path">/Users/schigurupati/Desktop/insikt-qa-automation/Jmeter-Tests/NetSpend/prospects.csv</stringProp>
                  <stringProp name="File.paramname">uploadFile</stringProp>
                  <stringProp name="File.mimetype"></stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/marketing/campaigns/netspend/solicitations</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/csv</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Insikt-Tenant-Id</stringProp>
                  <stringProp name="Header.value">105</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Campaign Solicitations" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/marketing/campaigns/netspend</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Insikt-Tenant-Id</stringProp>
                  <stringProp name="Header.value">102</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Auth login -Retail Valid Login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;username&quot;: &quot;root@insikt.com&quot;, &#xd;
&quot;password&quot;: &quot;password&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">refreshToken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="1826958442">{&quot;success&quot;:true,</stringProp>
                <stringProp name="1798555">&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">bearer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">bearer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="UPDATE lendify.marketing_solicitation dob" enabled="true">
            <stringProp name="dataSource">dev</stringProp>
            <stringProp name="query">update lendify.marketing_prospect
set date_of_birth =&apos;1980-01-01&apos;</stringProp>
            <stringProp name="queryArguments">responded2</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultVariable">responded2</stringProp>
            <stringProp name="variableNames">responded2</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">solicitation_key</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">solicitation_key</stringProp>
              <stringProp name="RegexExtractor.match_number">2</stringProp>
              <stringProp name="Scope.variable">fnDisplayFeasibilityJobStatus</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="GetCmpaignId - keys" enabled="true">
            <stringProp name="dataSource">dev</stringProp>
            <stringProp name="query">select solicitation_key from lendify.marketing_solicitation where campaign_id =100  and idp_account_id is null and responded = &apos;f&apos;order by id  desc limit 200;
</stringProp>
            <stringProp name="queryArguments">solicitation_key</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultVariable">solicitation_key</stringProp>
            <stringProp name="variableNames">solicitation_key</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="solicitation_key" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">solicitation_key</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">solicitation_key</stringProp>
              <stringProp name="RegexExtractor.match_number">2</stringProp>
              <stringProp name="Scope.variable">fnDisplayFeasibilityJobStatus</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Set Full name" enabled="true">
            <stringProp name="dataSource">dev</stringProp>
            <stringProp name="query">UPDATE lendify.marketing_prospect 
SET full_name = &apos;John Doe&apos;;</stringProp>
            <stringProp name="queryArguments">full_name</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultVariable">full_name</stringProp>
            <stringProp name="variableNames">full_name</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="solicitation_key" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">solicitation_key</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">solicitation_key</stringProp>
              <stringProp name="RegexExtractor.match_number">11</stringProp>
              <stringProp name="Scope.variable">fnDisplayFeasibilityJobStatus</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="GetCmpaignId" enabled="true">
            <stringProp name="dataSource">dev</stringProp>
            <stringProp name="query">select solicitation_key from lendify.marketing_solicitation where campaign_id =100  and idp_account_id is null and responded = &apos;f&apos;order by id  desc limit 1 ;
</stringProp>
            <stringProp name="queryArguments">solicitation_key</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultVariable">solicitation_key</stringProp>
            <stringProp name="variableNames">solicitation_key</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="solicitation_key" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">solicitation_key</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">solicitation_key</stringProp>
              <stringProp name="RegexExtractor.match_number">2</stringProp>
              <stringProp name="Scope.variable">fnDisplayFeasibilityJobStatus</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="GetDateofBirth" enabled="true">
            <stringProp name="dataSource">dev</stringProp>
            <stringProp name="query">select date_of_birth from lendify.marketing_prospect  order by id  desc limit 1;</stringProp>
            <stringProp name="queryArguments">date_of_birth</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultVariable">date_of_birth</stringProp>
            <stringProp name="variableNames">date_of_birth</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="date_of_birth" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">date_of_birth</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">date_of_birth</stringProp>
              <stringProp name="RegexExtractor.match_number">2</stringProp>
              <stringProp name="Scope.variable">fnDisplayFeasibilityJobStatus</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Auth Create Account" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;username&quot;:&quot;siri${solicitation_key}@mailinator.com&quot;,&#xd;
&quot;password&quot;:&quot;Password1!&quot;,&#xd;
&quot;confirmPassword&quot;:&quot;Password1!&quot;,&#xd;
&quot;solicitationKey&quot;:&quot;${solicitation_key}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/campaigns/netspend/registration</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
              <stringProp name="BeanShellAssertion.query">if (ResponseCode.equals(&quot;422&quot;) == true) { 
    SampleResult.setResponseOK();  

    /* the same is 
    SampleResult.setSuccessful(true);
    SampleResult.setResponseCodeOK();
    SampleResult.setResponseMessageOK();
    */
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="198152773">&quot;success&quot;:true,</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="applicantId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">applicantId</stringProp>
              <stringProp name="RegexExtractor.regex">{&quot;idpAccountId&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">applicantId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
              <stringProp name="RegexExtractor.regex">{&quot;idpAccountId&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Auth login -Valid Login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;username&quot;: &quot;siri${solicitation_key}@mailinator.com&quot;, &#xd;
&quot;password&quot;: &quot;Password1!&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v2/auth</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">refreshToken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="1826958442">{&quot;success&quot;:true,</stringProp>
                <stringProp name="1798555">&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">bearer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;refreshToken&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">bearer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Applications" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;campaign__reservationNumber&quot;:&quot;${solicitation_key}&quot;,&quot;person__firstName&quot;:&quot;Stephen&quot;,&quot;person__lastName&quot;:&quot;Curry&quot;,&quot;person__dateOfBirth&quot;:&quot;${date_of_birth}&quot;,&quot;person__memberOfArmedForces&quot;:&quot;N&quot;,&quot;person__ssn&quot;:&quot;111-11-1111&quot;,&quot;address__address1&quot;:&quot;Easy Street&quot;,&quot;address__address2&quot;:&quot;&quot;,&quot;address__city&quot;:&quot;SF&quot;,&quot;address__state&quot;:&quot;TX&quot;,&quot;address__postalCode&quot;:&quot;73301&quot;,&quot;address__since&quot;:&quot;1_TO_2_YEARS&quot;,&quot;phone__type&quot;:&quot;MOBILE&quot;,&quot;phone__number&quot;:&quot;(818) 111-1111&quot;}&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/campaigns/netspend/applications</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
                <elementProp name="https" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                </elementProp>
                <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="loanappId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">loanappId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;appId&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">loanappId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Verify eid in app_loan_app" enabled="true">
            <stringProp name="dataSource">dev</stringProp>
            <stringProp name="query">select eid from app_loan_app where id = &apos;${loanappId}&apos;;</stringProp>
            <stringProp name="queryArguments">eid</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultVariable">eid</stringProp>
            <stringProp name="variableNames">eid</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="party_id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">party_id</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">party_id</stringProp>
              <stringProp name="RegexExtractor.match_number">2</stringProp>
              <stringProp name="Scope.variable">fnDisplayFeasibilityJobStatus</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Applications" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/campaigns/netspend/applications</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
                <elementProp name="https" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                </elementProp>
                <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - loginUser" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;root@insikt.com&quot;,&quot;password&quot;:&quot;password&quot;}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">refreshToken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">bearer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">bearer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET -Get Parties for EID -V2" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">t/${tenantId}/api/v2/parties/${party_id}/products/loanapp/applications</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="loanappId" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">loanappId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;,&quot;tenantId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">loanappId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-656080516">&quot;prescreen__decision__status&quot;:&quot;APPROVED&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET -Get Parties for EID -V2" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">t/${tenantId}/api/v2/parties/${party_id}/products/loanapp/applications</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="loanappId" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">loanappId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;,&quot;tenantId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">loanappId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-656080516">&quot;prescreen__decision__status&quot;:&quot;APPROVED&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET -Get Parties for EID -V1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">t/${tenantId}/api/v1/party/parties/${party_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="777426059">&quot;tenantId&quot;:128,&quot;partyType&quot;:null,&quot;persons&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET -Get loans for EID -V1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">t/${tenantId}/api/v1/loans/eid/${party_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Auth login -Valid Login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;username&quot;: &quot;siri${solicitation_key}@mailinator.com&quot;, &#xd;
&quot;password&quot;: &quot;Password1!&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v2/auth</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">refreshToken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="1826958442">{&quot;success&quot;:true,</stringProp>
                <stringProp name="1798555">&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">bearer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;refreshToken&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">bearer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Products" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/products</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:50.0) Gecko/20100101 Firefox/50.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productAccountId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">productAccountId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;productAccountId&quot;:&quot;(.+?)&quot;,&quot;name&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">productAccountId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">700</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Get Payment Means" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/paymentMeans</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Financial Info" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/campaigns/netspend/applications/${loanappId}/financial-info</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
                <elementProp name="https" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                </elementProp>
                <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="payment_mean_id" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">payment_mean_id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),&quot;accountNumberDisplay&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">payment_mean_id</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="accountNumberDisplay" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">accountNumberDisplay</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;accountNumberDisplay&quot;:&quot;(.+?)&quot;,&quot;accountType&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">accountNumberDisplay</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="accountType" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">accountType</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;accountType&quot;:&quot;(.+?)&quot;,&quot;disabled&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">accountType</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="holderName" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">holderName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;holderName&quot;:&quot;(.+?)&quot;,&quot;issuer&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">holderName</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="issuer" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">issuer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;issuer&quot;:&quot;(.+?)&quot;,&quot;issuerIdentifier&quot;</stringProp>
              <stringProp name="RegexExtractor.template"> $1$</stringProp>
              <stringProp name="RegexExtractor.default">issuer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="issuerIdentifier" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">issuerIdentifier</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;issuerIdentifier&quot;:&quot;(.+?)&quot;,&quot;preferredAccount&quot;</stringProp>
              <stringProp name="RegexExtractor.template"> $1$</stringProp>
              <stringProp name="RegexExtractor.default">issuerIdentifier</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="type" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">type</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;type&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template"> $1$</stringProp>
              <stringProp name="RegexExtractor.default">type</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Applications" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/campaigns/netspend/applications</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="payment_mean_id" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">payment_mean_id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),&quot;accountNumberDisplay&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">payment_mean_id</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="accountNumberDisplay" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">accountNumberDisplay</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;accountNumberDisplay&quot;:&quot;(.+?)&quot;,&quot;accountType&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">accountNumberDisplay</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="accountType" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">accountType</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;accountType&quot;:&quot;(.+?)&quot;,&quot;disabled&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">accountType</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="holderName" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">holderName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;holderName&quot;:&quot;(.+?)&quot;,&quot;issuer&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">holderName</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="issuer" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">issuer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;issuer&quot;:&quot;(.+?)&quot;,&quot;issuerIdentifier&quot;</stringProp>
              <stringProp name="RegexExtractor.template"> $1$</stringProp>
              <stringProp name="RegexExtractor.default">issuer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="issuerIdentifier" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">issuerIdentifier</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;issuerIdentifier&quot;:&quot;(.+?)&quot;,&quot;preferredAccount&quot;</stringProp>
              <stringProp name="RegexExtractor.template"> $1$</stringProp>
              <stringProp name="RegexExtractor.default">issuerIdentifier</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="type" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">type</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;type&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template"> $1$</stringProp>
              <stringProp name="RegexExtractor.default">type</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT - Financial Info" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;income__employmentStatus&quot;:&quot;0&quot;,&quot;income__employedSince&quot;:&quot;1_TO_2_YEARS&quot;,&quot;income__takeHomeAmount&quot;:&quot;3000&quot;&#xd;
,&quot;income__frequency&quot;:&quot;BI_WEEKLY&quot;,&quot;income__nextPaycheckDate&quot;:&quot;${Future Date}&quot;,&quot;expense__homeOwnership&quot;:&quot;RENT&quot;&#xd;
,&quot;expense__housing&quot;:&quot;200&quot;,&quot;expense__car&quot;:&quot;200&quot;,&quot;expense__phone&quot;:&quot;100&quot;,&quot;expense__utilities&quot;:&quot;100&quot;,&quot;expense__dependents&quot;&#xd;
:&quot;2&quot;,&quot;financial__hasBankAccount&quot;:&quot;N&quot;,&quot;financial__cardStatedUsage&quot;:&quot;ALL&quot;,&quot;financial__paydayStatedUsage&quot;:&quot;N&quot;,&quot;preferredLoan__purpose&quot;:&quot;PAY_BILLS&quot;,&quot;authorization__consent&quot;:true}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/campaigns/netspend/applications/${loanappId}/financial-info</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
                <elementProp name="https" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                </elementProp>
                <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1303721089">&quot;route&quot;:&quot;choose-loan&quot;</stringProp>
                <stringProp name="891288745">&quot;name&quot;:&quot;PRESCREEN&quot;,&quot;status&quot;:&quot;COMPLETED&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
              <stringProp name="BeanShellAssertion.query">if (ResponseCode.equals(&quot;422&quot;) == true) { 
    SampleResult.setResponseOK();  

    /* the same is 
    SampleResult.setSuccessful(true);
    SampleResult.setResponseCodeOK();
    SampleResult.setResponseMessageOK();
    */
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Products" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/products</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productAccountId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">productAccountId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;productAccountId&quot;:&quot;(.+?)&quot;,&quot;name&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">productAccountId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">700</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - loan offers" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/products/loan/applications/${loanappId}/loanOffers</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT - Choose loan" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;preferredLoan__amount&quot;:2499.99,&quot;preferredLoan__loanTerm&quot;:21}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/campaigns/netspend/applications/${loanappId}/choose-loan</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
                <elementProp name="https" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                </elementProp>
                <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT - Sign Loan Contract" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;disbursement__signatureFirstName&quot;:&quot;stephen&quot;,&quot;disbursement__signatureLastName&quot;:&quot;curry&quot;,&quot;disbursement__signatureDate&quot;&#xd;
:&quot;05/24/2017&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/campaigns/netspend/applications/${loanappId}/sign-loan</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
                <elementProp name="https" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                </elementProp>
                <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.tika.Tika;

InputStream in = new ByteArrayInputStream(data);
Tika tika = new Tika();
String content = tika.parseToString(in);
log.info(content);
vars.put(&quot;content&quot;, content);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="154018593">Consent to Electronic Disclosures</stringProp>
                <stringProp name="-939393818">and Communications</stringProp>
                <stringProp name="699862137">In order for us to provide disclosures and other communications related to this loan application or </stringProp>
                <stringProp name="2120717428">obtain your consent in accordance with the provisions set forth in this Consent to Electronic </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">content</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Products" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/products</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productAccountId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">productAccountId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;productAccountId&quot;:&quot;(.+?)&quot;,&quot;name&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">productAccountId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="party_id" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">party_id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;productAccountId&quot;:&quot;105-0000(.+?)-101&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">party_id</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="Scope.variable">productAccountId</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">700</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Loan Accounts" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/products/loan/accounts/${productAccountId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
                <elementProp name="https" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                </elementProp>
                <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="currentPaymentDue" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">currentPaymentDue</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;currentPaymentDue&quot;:(.+?),&quot;totalPaid&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">currentPaymentDue</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="totalPaidInstallments" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">totalPaidInstallments</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;totalPaidInstallments&quot; :(.+?),&quot;balance&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">totalPaidInstallments</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="balance" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">balance</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;balance&quot;:(.+?),&quot;asOf&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">balance</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="repaymentProgress" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">repaymentProgress</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;repaymentProgress&quot;:(.+?)},&quot;loanProduct&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">repaymentProgress</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="disbursementAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">disbursementAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;DISBURSEMENT&quot;,&quot;amount&quot;:(.+?),&quot;balance&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">balance</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="PaymentMeanAlias" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">PaymentMeanAlias</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;alias&quot;:&quot;(.+?)&quot;,&quot;disabled&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">PaymentMeanAlias</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">700</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Loan Accounts" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/products/loan/accounts/${productAccountId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
                <elementProp name="https" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                </elementProp>
                <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="currentPaymentDue" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">currentPaymentDue</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;currentPaymentDue&quot;:(.+?),&quot;totalPaid&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">currentPaymentDue</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="totalPaidInstallments" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">totalPaidInstallments</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;totalPaidInstallments&quot; :(.+?),&quot;balance&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">totalPaidInstallments</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="balance" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">balance</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;balance&quot;:(.+?),&quot;asOf&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">balance</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="repaymentProgress" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">repaymentProgress</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;repaymentProgress&quot;:(.+?)},&quot;loanProduct&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">repaymentProgress</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="disbursementAmount" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">disbursementAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;DISBURSEMENT&quot;,&quot;amount&quot;:(.+?),&quot;balance&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">balance</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="PaymentMeanAlias" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">PaymentMeanAlias</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;alias&quot;:&quot;(.+?)&quot;,&quot;disabled&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">PaymentMeanAlias</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Get Payment Means" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/paymentMeans/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
                <elementProp name="https" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                </elementProp>
                <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="PaymentMeanAlias" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">PaymentMeanAlias</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;alias&quot;:&quot;(.+?)&quot;,&quot;consentAuthorizationCode&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">PaymentMeanAlias</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="PaymentMeanId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">PaymentMeanId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),&quot;accountNumberDisplay&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">PaymentMeanId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Add Payment Means" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;accountNumber&quot;:&quot;124200012&quot;,&#xd;
&quot;confirmAccountNumber&quot;:&quot;124200012&quot;,&#xd;
&quot;accountType&quot;:&quot;SAVING&quot;,&#xd;
&quot;holderName&quot;:&quot;ZIONS FIRST NATIONAL BANK&quot;,&#xd;
&quot;issuer&quot;:&quot;ZIONS FIRST NATIONAL BANK&quot;,&#xd;
&quot;issuerIdentifier&quot;:&quot;124101128&quot;,&#xd;
&quot;type&quot;:&quot;SAVING&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/paymentMeans</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="recurringPaymentMeanAlias" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">recurringPaymentMeanAlias</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;alias&quot;:&quot;(.+?)&quot;,&quot;consentAuthorizationCode&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">recurringPaymentMeanAlias</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Get Payment Means" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/paymentMeans/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Funding" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;disbursementAmount&quot;: &quot;${disbursementAmount}&quot;,&#xd;
	&quot;paymentMethod&quot;: &quot;ACH&quot;, &#xd;
	&quot;paymentMeanName&quot;: &quot;${PaymentMeanAlias}&quot;&#xd;
	&#xd;
	}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/products/loan/accounts/${productAccountId}/fund</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
                <elementProp name="https" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                </elementProp>
                <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="fundingTransactionKey" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">fundingTransactionKey</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;fundingTransactionKey&quot;:&quot;(.+?)&quot;,&quot;canFundProduct&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">fundingTransactionKey</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT - Funding" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;disbursementAmount&quot;: &quot;${disbursementAmount}&quot;,&#xd;
	&quot;paymentMethod&quot;: &quot;ACH&quot;, &#xd;
	&quot;paymentMeanName&quot;: &quot;${PaymentMeanAlias}&quot;&#xd;
	&#xd;
	}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/products/loan/accounts/${productAccountId}/fund/${fundingTransactionKey}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
                <elementProp name="https" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                </elementProp>
                <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-104562505">&quot;fundingStatus&quot;:&quot;ERROR&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Autopay - Min Payment amount less than the required payment" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;recurringPaymentMeanAlias&quot;: &quot;${recurringPaymentMeanAlias}&quot;,&#xd;
	&quot;recurringPaymentAmount&quot;: &quot;${currentPaymentDue}&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/products/loan/accounts/${productAccountId}/autopay</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
              <stringProp name="BeanShellAssertion.query">if (ResponseCode.equals(&quot;422&quot;) == true) { 
    SampleResult.setResponseOK();  

    /* the same is 
    SampleResult.setSuccessful(true);
    SampleResult.setResponseCodeOK();
    SampleResult.setResponseMessageOK();
    */
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Add Payment Means" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;accountNumber&quot;:&quot;073000228&quot;,&#xd;
&quot;confirmAccountNumber&quot;:&quot;073000228&quot;,&#xd;
&quot;accountType&quot;:&quot;CHECKING&quot;,&#xd;
&quot;holderName&quot;:&quot;073000228&quot;,&#xd;
&quot;issuer&quot;:&quot;WELLS FARGO  BK NA IOWA&quot;,&#xd;
&quot;issuerIdentifier&quot;:&quot;073000228&quot;,&#xd;
&quot;type&quot;:&quot;CHECKING&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/paymentMeans</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="recurringPaymentMeanAlias" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">recurringPaymentMeanAlias</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;alias&quot;:&quot;(.+?)&quot;,&quot;consentAuthorizationCode&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">recurringPaymentMeanAlias</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Products" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/products</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productAccountId" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">productAccountId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;productAccountId&quot;:&quot;(.+?)&quot;,&quot;name&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">productAccountId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Financial Info" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/campaigns/netspend/applications/${loanappId}/financial-info</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
                <elementProp name="https" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                </elementProp>
                <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="payment_mean_id" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">payment_mean_id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),&quot;accountNumberDisplay&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">payment_mean_id</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="accountNumberDisplay" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">accountNumberDisplay</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;accountNumberDisplay&quot;:&quot;(.+?)&quot;,&quot;accountType&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">accountNumberDisplay</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="accountType" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">accountType</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;accountType&quot;:&quot;(.+?)&quot;,&quot;disabled&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">accountType</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="holderName" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">holderName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;holderName&quot;:&quot;(.+?)&quot;,&quot;issuer&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">holderName</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="issuer" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">issuer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;issuer&quot;:&quot;(.+?)&quot;,&quot;issuerIdentifier&quot;</stringProp>
              <stringProp name="RegexExtractor.template"> $1$</stringProp>
              <stringProp name="RegexExtractor.default">issuer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="issuerIdentifier" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">issuerIdentifier</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;issuerIdentifier&quot;:&quot;(.+?)&quot;,&quot;preferredAccount&quot;</stringProp>
              <stringProp name="RegexExtractor.template"> $1$</stringProp>
              <stringProp name="RegexExtractor.default">issuerIdentifier</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="type" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">type</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;type&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template"> $1$</stringProp>
              <stringProp name="RegexExtractor.default">type</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Applications" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/campaigns/netspend/applications</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="payment_mean_id" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">payment_mean_id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),&quot;accountNumberDisplay&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">payment_mean_id</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="accountNumberDisplay" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">accountNumberDisplay</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;accountNumberDisplay&quot;:&quot;(.+?)&quot;,&quot;accountType&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">accountNumberDisplay</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="accountType" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">accountType</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;accountType&quot;:&quot;(.+?)&quot;,&quot;disabled&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">accountType</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="holderName" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">holderName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;holderName&quot;:&quot;(.+?)&quot;,&quot;issuer&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">holderName</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="issuer" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">issuer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;issuer&quot;:&quot;(.+?)&quot;,&quot;issuerIdentifier&quot;</stringProp>
              <stringProp name="RegexExtractor.template"> $1$</stringProp>
              <stringProp name="RegexExtractor.default">issuer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="issuerIdentifier" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">issuerIdentifier</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;issuerIdentifier&quot;:&quot;(.+?)&quot;,&quot;preferredAccount&quot;</stringProp>
              <stringProp name="RegexExtractor.template"> $1$</stringProp>
              <stringProp name="RegexExtractor.default">issuerIdentifier</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="type" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">type</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;type&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template"> $1$</stringProp>
              <stringProp name="RegexExtractor.default">type</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Tenant" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/products/loan/accounts/${productAccountId}/tenant</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-757363196">&quot;type&quot;:&quot;DISBURSEMENT&quot;,&quot;amount&quot;:2499.99,&quot;balance&quot;:2499.99,&quot;paymentMethod&quot;:&quot;ACH&quot;,&quot;isRecurring&quot;:false</stringProp>
                <stringProp name="-1464615659">,&quot;type&quot;:&quot;ORIGINATION_FEE&quot;,&quot;amount&quot;:100,&quot;balance&quot;:2599.99,&quot;paymentMethod&quot;:&quot;ACH&quot;,&quot;isRecurring&quot;:false</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1680710396">&quot;name&quot;:&quot;netspend&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Products" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/products</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productAccountId" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">productAccountId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;productAccountId&quot;:&quot;(.+?)&quot;,&quot;name&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">productAccountId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Me  Get Profile" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/me</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Insikt-Tenant-Id</stringProp>
                  <stringProp name="Header.value">102</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1017138173">&quot;phoneNumber&quot;:&quot;(818) 111-1111&quot;</stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1745119458">&quot;firstName&quot;:&quot;Stephen&quot;,&quot;lastName&quot;:&quot;Curry&quot;,&quot;last4Ssn&quot;:&quot;1111&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1826958442">{&quot;success&quot;:true,</stringProp>
                <stringProp name="-1781347812">,&quot;email&quot;:&quot;sirip7yhqzzy2w@mailinator.com&quot;,&quot;phoneNumber&quot;:&quot;(818) 111-1111&quot;,&quot;street1&quot;c&quot;Easy Street&quot;,&quot;street2&quot;:&quot;&quot;,&quot;city&quot;:&quot;SF&quot;,&quot;state&quot;:&quot;TX&quot;,&quot;postalCode&quot;:&quot;93063&quot;,&quot;uniqueIdentifier&quot;:&quot;sirip7yhqzzy2w@mailinator.com&quot;},&quot;httpHeaders&quot;:{}}</stringProp>
                <stringProp name="1043066992">&quot;Easy Street&quot;,&quot;street2&quot;:&quot;&quot;,&quot;city&quot;:&quot;SF&quot;,&quot;state&quot;:&quot;TX&quot;,&quot;postalCode&quot;:&quot;93063&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51841264">&quot;dateOfBirth&quot;:&quot;1980-01-01&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Contact Preferences" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/contactPreferences</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Insikt-Tenant-Id</stringProp>
                  <stringProp name="Header.value">102</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1227490005">&quot;data&quot;:{&quot;applicationAlerts&quot;:{&quot;email&quot;:true,&quot;text&quot;:true,&quot;none&quot;:false},&quot;customerServiceAlerts&quot;:{&quot;email&quot;:true,&quot;text&quot;:true,&quot;none&quot;:false},&quot;marketingAlerts&quot;:{&quot;email&quot;:true,&quot;text&quot;:false,&quot;none&quot;:false}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Get Payment Means" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/paymentMeans/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="PaymentMeanAlias" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">PaymentMeanAlias</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;alias&quot;:&quot;(.+?)&quot;,&quot;consentAuthorizationCode&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">PaymentMeanAlias</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="PaymentMeanId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">PaymentMeanId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),&quot;accountNumberDisplay&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">PaymentMeanId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Delete Payment Means" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/paymentMeans/${PaymentMeanAlias}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="recurringPaymentMeanAlias" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">recurringPaymentMeanAlias</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;alias&quot;:&quot;(.+?)&quot;,&quot;consentAuthorizationCode&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">recurringPaymentMeanAlias</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Autopay Loan Accounts" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/products/loan/accounts/${productAccountId}/autoPay/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
                <elementProp name="https" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                </elementProp>
                <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="recurringPaymentNumberDisplay" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">recurringPaymentNumberDisplay</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;recurringPaymentNumberDisplay&quot;:&quot;(.+?)&quot;,&quot;recurringPaymentMeanIssuer&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="recurringPaymentMeanIssuer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">recurringPaymentMeanIssuer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;recurringPaymentMeanIssuer&quot;:&quot;(.+?)&quot;,&quot;recurringPaymentMeanAlias&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">recurringPaymentMeanIssuer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="recurringPaymentMeanAlias" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">recurringPaymentMeanAlias</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;recurringPaymentMeanAlias&quot;:&quot;(.+?)&quot;,&quot;recurringEnabled&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">recurringPaymentMeanAlias</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="recurringPaymentAmount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">recurringPaymentAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;recurringPaymentAmount&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">recurringPaymentAmount</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Delete Auto Pay Payment Means" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/paymentMeans/${recurringPaymentMeanAlias}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1012989525">Payment Mean is being used for autopay</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (ResponseCode.equals(&quot;422&quot;) == true) { 
    SampleResult.setResponseOK();  

    /* the same is 
    SampleResult.setSuccessful(true);
    SampleResult.setResponseCodeOK();
    SampleResult.setResponseMessageOK();
    */
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Get Payment Means" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/paymentMeans/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="PaymentMeanAlias" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">PaymentMeanAlias</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;alias&quot;:&quot;(.+?)&quot;,&quot;consentAuthorizationCode&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">PaymentMeanAlias</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="PaymentMeanId" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">PaymentMeanId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),&quot;accountNumberDisplay&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">PaymentMeanId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Make Payments" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;paymentAmount&quot;:&quot;45&quot;,&#xd;
&quot;paymentMeanAlias&quot;:&quot;${PaymentMeanAlias}&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/products/loan/accounts/${productAccountId}/payments/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="recurringPaymentMeanAlias" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">recurringPaymentMeanAlias</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;alias&quot;:&quot;(.+?)&quot;,&quot;consentAuthorizationCode&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">recurringPaymentMeanAlias</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="PaymentMeanAlias" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">PaymentMeanAlias</stringProp>
              <stringProp name="RegexExtractor.regex">paymentMeanAlias&quot;:&quot;(.+?)&quot;}</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">PaymentMeanAlias</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="paymentTransactionId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">paymentTransactionId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;paymentTransactionId&quot;:&quot;(.+?)&quot;,&quot;accountNumberDisplay&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">paymentTransactionId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="paymentMeanName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">paymentMeanName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;paymentMeanAlias&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">paymentMeanName</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="authorizationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">authorizationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;authorizationId&quot;:(.+?),&quot;issuer&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">authorizationId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="paymentMethod" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">paymentMethod</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;paymentMethod&quot;:&quot;(.+?)&quot;,&quot;productAccountId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">paymentMethod</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="paymentDate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">paymentDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;paymentDate&quot;:(.*),&quot;paymentMethod&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">paymentDate</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="accountNumberDisplay" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">accountNumberDisplay</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;accountNumberDisplay&quot;:&quot;(.+?)&quot;,&quot;authorizationId&quot;:</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">accountNumberDisplay</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="issuer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">issuer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;issuer&quot;:&quot;(.+?)&quot;,&quot;paymentAmount&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">issuer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT - Make Payments" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;paymentMeanDisplayName&quot;:&quot;${PaymentMeanAlias}&quot;,&#xd;
&quot;paymentMeanAlias&quot;:&quot;${PaymentMeanAlias}&quot;,&#xd;
&quot;paymentMethod&quot;:&quot;${paymentMethod}&quot;,&#xd;
&quot;accountNumberDisplay&quot;:&quot;${accountNumberDisplay}&quot;,&#xd;
&quot;paymentTransactionId&quot;:&quot;${paymentTransactionId}&quot;,&#xd;
&quot;paymentDate&quot;:&quot;${paymentDate}&quot;,&#xd;
&quot;authorizationId&quot;:&quot;${authorizationId}&quot;,&#xd;
&quot;issuer&quot;:&quot;${issuer}&quot;,&#xd;
&quot;productAccountId&quot;:&quot;${productAccountId}&quot;,&#xd;
&quot;paymentAmount&quot;:&quot;45&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/products/loan/accounts/${productAccountId}/payments/${paymentTransactionId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
                <elementProp name="https" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                </elementProp>
                <elementProp name="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.me.mylendify.com/::102/campaign/netspend/application</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-104562505">&quot;fundingStatus&quot;:&quot;ERROR&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Documents -loanContractWithAmortizationSchedule" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="docType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">docType</stringProp>
                  <stringProp name="Argument.value">loanContractWithAmortizationSchedule</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contentDisposition" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">attachment</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">contentDisposition</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/products/loanapp/applications/${loanappId}/documents/generate</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Documents -loanProductPricingAndTermsDisclosures" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="docType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">docType</stringProp>
                  <stringProp name="Argument.value">loanProductPricingAndTermsDisclosures</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contentDisposition" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">inline</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">contentDisposition</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/products/loanapp/applications/${loanappId}/documents/generate</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Documents -privacyPolicy" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="docType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">docType</stringProp>
                  <stringProp name="Argument.value">privacyPolicy</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contentDisposition" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">inline</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">contentDisposition</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/products/loanapp/applications/${loanappId}/documents/generate</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Documents -termsOfUse" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="docType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">docType</stringProp>
                  <stringProp name="Argument.value">termsOfUse</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contentDisposition" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">inline</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">contentDisposition</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/products/loanapp/applications/${loanappId}/documents/generate</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Documents -informationSharing" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="docType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">docType</stringProp>
                  <stringProp name="Argument.value">informationSharing</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contentDisposition" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">inline</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">contentDisposition</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/products/loanapp/applications/${loanappId}/documents/generate</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Documents -loanContract" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="docType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">docType</stringProp>
                  <stringProp name="Argument.value">loanContract</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contentDisposition" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">inline</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">contentDisposition</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/products/loanapp/applications/${loanappId}/documents/generate</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Documents -consentToReceiveCalls" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="docType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">docType</stringProp>
                  <stringProp name="Argument.value">consentToReceiveCalls</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contentDisposition" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">inline</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">contentDisposition</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/products/loanapp/applications/${loanappId}/documents/generate</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Documents - consentToElectronicsAndCommunications" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="docType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">docType</stringProp>
                  <stringProp name="Argument.value">consentToElectronicsAndCommunications</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contentDisposition" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">inline</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">contentDisposition</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/products/loanapp/applications/${loanappId}/documents/generate</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Documents - consumerReportsAuthorization" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="docType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">docType</stringProp>
                  <stringProp name="Argument.value">consumerReportsAuthorization</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contentDisposition" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">inline</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">contentDisposition</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/products/loanapp/applications/${loanappId}/documents/generate</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Documents -consentToReceiveCalls" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="docType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">docType</stringProp>
                  <stringProp name="Argument.value">consentToReceiveCalls</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contentDisposition" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">inline</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">contentDisposition</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/products/loanapp/applications/${loanappId}/documents/generate</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Documents -amortizationSchedule" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="docType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">docType</stringProp>
                  <stringProp name="Argument.value">amortizationSchedule</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contentDisposition" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">inline</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">contentDisposition</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.${NetspendUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/products/loanapp/applications/${loanappId}/documents/generate</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">www.me.mylendify.com</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Retail Smoke" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time"></stringProp>
        <longProp name="ThreadGroup.start_time">1391586690000</longProp>
        <longProp name="ThreadGroup.end_time">1391586690000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Environment URLs" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="baseUrl" elementType="Argument">
              <stringProp name="Argument.name">baseUrl</stringProp>
              <stringProp name="Argument.value">retail.${__P(env,qa)}.lendifyfin.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="baseIdpPartnerUrl" elementType="Argument">
              <stringProp name="Argument.name">baseIdpPartnerUrl</stringProp>
              <stringProp name="Argument.value">idp-directory.${__P(env,qa)}.lendifyfin.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="2645995">User</stringProp>
            <stringProp name="2606829">Time</stringProp>
            <stringProp name="80811750">Time3</stringProp>
            <stringProp name="2122702">Date</stringProp>
            <stringProp name="80811751">Time4</stringProp>
            <stringProp name="-1699764666">externalId</stringProp>
            <stringProp name="-1185250696">images</stringProp>
            <stringProp name="1911934138">images2</stringProp>
            <stringProp name="-1306693787">tenantId</stringProp>
            <stringProp name="100589">env</stringProp>
            <stringProp name="109264468">scope</stringProp>
            <stringProp name="96862150">admin_username</stringProp>
            <stringProp name="22193741">admin_pwd</stringProp>
            <stringProp name="-1700717821">agent_pwd</stringProp>
            <stringProp name="0"></stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-1610672926">
              <stringProp name="-1332388061">${__Random(7122,9009234)}</stringProp>
              <stringProp name="217092793">${__time}</stringProp>
              <stringProp name="1196789496">${__time(ssssss)}</stringProp>
              <stringProp name="-1983561601">${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(new Date()))}</stringProp>
              <stringProp name="1821498968">${__time(HH:mm:ss)}</stringProp>
              <stringProp name="-485296928">${__Random(10000,50000)}</stringProp>
              <stringProp name="-849626933">${__Random(176990,990092)}</stringProp>
              <stringProp name="1343154419">${__Random(276990,290092)}</stringProp>
              <stringProp name="-1767912461">${__P(tenant,101)}</stringProp>
              <stringProp name="2085928178">${__P(env,qa)}</stringProp>
              <stringProp name="-392631510">${__P(scope,full)}</stringProp>
              <stringProp name="-975007779">${__P(adminUname,root@insikt.com)}</stringProp>
              <stringProp name="-896320290">${__P(adminPwd,password)}</stringProp>
              <stringProp name="208320677">${__P(agentPwd,Password1)}</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">true</boolProp>
        </UserParameters>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Date time parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="2645995">User</stringProp>
            <stringProp name="2606829">Time</stringProp>
            <stringProp name="402974533">DaysExpiryId</stringProp>
            <stringProp name="-1206482410">DaysInPastNewestTxn</stringProp>
            <stringProp name="913100125">DaysInPastOldestTxn</stringProp>
            <stringProp name="-437874624">TodaysDate</stringProp>
            <stringProp name="0"></stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-69277620">
              <stringProp name="-1997876883">${__Random(7754,9009987)}</stringProp>
              <stringProp name="217092793">${__time}</stringProp>
              <stringProp name="1665">45</stringProp>
              <stringProp name="1567">10</stringProp>
              <stringProp name="1758">75</stringProp>
              <stringProp name="963734563">${__time(&quot;yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS&apos;Z&apos;&quot;)}</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">true</boolProp>
        </UserParameters>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">false</boolProp>
          <boolProp name="useExpires">false</boolProp>
        </CacheManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-Lendify DB when env QA" enabled="true">
          <stringProp name="IfController.condition">&apos;${env}&apos; == &apos;qa&apos;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="DB Configuration QA" enabled="true">
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="dataSource">lendifydb</stringProp>
            <stringProp name="dbUrl">jdbc:postgresql://lendify-qa.cl6q9ofwkebd.us-west-2.rds.amazonaws.com:5432/lendify?autoReconnect=true</stringProp>
            <stringProp name="driver">org.postgresql.Driver</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="password">zemeFuKeT6trutUv</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <stringProp name="username">lendify</stringProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request to get tenant name" enabled="true">
            <stringProp name="dataSource">lendifydb</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select name from lendify.fabric_tenant where id=${tenantId}</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">tenantname</stringProp>
            <stringProp name="resultVariable">tenantname</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;\nScript being executed against environment(script param &apos;env&apos;): &quot; + vars.get(&quot;env&quot;).toUpperCase());
System.out.println(&quot;Script being executed for scope(script param &apos;scope&apos;): &quot; + vars.get(&quot;scope&quot;).toUpperCase());
System.out.println(&quot;Script being executed for Tenant ID(script param &apos;tenant&apos;): &quot; + vars.get(&quot;tenantId&quot;).toUpperCase() + &quot;\n&quot;);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request to check if tenant agent exists" enabled="true">
            <stringProp name="dataSource">lendifydb</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT a.unique_identifier FROM insikt.idp_account a, insikt.idp_account_application_role aar, insikt.idp_account_partner ap WHERE a.id=aar.account_id AND a.id=ap.account_id AND a.unique_identifier=&apos;testagent@${tenantname_1}.com&apos; AND aar.application_role_id=1002 AND ap.partner_id=${tenantId} LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">agentidpaccount </stringProp>
            <stringProp name="resultVariable">agentidpaccount</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller- Lendify DB when env TRAINING" enabled="true">
          <stringProp name="IfController.condition">&apos;${env}&apos; == &apos;training&apos;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="DB Configuration TRAINING" enabled="true">
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="dataSource">lendifydb</stringProp>
            <stringProp name="dbUrl">jdbc:postgresql://lendify-training.cl6q9ofwkebd.us-west-2.rds.amazonaws.com:5432/lendify?autoReconnect=true</stringProp>
            <stringProp name="driver">org.postgresql.Driver</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="password">password</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <stringProp name="username">app</stringProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request to get tenant name" enabled="true">
            <stringProp name="dataSource">lendifydb</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select name from lendify.fabric_tenant where id=${tenantId}</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">tenantname</stringProp>
            <stringProp name="resultVariable">tenantname</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;\nScript being executed against environment(script param &apos;env&apos;): &quot; + vars.get(&quot;env&quot;).toUpperCase());
System.out.println(&quot;Script being executed for scope(script param &apos;scope&apos;): &quot; + vars.get(&quot;scope&quot;).toUpperCase());
System.out.println(&quot;Script being executed for Tenant ID(script param &apos;tenant&apos;): &quot; + vars.get(&quot;tenantId&quot;).toUpperCase() + &quot;\n&quot;);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request to check if tenant agent exists" enabled="true">
            <stringProp name="dataSource">lendifydb</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT a.unique_identifier FROM insikt.idp_account a, insikt.idp_account_application_role aar, insikt.idp_account_partner ap WHERE a.id=aar.account_id AND a.id=ap.account_id AND a.unique_identifier=&apos;testagent@${tenantname_1}.com&apos; AND aar.application_role_id=100 AND ap.partner_id=${tenantId} LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">agentidpaccount</stringProp>
            <stringProp name="resultVariable">agentidpaccount</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller- Lendify DB when env DEV(docker)" enabled="true">
          <stringProp name="IfController.condition">${env}==dev</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="DB Configuration DEV (docker)" enabled="true">
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="dataSource">lendifydb</stringProp>
            <stringProp name="dbUrl">jdbc:postgresql://ldev-docker01:5432/test?autoReconnect=true</stringProp>
            <stringProp name="driver">org.postgresql.Driver</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="password">password</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <stringProp name="username">app</stringProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request to get tenant name" enabled="true">
            <stringProp name="dataSource">lendifydb</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select name from lendify.fabric_tenant where id=${tenantId}</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">tenantname</stringProp>
            <stringProp name="resultVariable">tenantname</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;\nScript being executed against environment(script param &apos;env&apos;): &quot; + vars.get(&quot;env&quot;).toUpperCase());
System.out.println(&quot;Script being executed for scope(script param &apos;scope&apos;): &quot; + vars.get(&quot;scope&quot;).toUpperCase());
System.out.println(&quot;Script being executed for Tenant ID(script param &apos;tenant&apos;): &quot; + vars.get(&quot;tenantId&quot;).toUpperCase() + &quot;\n&quot;);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request to check if tenant agent exists" enabled="true">
            <stringProp name="dataSource">lendifydb</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT a.unique_identifier FROM insikt.idp_account a, insikt.idp_account_application_role aar, insikt.idp_account_partner ap WHERE a.id=aar.account_id AND a.id=ap.account_id AND a.unique_identifier=&apos;testagent@${tenantname_1}.com&apos; AND aar.application_role_id=100 AND ap.partner_id=${tenantId} LIMIT 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">agentidpaccount</stringProp>
            <stringProp name="resultVariable">agentidpaccount</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">print(&quot;agent exists&quot; + vars.get(agentidpaccount));</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - if tenant agent doesn&apos;t exist then create new tenant agent" enabled="true">
          <stringProp name="IfController.condition">${agentidpaccount_#} == 0</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
            <boolProp name="clearEachIteration">false</boolProp>
            <boolProp name="useExpires">false</boolProp>
          </CacheManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">true</boolProp>
            <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
          </CookieManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - loginUser -root" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;${admin_username}&quot;,&quot;password&quot;:&quot;${admin_pwd}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">refreshToken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">bearer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">bearer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Authenticating with provided Admin user credentials(script params- &apos;adminUname&apos; &amp; &apos;adminPwd&apos;) in order to create a &quot; + vars.get(&quot;tenantname_1&quot;) +  &quot; agent idp account.\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;The script expects an existing default tenant agent with username of the form &apos;tenantagent@&lt;tenantname&gt;.com&apos; and with retail agent role(i.e. 1002). Looks like one doesn&apos;t exist in the current environment so trying to create the default tenant agent.\n&quot;);
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Screening location" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;locationId&quot;:${locationId}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/screening/locations</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1030792413">&quot;success&quot;:true,&quot;redirectUrl&quot;:&quot;/t/1/&quot;,&quot;bearer&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create idp account" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;uniqueIdentifier&quot;:&quot;qaagent${User}@dolex.com&quot;,&quot;firstName&quot;:&quot;qa${User}&quot;,&quot;lastName&quot;:&quot;agent&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp-directory/accounts</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;idpAccountId&quot;:(.+?)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create idp account" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;uniqueIdentifier&quot;:&quot;testagent@${tenantname_1}.com&quot;,&quot;firstName&quot;:&quot;test${tenantname_1}&quot;,&quot;lastName&quot;:&quot;agent&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp-directory/accounts</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Prequal Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;idpAccountId&quot;:(.+?)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set contractor ID" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;contractorId&quot;:&quot;${tenantId}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp-directory/accounts/testagent@${tenantname_1}.com/contractorId</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;idpAccountId&quot;:(.+?)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set tenant Id" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;tenantIds&quot;:[${tenantId}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp-directory/accounts/testagent@${tenantname_1}.com/tenantIds</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;idpAccountId&quot;:(.+?)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set idp-directory app role" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;roles&quot;:[&quot;accountAccessor&quot;]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp-directory/accounts/testagent@${tenantname_1}.com/applications/idp-directory/roles</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;idpAccountId&quot;:(.+?)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set retail app role" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;roles&quot;:[&quot;agent&quot;]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp-directory/accounts/testagent@${tenantname_1}.com/applications/retail/roles</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;idpAccountId&quot;:(.+?)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set account password" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;password&quot;:&quot;Password1&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp-directory/accounts/testagent@${tenantname_1}.com/password</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;idpAccountId&quot;:(.+?)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login with new agent" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;testagent@${tenantname_1}.com&quot;,&quot;password&quot;:&quot;Password1&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">refreshToken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">bearer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">bearer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Logging in to verify newly created &quot; + vars.get(&quot;tenantname_1&quot;) + &quot; agent.\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - loginUser -root" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;username&quot;:&quot;root@insikt.com&quot;,&quot;password&quot;:&quot;password&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">refreshToken</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-56506402">refreshToken</stringProp>
              <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">bearer</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">bearer</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Screening location" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;locationId&quot;:${locationId}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/screening/locations</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${bearer}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">refreshToken</stringProp>
                <stringProp name="Header.value">${refreshToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1030792413">&quot;success&quot;:true,&quot;redirectUrl&quot;:&quot;/t/1/&quot;,&quot;bearer&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - loginUser -Admin" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;username&quot;:&quot;agent2@dolex.com&quot;,&quot;password&quot;:&quot;p@SSW0rd1&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">refreshToken</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-56506402">refreshToken</stringProp>
              <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">bearer</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">bearer</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Screening location - Admin" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;locationId&quot;:${locationId}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/screening/locations</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${bearer}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">refreshToken</stringProp>
                <stringProp name="Header.value">${refreshToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="998315213">&quot;success&quot;:true,&quot;redirectUrl&quot;:&quot;/t/${tenantId}/&quot;,&quot;bearer&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If &apos;full&apos; scope" enabled="true">
          <stringProp name="IfController.condition">&apos;${scope}&apos; == &apos;full&apos;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Agent login " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;testagent@${tenantname_1}.com&quot;,&quot;password&quot;:&quot;Password1&quot;}&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">refreshToken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Authenticating as &quot; + vars.get(&quot;tenantname_1&quot;) + &quot; agent testagent@&quot; + vars.get(&quot;tenantname_1&quot;) + &quot;.com\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">bearer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">bearer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Starting new app creation.....\n&quot;);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="New loanapp start" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">#loanapp=vars.get(&quot;loanappId&quot;);
#print(ctx.getCurrentSampler().getVars(&quot;loanappId&quot;).toString());</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Start new loanapp Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="loanappId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">loanappId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;appId&quot;:&quot;(.+?)&quot;,&quot;appFlowType&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">loanappId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller- listo prequal submit" enabled="true">
            <stringProp name="IfController.condition">${tenantId} == 102</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Loanapp prequal application- Listo" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;applicant&quot;:{&quot;memberOfArmedForces&quot;:&quot;N&quot;,&quot;EID&quot;:null,&quot;timeZone&quot;:&quot;America/Los_Angeles&quot;,&quot;externalIdNA&quot;:true,&quot;externalId&quot;:null,&quot;isTenantEmployee&quot;:{&quot;flag&quot;:false},&quot;person&quot;:{&quot;firstName&quot;:&quot;stephen&quot;,&quot;lastName&quot;:&quot;curry&quot;,&quot;paternalLastName&quot;:null,&quot;maternalLastName&quot;:null,&quot;middleName&quot;:null,&quot;nameSuffix&quot;:null,&quot;title&quot;:null,&quot;nationality&quot;:null,&quot;gender&quot;:null,&quot;dateOfBirth&quot;:&quot;1980-02-04&quot;,&quot;placeOfBirth&quot;:null,&quot;countryOfBirth&quot;:null,&quot;cityOfBirth&quot;:null,&quot;preferredLanguage&quot;:&quot;en-US&quot;,&quot;ssn&quot;:&quot;425-16-2621&quot;,&quot;ssnNA&quot;:false,&quot;last4Ssn&quot;:null},&quot;email&quot;:{&quot;emailAddress&quot;:&quot;test@listo.com&quot;,&quot;emailAddressNA&quot;:false},&quot;phone&quot;:{&quot;type&quot;:&quot;MOBILE&quot;,&quot;number&quot;:&quot;(415) 555-5555&quot;},&quot;address&quot;:{&quot;address1&quot;:&quot;3223&quot;,&quot;city&quot;:&quot;sdsad&quot;,&quot;state&quot;:&quot;TX&quot;,&quot;postalCode&quot;:&quot;11111&quot;,&quot;since&quot;:&quot;6_TO_12_MONTHS&quot;,&quot;inServiceArea&quot;:false},&quot;statedIncome&quot;:{&quot;amount&quot;:3000,&quot;frequency&quot;:&quot;MONTHLY&quot;},&quot;identification&quot;:{&quot;verifiedByAgent&quot;:null,&quot;isMilitaryID&quot;:null},&quot;payday&quot;:{&quot;statedUsage&quot;:&quot;N&quot;,&quot;actualUsage&quot;:null},&quot;checkCashing&quot;:{&quot;statedUsage&quot;:null,&quot;actualUsage&quot;:null},&quot;insurance&quot;:{&quot;statedUsage&quot;:&quot;N&quot;},&quot;hasBankAccount&quot;:null,&quot;inUSSince&quot;:null,&quot;homeOwnership&quot;:null,&quot;numberOfDependents&quot;:null,&quot;numberOfChildren&quot;:null,&quot;employed&quot;:null,&quot;otherIncome&quot;:null,&quot;incomeSources&quot;:[],&quot;payTransactionType&quot;:null,&quot;payCheckDestination&quot;:null,&quot;monthlyExpenses&quot;:{&quot;housing&quot;:null,&quot;car&quot;:null,&quot;phone&quot;:null,&quot;utilities&quot;:null,&quot;otherExpenses&quot;:[]},&quot;hasExistingLoans&quot;:null,&quot;existingLoans&quot;:[],&quot;references&quot;:[],&quot;preferences&quot;:{&quot;smsMmsConsent&quot;:false},&quot;disclosureDocument&quot;:{&quot;base64Signature&quot;:null,&quot;signatureDate&quot;:null,&quot;timestamp&quot;:null,&quot;boxKey&quot;:null},&quot;documents&quot;:[],&quot;images&quot;:[]}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/prequalification${__javaScript(encodeURIComponent(&apos;|application&apos;))}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Prequal Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Loanapp prequal start- Listo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__FileToString(./files/prequal_listo_start.json,,)};</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/prequalification${__javaScript(encodeURIComponent(&apos;|application&apos;))}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Prequal Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">${tenantId} != 102</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp prequal application" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;applicant&quot;:{&quot;timeZone&quot;:&quot;America/Los_Angeles&quot;,&quot;externalId&quot;:&quot;VQzyuxRmgy${externalId}&quot;,&quot;payday&quot;:{&quot;statedUsage&quot;:true,&quot;actualUsage&quot;:false},&quot;checkCashing&quot;:{&quot;statedUsage&quot;:false,&quot;actualUsage&quot;:false},&quot;person&quot;:{&quot;firstName&quot;:&quot;FIRSTTEST&quot;,&quot;lastName&quot;:&quot;LASTTEST&quot;,&quot;dateOfBirth&quot;:&quot;1983-05-01&quot;,&quot;preferredLanguage&quot;:&quot;en-US&quot;,&quot;ssn&quot;:&quot;686-14-6505&quot;,&quot;ssnNA&quot;:false},&quot;email&quot;:{&quot;emailAddress&quot;:&quot;jdoe@example.com&quot;,&quot;emailAddressNA&quot;:false},&quot;phone&quot;:{&quot;type&quot;:&quot;MOBILE&quot;,&quot;number&quot;:&quot;(415) 333-5555&quot;},&quot;address&quot;:{&quot;address1&quot;:&quot;CA Address&quot;,&quot;city&quot;:&quot;San Francisco&quot;,&quot;state&quot;:&quot;TX&quot;,&quot;postalCode&quot;:11111,&quot;since&quot;:&quot;6_TO_12_MONTHS&quot;,&quot;inServiceArea&quot;:true},&quot;statedIncome&quot;:{&quot;amount&quot;:5000,&quot;frequency&quot;:&quot;MONTHLY&quot;},&quot;memberOfArmedForces&quot;:&quot;N&quot;}}&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/prequalification${__javaScript(encodeURIComponent(&apos;|application&apos;))}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Prequal Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="loanapp prequal start" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__FileToString(./files/prequal_start.json,,)};&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/prequalification${__javaScript(encodeURIComponent(&apos;|application&apos;))}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Prequal Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Loanapp prequal authorization" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;applicant&quot;:{&quot;preferences&quot;:{&quot;smsMmsConsent&quot;:true}},&quot;loanApplicationSummary&quot;:{&quot;preQualification&quot;:{&quot;applicant&quot;:{&quot;authorized&quot;:&quot;Y&quot;}}}}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/prequalification${__javaScript(encodeURIComponent(&apos;|authorization&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Prequal Authorization Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp preapproval start" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"> {&quot;applicant&quot;:{&quot;hasBankAccount&quot;:&quot;N&quot;,&quot;inUSSince&quot;:&quot;ONE_TO_TWO_YEARS&quot;,&quot;homeOwnership&quot;:&quot;OWN&quot;,&quot;numberOfDependents&quot;:&quot;0&quot;,&quot;numberOfChildren&quot;:&quot;0&quot;,&quot;employed&quot;:&quot;Y&quot;,&quot;otherIncome&quot;:&quot;N&quot;,&quot;incomeSources&quot;:[{&quot;selfEmployed&quot;:&quot;N&quot;,&quot;incomeType&quot;:&quot;AGRICULTURE_FARMING&quot;,&quot;employerName&quot;:&quot;dsfg&quot;,&quot;since&quot;:&quot;LESS_THAN_6_MONTHS&quot;,&quot;incomeFrequency&quot;:&quot;MONTHLY&quot;,&quot;takeHomeAmount&quot;:&quot;5000&quot;}],&quot;payTransactionType&quot;:&quot;DIRECT_DEPOSIT&quot;,&quot;payCheckDestination&quot;:null,&quot;monthlyExpenses&quot;:{&quot;housing&quot;:&quot;0&quot;,&quot;car&quot;:&quot;0&quot;,&quot;phone&quot;:&quot;0&quot;,&quot;utilities&quot;:&quot;0&quot;,&quot;payday&quot;:12,&quot;otherExpenses&quot;:[]}},&quot;preferredLoan&quot;:{&quot;amount&quot;:null,&quot;loanTerm&quot;:null,&quot;paymentAmount&quot;:null,&quot;purpose&quot;:&quot;PAY_BILLS&quot;,&quot;loanPurposeOther&quot;:null}}&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/preapproval${__javaScript(encodeURIComponent(&apos;|start&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Preapproval Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp preapproval start" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__FileToString(./files/preapproval_start.json,,)};&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/preapproval${__javaScript(encodeURIComponent(&apos;|start&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Preapproval Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp preapproval loan selection" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"> {&quot;preferredLoan&quot;:{&quot;amount&quot;:2500,&quot;loanTerm&quot;:12,&quot;paymentAmount&quot;:200}}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/preapproval${__javaScript(encodeURIComponent(&apos;|loanSelection&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Preapproval Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp preapproval loan selection" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__FileToString(./files/preapproval_preferred_loan_selection.json,,)};&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/preapproval${__javaScript(encodeURIComponent(&apos;|loanSelection&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Preferred Loan selection Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp references" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;references&quot;:[{&quot;status&quot;:&quot;NEW&quot;,&quot;fullName&quot;:&quot;CECELIA MCCUIN&quot;,&quot;relationship&quot;:&quot;OTHER&quot;,&quot;phoneNumber&quot;:&quot;(300) 007-7648&quot;},{&quot;status&quot;:&quot;NEW&quot;,&quot;fullName&quot;:&quot;ADALINE ROSENTRATER&quot;,&quot;relationship&quot;:&quot;MANAGER&quot;,&quot;phoneNumber&quot;:&quot;(475) 205-3463&quot;}]}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/references</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Submitting References Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp Identification doc check" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;applicant&quot;:{&quot;identification&quot;:{&quot;verifiedByAgent&quot;:&quot;N&quot;,&quot;isMilitaryID&quot;:&quot;N&quot;}}}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/documents${__javaScript(encodeURIComponent(&apos;|identificationCheck&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Submit ID doc questions Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp submit identification docs" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;capturedImage&quot;:{&quot;captureType&quot;:&quot;IDENTIFICATION&quot;,&quot;base64String&quot;:&quot;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&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/documents${__javaScript(encodeURIComponent(&apos;|scan|identification&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="identificationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">identificationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),&quot;appId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">identificationId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Submit ID image Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Root login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;root@insikt.com&quot;,&quot;password&quot;:&quot;password&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">refreshToken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">bearer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">bearer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Preapproval Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit reference verify 0" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"> {&quot;reference&quot;:{&quot;id&quot;:null,&quot;status&quot;:&quot;CONTACTED&quot;,&quot;fullName&quot;:&quot;CARLINE MANKOWSKI&quot;,&quot;relationship&quot;:&quot;OTHER&quot;,&quot;phoneNumber&quot;:&quot;(450) 739-5765&quot;,&quot;address&quot;:{},&quot;questions&quot;:{&quot;doYouKnowApplicant&quot;:&quot;YES&quot;,&quot;howYouKnowHim&quot;:&quot;LANDLORD&quot;,&quot;lendHimMoney&quot;:&quot;YES&quot;,&quot;howManyChildren&quot;:&quot;1&quot;,&quot;whereEmployed&quot;:null,&quot;interestedInLoan&quot;:&quot;YES&quot;}}}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/t/${tenantId}/api/v1/appflow/loanapp/${loanappId}/verification${__javaScript(encodeURIComponent(&apos;|reference|0&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Verify Reference 1 Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit reference verify 1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;reference&quot;:{&quot;id&quot;:null,&quot;status&quot;:&quot;CONTACTED&quot;,&quot;fullName&quot;:&quot;SHERLEY STANDLEY&quot;,&quot;relationship&quot;:&quot;OTHER&quot;,&quot;phoneNumber&quot;:&quot;(248) 596-0183&quot;,&quot;address&quot;:{},&quot;questions&quot;:{&quot;doYouKnowApplicant&quot;:&quot;YES&quot;,&quot;howYouKnowHim&quot;:&quot;LANDLORD&quot;,&quot;lendHimMoney&quot;:&quot;YES&quot;,&quot;howManyChildren&quot;:&quot;1&quot;,&quot;whereEmployed&quot;:null,&quot;interestedInLoan&quot;:&quot;YES&quot;}}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/t/${tenantId}/api/v1/appflow/loanapp/${loanappId}/verification${__javaScript(encodeURIComponent(&apos;|reference|1&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Submit Reference 2 Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit doc verify ID US_DRIVERS_LICENSE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;proofDocument&quot;:{&quot;documentType&quot;:&quot;US_DRIVERS_LICENSE&quot;,&quot;data&quot;:{&quot;IDDOBMatch&quot;:&quot;YES&quot;,&quot;IDExpireDate&quot;:&quot;${IdExpiryDate}&quot;,&quot;IDNameMatch&quot;:&quot;YES&quot;,&quot;IDNumber&quot;:&quot;9250712645&quot;,&quot;applicationAddressMatch&quot;:&quot;YES&quot;,&quot;countryDivision&quot;:&quot;CA&quot;,&quot;damagedDoc&quot;:&quot;NO&quot;,&quot;fakeDocument&quot;:&quot;NO&quot;,&quot;hasIDNumber&quot;:&quot;YES&quot;,&quot;photoID&quot;:&quot;YES&quot;,&quot;photoIDMatchesPhoto&quot;:&quot;YES&quot;,&quot;programs&quot;:{&quot;photoRequired&quot;:true},&quot;usableID&quot;:&quot;YES&quot;},&quot;images&quot;:[${identificationId}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/t/${tenantId}/api/v1/appflow/loanapp/${loanappId}/verification${__javaScript(encodeURIComponent(&apos;|documents&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="greencardid" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">greencardid</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),&quot;appId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">greencardid</stringProp>
              <stringProp name="RegexExtractor.match_number">3</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat; 
import java.util.Date; 

// You need to define ${InDays} as how many days forward/back you want to go
int IdExpDays = Integer.valueOf(vars.get(&quot;DaysExpiryId&quot;));


Date dateIdExp = new Date(); 
dateIdExp.setDate(dateIdExp.getDate() + IdExpDays); 
SimpleDateFormat df  = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS&apos;Z&apos;&quot;); 
String formattedDate = df.format(dateIdExp); 
// Resulting date will be in ${FutureDate}
vars.put(&quot;IdExpiryDate&quot;,formattedDate);




</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Verify ID doc(US Driver&apos;s license) Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Agent login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;testagent@${tenantname_1}.com&quot;,&quot;password&quot;:&quot;Password1&quot;}&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">refreshToken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">bearer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">bearer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp submit photo docs" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;capturedImage&quot;:{&quot;captureType&quot;:&quot;PHOTO&quot;,&quot;base64String&quot;:&quot;&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/documents${__javaScript(encodeURIComponent(&apos;|scan|photo&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="photoId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">photoId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),&quot;appId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">photoId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Submit Personal Photo image Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Root login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;root@insikt.com&quot;,&quot;password&quot;:&quot;password&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">refreshToken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">bearer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">bearer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit doc verify Photo" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"> {&quot;proofDocument&quot;:{&quot;documentType&quot;:&quot;PHOTO&quot;,&quot;data&quot;:{&quot;isPhotoFake&quot;:&quot;NO&quot;,&quot;isPhotoUseable&quot;:&quot;YES&quot;},&quot;images&quot;:[${photoId}]}}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/t/${tenantId}/api/v1/appflow/loanapp/${loanappId}/verification${__javaScript(encodeURIComponent(&apos;|documents&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Verify Personal Photo Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Agent login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;testagent@${tenantname_1}.com&quot;,&quot;password&quot;:&quot;Password1&quot;}&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">refreshToken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">bearer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">bearer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp submit Income docs" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;capturedImage&quot;:{&quot;captureType&quot;:&quot;INCOME&quot;,&quot;base64String&quot;:&quot;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&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/documents${__javaScript(encodeURIComponent(&apos;|scan|income&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="incomeId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">incomeId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),&quot;appId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">incomeId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Submit Income image Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Root login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;root@insikt.com&quot;,&quot;password&quot;:&quot;password&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">refreshToken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">bearer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">bearer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit doc verify Income BANK_TRANSACTION_HISTORY" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;proofDocument&quot;:{&quot;documentType&quot;:&quot;BANK_TRANSACTION_HISTORY&quot;,&quot;data&quot;:{&quot;clearDocument&quot;:&quot;YES&quot;,&quot;fakeDocument&quot;:&quot;NO&quot;,&quot;applicantNameMatch&quot;:&quot;YES&quot;,&quot;applicationAddressMatch&quot;:&quot;YES&quot;,&quot;bankName&quot;:&quot;MlsXS&quot;,&quot;mostRecentTransactionDate&quot;:&quot;${RecentTxnDate}&quot;,&quot;oldestTransactionDate&quot;:&quot;${OldestTxnDate}&quot;,&quot;anyDepositTransactions&quot;:&quot;NO&quot;,&quot;maximumBalance&quot;:&quot;29491&quot;,&quot;minimumBalance&quot;:&quot;82306&quot;,&quot;overdrafts&quot;:&quot;NO&quot;,&quot;netIncome&quot;:&quot;37441&quot;,&quot;grossIncome&quot;:&quot;60785&quot;,&quot;transactions&quot;:[{&quot;transactionAmount&quot;:4000,&quot;transactionDate&quot;:&quot;2017-04-25T21:20:06.065Z&quot;},{&quot;transactionAmount&quot;:4000,&quot;transactionDate&quot;:&quot;2017-03-26T21:20:06.065Z&quot;},{&quot;transactionAmount&quot;:4000,&quot;transactionDate&quot;:&quot;2017-02-24T22:20:06.065Z&quot;}]},&quot;images&quot;:[${incomeId}]}}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/t/${tenantId}/api/v1/appflow/loanapp/${loanappId}/verification${__javaScript(encodeURIComponent(&apos;|documents&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat; 
import java.util.Date; 

// You need to define ${InDays} as how many days forward/back you want to go
//int InDays = Integer.valueOf(vars.get(&quot;InDays&quot;));
int RecentDays = 10;
int OldestDays = 75;

Date dateRecent = new Date(); 
dateRecent.setDate(dateRecent.getDate() - RecentDays); 
SimpleDateFormat df1  = new SimpleDateFormat(&quot;yyyy-MM-dd\&apos;T\&apos;hh:mm:ss.SSS\&apos;Z\&apos;&quot;);
df1.setTimeZone(TimeZone.getTimeZone(&quot;GMT&quot;)); 
String formattedRecentDate = df1.format(dateRecent); 

Date dateOldest = new Date(); 
dateOldest.setDate(dateOldest.getDate() - OldestDays); 
SimpleDateFormat df2  = new SimpleDateFormat(&quot;yyyy-MM-dd\&apos;T\&apos;hh:mm:ss.SSS\&apos;Z\&apos;&quot;);
df2.setTimeZone(TimeZone.getTimeZone(&quot;GMT&quot;)); 
String formattedOldestDate = df2.format(dateOldest); 

// Resulting date will be in ${FutureDate}
vars.put(&quot;recentTxnDate&quot;,formattedRecentDate);
vars.put(&quot;oldestTxnDate&quot;,formattedOldestDate);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Verify income doc(Bank transaction history) Request-Response. Also executes Final Approval\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat; 
import java.util.Date; 

// You need to define ${InDays} as how many days forward/back you want to go

int TxnDate1 = Integer.valueOf(vars.get(&quot;DaysInPastNewestTxn&quot;));
int TxnDate2 = Integer.valueOf(vars.get(&quot;DaysInPastOldestTxn&quot;));


Date dateTxn1 = new Date();
dateTxn1.setDate(dateTxn1.getDate() - TxnDate1);
SimpleDateFormat df1 = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS&apos;Z&apos;&quot;);
String formattedDate1= df1.format(dateTxn1);
vars.put(&quot;RecentTxnDate&quot;,formattedDate1);

Date dateTxn2 = new Date();
dateTxn2.setDate(dateTxn2.getDate() - TxnDate2);
SimpleDateFormat df2 = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS&apos;Z&apos;&quot;);
String formattedDate2= df2.format(dateTxn2);
vars.put(&quot;OldestTxnDate&quot;,formattedDate2);


</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regex- approved loan amount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">approvedLoanAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;approvedLoan&quot;:{&quot;amount&quot;:(.+?),&quot;term&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regex- approved loan term" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">approvedLoanTerm</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;approvedLoan&quot;:{&quot;amount&quot;:(.+?),&quot;term&quot;:(.+?),&quot;paymentAmount&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">partyId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;EID&quot;:(.+?),&quot;timeZone&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - App flow loanapp documents|scan|address" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;capturedImage&quot;:{&quot;captureType&quot;:&quot;ADDRESS&quot;,&quot;base64String&quot;:&quot;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wZnQ7ns5hO7IcagCDcwxwgP+YeFA0geSrvW22/NnBmQZuNutsiIJX0p5cNJ1nFTlgUCrZWFBehowBUBBPABQAQAC/YAADZmolcUKcQVAA3lxGRDYE7k5eBw5B2iAHj0wDPjSe1eh1x+GEGRxBSRf/eCCJBg+4BknRQGAYlqBIQD/QBy/bQUGephlJ82HRklGngtlbAGVAhjS455rMWjj4Fu5hbZVkjhEYYAHjxy2E5ttuvkmnHHS9J00FrATBp0X0okAn3xmoUYa0qihAWd5Xqhnny4N+p2hCwbwUxUMPYpnpH9Weqil9wQAA0x9Jprpn56Ok+ee0lQQAKHbsFbnpKBiKiqdMLSK6T2kFgHphagyKiiplIbqaaR+4nmrq6SKKihMdkpJa7C+7hopsa66gSiwoV56aaO5plrsqIoyqyezeUZ7bbjGhhtTqb7mNGqvvUqr7bPkvnvqsm7oCi6e3WYxbqT3XluonAELPDDBBRt8MMIJKyyTAlsu/DDEEUs8/zHFFVt8McYZa7wxxx17/DHIIYs8Msklm3wyyimrvDLLLbv8MswxyzwzzTXbfDPOOeu8M889+/wz0EELPTTRRRt9NNJJK7000007/TTUUUs9NdVVW3011llrvTXXXXv9Ndhhiz022WWbfTbaaau9Ntttu/023HHLPTfdddt9N95567033337/TfggQs+OOGFG3444okrvjjjjTv+OOSRSz455ZVbfjnmmWu+Oeede/456KGLPjrppZt+Ouqpq74666273rgCEKAwO+2123477rnrvjvvvfv+O/DBCz888cUbfzzyySu/PPPNO/889NFLPz311Vt/ve4QODxxACQY8P89+OGLPz755Zt/Pvrpq78+++27/z788cs/P/31238//vnrvz///fv/PwADKMABng8hrzsgAhOowAUysIEOfCAEIyjBCVKwgha8IAYzqMENcrCDHvwgCEMowhGSsIQmPCEKU6jCFbKwhS58IQxjKMMZ0rCGNrwhDnOowx2uTgM5sJEbXABEFIQFAPloi3bA053joGACSwFADgAAgATk4Igu0I58xjGCHHykBNDhjAVcsIJsySQBANheAHJApDQasGAIgMBTFAEDGowAAQaol0tKU5lDdEFRI2jjaaQYRQOUYFU8PCTTQmELCzRAFGlphVYSEhK5dKMEQ6lADg4wAgD/0CAbSKIBLPBQIBw0oAkJaIAGINCACZCyIJJswPZoUgEPNGBVfMJGRBAwApNEqgkIkNIvv1MBPM5EJRnIQANWUIEMBGAfSXIVHnBQEjoAwBvBdMMO4vJLtmjGBbR8QAy08wlEktNobNhBFNDRhkwSogEPoEElrJCOD/EgB7DojCPb6SVt+KeU9dAAbMZhgE1Ucwc6KotwXBKI2jRhDUQxSUN20MkAlCCTCThCeSowR6pQYQsemJCpVuALKDVANUTIEAC6MQEa/PIABYpFAzilgBgEgh8YjUpJTILRHOCKG7Ng5ZHG04xyEvVnzuSke/hhFRd4oxiw/FN3pAGbaeQz/y2NxMwPVuDPGKCypgfoxzfc6Zw8vaGRRCJGVEIyHgWopJ47UEAxAqCSHBQCB6mwAQTmsRpwTEBCz5RMIw0pBl6WogEkCEQMdqkAahhQATsIxwT+AEoYrMAFTyBCA1wAgx3Y1aBhsIBTmsBJeXAFlGQsKmplNgFMqGRFDYhBaM6AnGpI46MLSss9qfHMfQSmCqRsAlePowEq2oOrDygJVt1Ayx20kRl0zewPOCsYUXgWG2kcxj6GUJ5CECUOKUUCrk65Smno1hmnMiw34oAEHPBzQTFwiyrYWc9OzmIHNuCGduN5lAagaLT2lSQgUytgmHGkkY1EAQIaEIVOaoORcf/JQmsHywNvUvWZjDzoD1R5nJLAAAesKQmFDFxLlwRgAsl9ZSPJcIBZ7DIrD+EvO7mBAg38qHskAFEAvlcSDEvEBrgCx3w4WQ4SpHcSHHVPMrwD4By04aPvqa8NwDHjH2VhtWvxbxJCQcwBc3ll1IgBAirwFEaeyR5JxbApJJqHo+S2qheG0g7UPItTsqEBzOQHnxhqE1D+IRAkOGUmYRmKQF93IB5AJglCAYEz8AIlr72JKrWCCXCQoByb4QYZThkNanxUojt6LRtKMguqBAA2yNzEZsMxFMCwNM5z7TKsX8YDFJRBAQmwQAJQ9AAZXdQlGiiBC8DcmatoAAWcilS6r6E0gWCXYQQZCLYTbGCUAEi7JhJJ0jPiEIMMGCABnEoAtxNQAQNcxQIQ2BAC5DOBR5TYBS+tiQEyYFc35DohfpACHT5EJB6sIAe0/oEGJkDkK5KbEHatwLnXUoEYoMAGeOWBAUjwhvyANdYWxyAp88EDICrsDQ++OMgpiIASJKYCpxUYAlBw4pCzvOUufznMYy7zmdO85ja/Oc5zrvOd87znPv850IMu9KETvehGPzrSk670pTO9cUEAADs=&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/documents${__javaScript(encodeURIComponent(&apos;|scan|address&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="addressId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">addressId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),&quot;appId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">addressId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - VerifyDocs - CABLE_OR_INTERNET_BILL" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;proofDocument&quot;:{&quot;documentType&quot;:&quot;CABLE_OR_INTERNET_BILL&quot;,&quot;data&quot;:{&quot;clearDocument&quot;:&quot;YES&quot;,&quot;fakeDocument&quot;:&quot;NO&quot;,&quot;applicantNameMatch&quot;:&quot;YES&quot;,&quot;applicationAddressMatch&quot;:&quot;YES&quot;,&quot;dateOnDocument&quot;:&quot;2017-09-25T21:20:06.064Z&quot;},&quot;images&quot;:[${addressId}]}}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/t/${tenantId}/api/v1/appflow/loanapp/${loanappId}/verification${__javaScript(encodeURIComponent(&apos;|documents&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Agent login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;testagent@${tenantname_1}.com&quot;,&quot;password&quot;:&quot;Password1&quot;}&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">refreshToken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">bearer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">bearer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get notification start" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/t/${tenantId}/api/v1/appflow/loanapp/${loanappId}/notification${__javaScript(encodeURIComponent(&apos;|start&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">productCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;productCode&quot;:&quot;(.+?)&quot;,&quot;loanProductInputRules&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">productCode</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="loanProductInputRules" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">loanProductInputRules</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;loanProductInputRules&quot;:&quot;(.+?)&quot;}</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">loanProductInputRules</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Get Notification payment days Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get notification payment days" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;lastPaycheckDate&quot;:&quot;2017-11-23T17:50:21.518Z&quot;,&quot;paymentFrequency&quot;:&quot;BI_WEEKLY&quot;,&quot;productCode&quot;:&quot;TX&quot;}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/t/${tenantId}/api/v1/loans/validPaymentDays</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname"></stringProp>
              <stringProp name="RegexExtractor.regex"></stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Preapproval Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit notification start" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;notification&quot;:{&quot;selectedLoan&quot;:{&quot;lastPaycheckDate&quot;:${TodaysDate},&quot;locationId&quot;:1147,&quot;disbursementDate&quot;:${TodaysDate},&quot;amount&quot;:${approvedLoanAmount},&quot;loanProductInputRules&quot;:&quot;${loanProductInputRules}&quot;,&quot;productCode&quot;:&quot;${productCode}&quot;,&quot;paymentFrequency&quot;:&quot;BI_WEEKLY&quot;,&quot;checkPaymentFrequency&quot;:&quot;BI_WEEKLY&quot;,&quot;term&quot;:${approvedLoanTerm},&quot;paymentDay&quot;:5},&quot;enrollAch&quot;:false},&quot;disbursement&quot;:{&quot;type&quot;:&quot;CASH&quot;,&quot;typeDetails&quot;:null}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/t/${tenantId}/api/v1/appflow/loanapp/${loanappId}/notification${__javaScript(encodeURIComponent(&apos;|start&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Submit Notification Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit notification start" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__FileToString(./files/notification_start.json,,)};</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/t/${tenantId}/api/v1/appflow/loanapp/${loanappId}/notification${__javaScript(encodeURIComponent(&apos;|start&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Submit Notification Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script"></stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - disbursement|loanContract" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;base64Signature&quot;:&quot;data: image/png;base64,&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/disbursement${__javaScript(encodeURIComponent(&apos;|loanContract&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Sign loan contract Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;\n\nAPP ID = &quot; + vars.get(&quot;loanappId&quot;));
System.out.println(&quot;PARTY ID = &quot; + vars.get(&quot;partyId&quot;));
System.out.println(&quot;\n\n ------------------------------------------------------------------ \n\n&quot;));</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If &apos;finalapproval_complete&apos; scope" enabled="true">
          <stringProp name="IfController.condition">&apos;${scope}&apos; == &apos;finalapproval_complete&apos;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Agent login " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;testagent@${tenantname_1}.com&quot;,&quot;password&quot;:&quot;Password1&quot;}&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">refreshToken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Authenticating as &quot; + vars.get(&quot;tenantname_1&quot;) + &quot; agent testagent@&quot; + vars.get(&quot;tenantname_1&quot;) + &quot;.com\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">bearer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">bearer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Starting new app creation.....\n&quot;);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="New loanapp start" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">#loanapp=vars.get(&quot;loanappId&quot;);
#print(ctx.getCurrentSampler().getVars(&quot;loanappId&quot;).toString());</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Start new loanapp Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="loanappId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">loanappId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;appId&quot;:&quot;(.+?)&quot;,&quot;appFlowType&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">loanappId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller- listo prequal submit" enabled="true">
            <stringProp name="IfController.condition">${tenantId} == 102</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Loanapp prequal application- Listo" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;applicant&quot;:{&quot;memberOfArmedForces&quot;:&quot;N&quot;,&quot;EID&quot;:null,&quot;timeZone&quot;:&quot;America/Los_Angeles&quot;,&quot;externalIdNA&quot;:true,&quot;externalId&quot;:null,&quot;isTenantEmployee&quot;:{&quot;flag&quot;:false},&quot;person&quot;:{&quot;firstName&quot;:&quot;stephen&quot;,&quot;lastName&quot;:&quot;curry&quot;,&quot;paternalLastName&quot;:null,&quot;maternalLastName&quot;:null,&quot;middleName&quot;:null,&quot;nameSuffix&quot;:null,&quot;title&quot;:null,&quot;nationality&quot;:null,&quot;gender&quot;:null,&quot;dateOfBirth&quot;:&quot;1980-02-04&quot;,&quot;placeOfBirth&quot;:null,&quot;countryOfBirth&quot;:null,&quot;cityOfBirth&quot;:null,&quot;preferredLanguage&quot;:&quot;en-US&quot;,&quot;ssn&quot;:&quot;425-16-2621&quot;,&quot;ssnNA&quot;:false,&quot;last4Ssn&quot;:null},&quot;email&quot;:{&quot;emailAddress&quot;:&quot;test@listo.com&quot;,&quot;emailAddressNA&quot;:false},&quot;phone&quot;:{&quot;type&quot;:&quot;MOBILE&quot;,&quot;number&quot;:&quot;(415) 555-5555&quot;},&quot;address&quot;:{&quot;address1&quot;:&quot;3223&quot;,&quot;city&quot;:&quot;sdsad&quot;,&quot;state&quot;:&quot;TX&quot;,&quot;postalCode&quot;:&quot;11111&quot;,&quot;since&quot;:&quot;6_TO_12_MONTHS&quot;,&quot;inServiceArea&quot;:false},&quot;statedIncome&quot;:{&quot;amount&quot;:3000,&quot;frequency&quot;:&quot;MONTHLY&quot;},&quot;identification&quot;:{&quot;verifiedByAgent&quot;:null,&quot;isMilitaryID&quot;:null},&quot;payday&quot;:{&quot;statedUsage&quot;:&quot;N&quot;,&quot;actualUsage&quot;:null},&quot;checkCashing&quot;:{&quot;statedUsage&quot;:null,&quot;actualUsage&quot;:null},&quot;insurance&quot;:{&quot;statedUsage&quot;:&quot;N&quot;},&quot;hasBankAccount&quot;:null,&quot;inUSSince&quot;:null,&quot;homeOwnership&quot;:null,&quot;numberOfDependents&quot;:null,&quot;numberOfChildren&quot;:null,&quot;employed&quot;:null,&quot;otherIncome&quot;:null,&quot;incomeSources&quot;:[],&quot;payTransactionType&quot;:null,&quot;payCheckDestination&quot;:null,&quot;monthlyExpenses&quot;:{&quot;housing&quot;:null,&quot;car&quot;:null,&quot;phone&quot;:null,&quot;utilities&quot;:null,&quot;otherExpenses&quot;:[]},&quot;hasExistingLoans&quot;:null,&quot;existingLoans&quot;:[],&quot;references&quot;:[],&quot;preferences&quot;:{&quot;smsMmsConsent&quot;:false},&quot;disclosureDocument&quot;:{&quot;base64Signature&quot;:null,&quot;signatureDate&quot;:null,&quot;timestamp&quot;:null,&quot;boxKey&quot;:null},&quot;documents&quot;:[],&quot;images&quot;:[]}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/prequalification${__javaScript(encodeURIComponent(&apos;|application&apos;))}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Prequal Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Loanapp prequal start- Listo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__FileToString(./files/prequal_listo_start.json,,)};</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/prequalification${__javaScript(encodeURIComponent(&apos;|application&apos;))}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Prequal Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">${tenantId} != 102</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp prequal application" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;applicant&quot;:{&quot;timeZone&quot;:&quot;America/Los_Angeles&quot;,&quot;externalId&quot;:&quot;VQzyuxRmgy${externalId}&quot;,&quot;payday&quot;:{&quot;statedUsage&quot;:true,&quot;actualUsage&quot;:false},&quot;checkCashing&quot;:{&quot;statedUsage&quot;:false,&quot;actualUsage&quot;:false},&quot;person&quot;:{&quot;firstName&quot;:&quot;FIRSTTEST&quot;,&quot;lastName&quot;:&quot;LASTTEST&quot;,&quot;dateOfBirth&quot;:&quot;1983-05-01&quot;,&quot;preferredLanguage&quot;:&quot;en-US&quot;,&quot;ssn&quot;:&quot;686-14-6505&quot;,&quot;ssnNA&quot;:false},&quot;email&quot;:{&quot;emailAddress&quot;:&quot;jdoe@example.com&quot;,&quot;emailAddressNA&quot;:false},&quot;phone&quot;:{&quot;type&quot;:&quot;MOBILE&quot;,&quot;number&quot;:&quot;(415) 333-5555&quot;},&quot;address&quot;:{&quot;address1&quot;:&quot;CA Address&quot;,&quot;city&quot;:&quot;San Francisco&quot;,&quot;state&quot;:&quot;TX&quot;,&quot;postalCode&quot;:11111,&quot;since&quot;:&quot;6_TO_12_MONTHS&quot;,&quot;inServiceArea&quot;:true},&quot;statedIncome&quot;:{&quot;amount&quot;:5000,&quot;frequency&quot;:&quot;MONTHLY&quot;},&quot;memberOfArmedForces&quot;:&quot;N&quot;}}&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/prequalification${__javaScript(encodeURIComponent(&apos;|application&apos;))}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Prequal Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="loanapp prequal start" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__FileToString(./files/prequal_start.json,,)};&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/prequalification${__javaScript(encodeURIComponent(&apos;|application&apos;))}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Prequal Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Loanapp prequal authorization" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;applicant&quot;:{&quot;preferences&quot;:{&quot;smsMmsConsent&quot;:true}},&quot;loanApplicationSummary&quot;:{&quot;preQualification&quot;:{&quot;applicant&quot;:{&quot;authorized&quot;:&quot;Y&quot;}}}}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/prequalification${__javaScript(encodeURIComponent(&apos;|authorization&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Prequal Authorization Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp preapproval start" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"> {&quot;applicant&quot;:{&quot;hasBankAccount&quot;:&quot;N&quot;,&quot;inUSSince&quot;:&quot;ONE_TO_TWO_YEARS&quot;,&quot;homeOwnership&quot;:&quot;OWN&quot;,&quot;numberOfDependents&quot;:&quot;0&quot;,&quot;numberOfChildren&quot;:&quot;0&quot;,&quot;employed&quot;:&quot;Y&quot;,&quot;otherIncome&quot;:&quot;N&quot;,&quot;incomeSources&quot;:[{&quot;selfEmployed&quot;:&quot;N&quot;,&quot;incomeType&quot;:&quot;AGRICULTURE_FARMING&quot;,&quot;employerName&quot;:&quot;dsfg&quot;,&quot;since&quot;:&quot;LESS_THAN_6_MONTHS&quot;,&quot;incomeFrequency&quot;:&quot;MONTHLY&quot;,&quot;takeHomeAmount&quot;:&quot;5000&quot;}],&quot;payTransactionType&quot;:&quot;DIRECT_DEPOSIT&quot;,&quot;payCheckDestination&quot;:null,&quot;monthlyExpenses&quot;:{&quot;housing&quot;:&quot;0&quot;,&quot;car&quot;:&quot;0&quot;,&quot;phone&quot;:&quot;0&quot;,&quot;utilities&quot;:&quot;0&quot;,&quot;payday&quot;:12,&quot;otherExpenses&quot;:[]}},&quot;preferredLoan&quot;:{&quot;amount&quot;:null,&quot;loanTerm&quot;:null,&quot;paymentAmount&quot;:null,&quot;purpose&quot;:&quot;PAY_BILLS&quot;,&quot;loanPurposeOther&quot;:null}}&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/preapproval${__javaScript(encodeURIComponent(&apos;|start&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Preapproval Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp preapproval start" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__FileToString(./files/preapproval_start.json,,)};&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/preapproval${__javaScript(encodeURIComponent(&apos;|start&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Preapproval Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp preapproval loan selection" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"> {&quot;preferredLoan&quot;:{&quot;amount&quot;:2500,&quot;loanTerm&quot;:12,&quot;paymentAmount&quot;:200}}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/preapproval${__javaScript(encodeURIComponent(&apos;|loanSelection&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Preapproval Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp preapproval loan selection" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__FileToString(./files/preapproval_preferred_loan_selection.json,,)};&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/preapproval${__javaScript(encodeURIComponent(&apos;|loanSelection&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Preferred Loan selection Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp references" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;references&quot;:[{&quot;status&quot;:&quot;NEW&quot;,&quot;fullName&quot;:&quot;CECELIA MCCUIN&quot;,&quot;relationship&quot;:&quot;OTHER&quot;,&quot;phoneNumber&quot;:&quot;(300) 007-7648&quot;},{&quot;status&quot;:&quot;NEW&quot;,&quot;fullName&quot;:&quot;ADALINE ROSENTRATER&quot;,&quot;relationship&quot;:&quot;MANAGER&quot;,&quot;phoneNumber&quot;:&quot;(475) 205-3463&quot;}]}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/references</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Submitting References Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp Identification doc check" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;applicant&quot;:{&quot;identification&quot;:{&quot;verifiedByAgent&quot;:&quot;N&quot;,&quot;isMilitaryID&quot;:&quot;N&quot;}}}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/documents${__javaScript(encodeURIComponent(&apos;|identificationCheck&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Submit ID doc questions Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp submit identification docs" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;capturedImage&quot;:{&quot;captureType&quot;:&quot;IDENTIFICATION&quot;,&quot;base64String&quot;:&quot;&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/documents${__javaScript(encodeURIComponent(&apos;|scan|identification&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="identificationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">identificationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),&quot;appId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">identificationId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Submit ID image Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Root login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;root@insikt.com&quot;,&quot;password&quot;:&quot;password&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">refreshToken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">bearer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">bearer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Preapproval Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit reference verify 0" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"> {&quot;reference&quot;:{&quot;id&quot;:null,&quot;status&quot;:&quot;CONTACTED&quot;,&quot;fullName&quot;:&quot;CARLINE MANKOWSKI&quot;,&quot;relationship&quot;:&quot;OTHER&quot;,&quot;phoneNumber&quot;:&quot;(450) 739-5765&quot;,&quot;address&quot;:{},&quot;questions&quot;:{&quot;doYouKnowApplicant&quot;:&quot;YES&quot;,&quot;howYouKnowHim&quot;:&quot;LANDLORD&quot;,&quot;lendHimMoney&quot;:&quot;YES&quot;,&quot;howManyChildren&quot;:&quot;1&quot;,&quot;whereEmployed&quot;:null,&quot;interestedInLoan&quot;:&quot;YES&quot;}}}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/t/${tenantId}/api/v1/appflow/loanapp/${loanappId}/verification${__javaScript(encodeURIComponent(&apos;|reference|0&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Verify Reference 1 Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit reference verify 1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;reference&quot;:{&quot;id&quot;:null,&quot;status&quot;:&quot;CONTACTED&quot;,&quot;fullName&quot;:&quot;SHERLEY STANDLEY&quot;,&quot;relationship&quot;:&quot;OTHER&quot;,&quot;phoneNumber&quot;:&quot;(248) 596-0183&quot;,&quot;address&quot;:{},&quot;questions&quot;:{&quot;doYouKnowApplicant&quot;:&quot;YES&quot;,&quot;howYouKnowHim&quot;:&quot;LANDLORD&quot;,&quot;lendHimMoney&quot;:&quot;YES&quot;,&quot;howManyChildren&quot;:&quot;1&quot;,&quot;whereEmployed&quot;:null,&quot;interestedInLoan&quot;:&quot;YES&quot;}}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/t/${tenantId}/api/v1/appflow/loanapp/${loanappId}/verification${__javaScript(encodeURIComponent(&apos;|reference|1&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Submit Reference 2 Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit doc verify ID US_DRIVERS_LICENSE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;proofDocument&quot;:{&quot;documentType&quot;:&quot;US_DRIVERS_LICENSE&quot;,&quot;data&quot;:{&quot;IDDOBMatch&quot;:&quot;YES&quot;,&quot;IDExpireDate&quot;:&quot;${IdExpiryDate}&quot;,&quot;IDNameMatch&quot;:&quot;YES&quot;,&quot;IDNumber&quot;:&quot;9250712645&quot;,&quot;applicationAddressMatch&quot;:&quot;YES&quot;,&quot;countryDivision&quot;:&quot;CA&quot;,&quot;damagedDoc&quot;:&quot;NO&quot;,&quot;fakeDocument&quot;:&quot;NO&quot;,&quot;hasIDNumber&quot;:&quot;YES&quot;,&quot;photoID&quot;:&quot;YES&quot;,&quot;photoIDMatchesPhoto&quot;:&quot;YES&quot;,&quot;programs&quot;:{&quot;photoRequired&quot;:true},&quot;usableID&quot;:&quot;YES&quot;},&quot;images&quot;:[${identificationId}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/t/${tenantId}/api/v1/appflow/loanapp/${loanappId}/verification${__javaScript(encodeURIComponent(&apos;|documents&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="greencardid" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">greencardid</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),&quot;appId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">greencardid</stringProp>
              <stringProp name="RegexExtractor.match_number">3</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat; 
import java.util.Date; 

// You need to define ${InDays} as how many days forward/back you want to go
int IdExpDays = Integer.valueOf(vars.get(&quot;DaysExpiryId&quot;));


Date dateIdExp = new Date(); 
dateIdExp.setDate(dateIdExp.getDate() + IdExpDays); 
SimpleDateFormat df  = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS&apos;Z&apos;&quot;); 
String formattedDate = df.format(dateIdExp); 
// Resulting date will be in ${FutureDate}
vars.put(&quot;IdExpiryDate&quot;,formattedDate);




</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Verify ID doc(US Driver&apos;s license) Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Agent login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;testagent@${tenantname_1}.com&quot;,&quot;password&quot;:&quot;Password1&quot;}&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">refreshToken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">bearer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">bearer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp submit photo docs" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;capturedImage&quot;:{&quot;captureType&quot;:&quot;PHOTO&quot;,&quot;base64String&quot;:&quot;&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/documents${__javaScript(encodeURIComponent(&apos;|scan|photo&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="photoId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">photoId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),&quot;appId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">photoId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Submit Personal Photo image Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Root login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;root@insikt.com&quot;,&quot;password&quot;:&quot;password&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">refreshToken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">bearer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">bearer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit doc verify Photo" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"> {&quot;proofDocument&quot;:{&quot;documentType&quot;:&quot;PHOTO&quot;,&quot;data&quot;:{&quot;isPhotoFake&quot;:&quot;NO&quot;,&quot;isPhotoUseable&quot;:&quot;YES&quot;},&quot;images&quot;:[${photoId}]}}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/t/${tenantId}/api/v1/appflow/loanapp/${loanappId}/verification${__javaScript(encodeURIComponent(&apos;|documents&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Verify Personal Photo Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Agent login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;testagent@${tenantname_1}.com&quot;,&quot;password&quot;:&quot;Password1&quot;}&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">refreshToken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">bearer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">bearer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp submit Income docs" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;capturedImage&quot;:{&quot;captureType&quot;:&quot;INCOME&quot;,&quot;base64String&quot;:&quot;&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/documents${__javaScript(encodeURIComponent(&apos;|scan|income&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="incomeId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">incomeId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),&quot;appId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">incomeId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Submit Income image Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Root login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;root@insikt.com&quot;,&quot;password&quot;:&quot;password&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">refreshToken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">bearer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">bearer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit doc verify Income BANK_TRANSACTION_HISTORY" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;proofDocument&quot;:{&quot;documentType&quot;:&quot;BANK_TRANSACTION_HISTORY&quot;,&quot;data&quot;:{&quot;clearDocument&quot;:&quot;YES&quot;,&quot;fakeDocument&quot;:&quot;NO&quot;,&quot;applicantNameMatch&quot;:&quot;YES&quot;,&quot;applicationAddressMatch&quot;:&quot;YES&quot;,&quot;bankName&quot;:&quot;MlsXS&quot;,&quot;mostRecentTransactionDate&quot;:&quot;${RecentTxnDate}&quot;,&quot;oldestTransactionDate&quot;:&quot;${OldestTxnDate}&quot;,&quot;anyDepositTransactions&quot;:&quot;NO&quot;,&quot;maximumBalance&quot;:&quot;29491&quot;,&quot;minimumBalance&quot;:&quot;82306&quot;,&quot;overdrafts&quot;:&quot;NO&quot;,&quot;netIncome&quot;:&quot;37441&quot;,&quot;grossIncome&quot;:&quot;60785&quot;,&quot;transactions&quot;:[{&quot;transactionAmount&quot;:4000,&quot;transactionDate&quot;:&quot;2017-04-25T21:20:06.065Z&quot;},{&quot;transactionAmount&quot;:4000,&quot;transactionDate&quot;:&quot;2017-03-26T21:20:06.065Z&quot;},{&quot;transactionAmount&quot;:4000,&quot;transactionDate&quot;:&quot;2017-02-24T22:20:06.065Z&quot;}]},&quot;images&quot;:[${incomeId}]}}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/t/${tenantId}/api/v1/appflow/loanapp/${loanappId}/verification${__javaScript(encodeURIComponent(&apos;|documents&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat; 
import java.util.Date; 

// You need to define ${InDays} as how many days forward/back you want to go
//int InDays = Integer.valueOf(vars.get(&quot;InDays&quot;));
int RecentDays = 10;
int OldestDays = 75;

Date dateRecent = new Date(); 
dateRecent.setDate(dateRecent.getDate() - RecentDays); 
SimpleDateFormat df1  = new SimpleDateFormat(&quot;yyyy-MM-dd\&apos;T\&apos;hh:mm:ss.SSS\&apos;Z\&apos;&quot;);
df1.setTimeZone(TimeZone.getTimeZone(&quot;GMT&quot;)); 
String formattedRecentDate = df1.format(dateRecent); 

Date dateOldest = new Date(); 
dateOldest.setDate(dateOldest.getDate() - OldestDays); 
SimpleDateFormat df2  = new SimpleDateFormat(&quot;yyyy-MM-dd\&apos;T\&apos;hh:mm:ss.SSS\&apos;Z\&apos;&quot;);
df2.setTimeZone(TimeZone.getTimeZone(&quot;GMT&quot;)); 
String formattedOldestDate = df2.format(dateOldest); 

// Resulting date will be in ${FutureDate}
vars.put(&quot;recentTxnDate&quot;,formattedRecentDate);
vars.put(&quot;oldestTxnDate&quot;,formattedOldestDate);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Verify income doc(Bank transaction history) Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat; 
import java.util.Date; 

// You need to define ${InDays} as how many days forward/back you want to go

int TxnDate1 = Integer.valueOf(vars.get(&quot;DaysInPastNewestTxn&quot;));
int TxnDate2 = Integer.valueOf(vars.get(&quot;DaysInPastOldestTxn&quot;));


Date dateTxn1 = new Date();
dateTxn1.setDate(dateTxn1.getDate() - TxnDate1);
SimpleDateFormat df1 = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS&apos;Z&apos;&quot;);
String formattedDate1= df1.format(dateTxn1);
vars.put(&quot;RecentTxnDate&quot;,formattedDate1);

Date dateTxn2 = new Date();
dateTxn2.setDate(dateTxn2.getDate() - TxnDate2);
SimpleDateFormat df2 = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS&apos;Z&apos;&quot;);
String formattedDate2= df2.format(dateTxn2);
vars.put(&quot;OldestTxnDate&quot;,formattedDate2);


</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regex- approved loan amount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">approvedLoanAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;approvedLoan&quot;:{&quot;amount&quot;:(.+?),&quot;term&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regex- approved loan term" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">approvedLoanTerm</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;approvedLoan&quot;:{&quot;amount&quot;:(.+?),&quot;term&quot;:(.+?),&quot;paymentAmount&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">partyId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;EID&quot;:(.+?),&quot;timeZone&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;\n\nAPP ID = &quot; + vars.get(&quot;loanappId&quot;));
System.out.println(&quot;PARTY ID = &quot; + vars.get(&quot;partyId&quot;));
System.out.println(&quot;\n\n ------------------------------------------------------------------ \n\n&quot;));</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - App flow loanapp documents|scan|address" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;capturedImage&quot;:{&quot;captureType&quot;:&quot;ADDRESS&quot;,&quot;base64String&quot;:&quot;&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/documents${__javaScript(encodeURIComponent(&apos;|scan|address&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="addressId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">addressId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),&quot;appId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">addressId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - VerifyDocs - CABLE_OR_INTERNET_BILL" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;proofDocument&quot;:{&quot;documentType&quot;:&quot;CABLE_OR_INTERNET_BILL&quot;,&quot;data&quot;:{&quot;clearDocument&quot;:&quot;YES&quot;,&quot;fakeDocument&quot;:&quot;NO&quot;,&quot;applicantNameMatch&quot;:&quot;YES&quot;,&quot;applicationAddressMatch&quot;:&quot;YES&quot;,&quot;dateOnDocument&quot;:&quot;2017-09-25T21:20:06.064Z&quot;},&quot;images&quot;:[${addressId}]}}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/t/${tenantId}/api/v1/appflow/loanapp/${loanappId}/verification${__javaScript(encodeURIComponent(&apos;|documents&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If &apos;submit_docs&apos; scope" enabled="true">
          <stringProp name="IfController.condition">&apos;${scope}&apos; == &apos;submit_docs&apos;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Agent login " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;testagent@${tenantname_1}.com&quot;,&quot;password&quot;:&quot;Password1&quot;}&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">refreshToken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Authenticating as &quot; + vars.get(&quot;tenantname_1&quot;) + &quot; agent testagent@&quot; + vars.get(&quot;tenantname_1&quot;) + &quot;.com\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">bearer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">bearer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Starting new app creation.....\n&quot;);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="New loanapp start" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">#loanapp=vars.get(&quot;loanappId&quot;);
#print(ctx.getCurrentSampler().getVars(&quot;loanappId&quot;).toString());</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Start new loanapp Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="loanappId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">loanappId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;appId&quot;:&quot;(.+?)&quot;,&quot;appFlowType&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">loanappId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller- listo prequal submit" enabled="true">
            <stringProp name="IfController.condition">${tenantId} == 102</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Loanapp prequal application- Listo" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;applicant&quot;:{&quot;memberOfArmedForces&quot;:&quot;N&quot;,&quot;EID&quot;:null,&quot;timeZone&quot;:&quot;America/Los_Angeles&quot;,&quot;externalIdNA&quot;:true,&quot;externalId&quot;:null,&quot;isTenantEmployee&quot;:{&quot;flag&quot;:false},&quot;person&quot;:{&quot;firstName&quot;:&quot;stephen&quot;,&quot;lastName&quot;:&quot;curry&quot;,&quot;paternalLastName&quot;:null,&quot;maternalLastName&quot;:null,&quot;middleName&quot;:null,&quot;nameSuffix&quot;:null,&quot;title&quot;:null,&quot;nationality&quot;:null,&quot;gender&quot;:null,&quot;dateOfBirth&quot;:&quot;1980-02-04&quot;,&quot;placeOfBirth&quot;:null,&quot;countryOfBirth&quot;:null,&quot;cityOfBirth&quot;:null,&quot;preferredLanguage&quot;:&quot;en-US&quot;,&quot;ssn&quot;:&quot;425-16-2621&quot;,&quot;ssnNA&quot;:false,&quot;last4Ssn&quot;:null},&quot;email&quot;:{&quot;emailAddress&quot;:&quot;test@listo.com&quot;,&quot;emailAddressNA&quot;:false},&quot;phone&quot;:{&quot;type&quot;:&quot;MOBILE&quot;,&quot;number&quot;:&quot;(415) 555-5555&quot;},&quot;address&quot;:{&quot;address1&quot;:&quot;3223&quot;,&quot;city&quot;:&quot;sdsad&quot;,&quot;state&quot;:&quot;TX&quot;,&quot;postalCode&quot;:&quot;11111&quot;,&quot;since&quot;:&quot;6_TO_12_MONTHS&quot;,&quot;inServiceArea&quot;:false},&quot;statedIncome&quot;:{&quot;amount&quot;:3000,&quot;frequency&quot;:&quot;MONTHLY&quot;},&quot;identification&quot;:{&quot;verifiedByAgent&quot;:null,&quot;isMilitaryID&quot;:null},&quot;payday&quot;:{&quot;statedUsage&quot;:&quot;N&quot;,&quot;actualUsage&quot;:null},&quot;checkCashing&quot;:{&quot;statedUsage&quot;:null,&quot;actualUsage&quot;:null},&quot;insurance&quot;:{&quot;statedUsage&quot;:&quot;N&quot;},&quot;hasBankAccount&quot;:null,&quot;inUSSince&quot;:null,&quot;homeOwnership&quot;:null,&quot;numberOfDependents&quot;:null,&quot;numberOfChildren&quot;:null,&quot;employed&quot;:null,&quot;otherIncome&quot;:null,&quot;incomeSources&quot;:[],&quot;payTransactionType&quot;:null,&quot;payCheckDestination&quot;:null,&quot;monthlyExpenses&quot;:{&quot;housing&quot;:null,&quot;car&quot;:null,&quot;phone&quot;:null,&quot;utilities&quot;:null,&quot;otherExpenses&quot;:[]},&quot;hasExistingLoans&quot;:null,&quot;existingLoans&quot;:[],&quot;references&quot;:[],&quot;preferences&quot;:{&quot;smsMmsConsent&quot;:false},&quot;disclosureDocument&quot;:{&quot;base64Signature&quot;:null,&quot;signatureDate&quot;:null,&quot;timestamp&quot;:null,&quot;boxKey&quot;:null},&quot;documents&quot;:[],&quot;images&quot;:[]}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/prequalification${__javaScript(encodeURIComponent(&apos;|application&apos;))}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Prequal Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Loanapp prequal start- Listo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__FileToString(./files/prequal_listo_start.json,,)};</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/prequalification${__javaScript(encodeURIComponent(&apos;|application&apos;))}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Prequal Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">${tenantId} != 102</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp prequal application" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;applicant&quot;:{&quot;timeZone&quot;:&quot;America/Los_Angeles&quot;,&quot;externalId&quot;:&quot;VQzyuxRmgy${externalId}&quot;,&quot;payday&quot;:{&quot;statedUsage&quot;:true,&quot;actualUsage&quot;:false},&quot;checkCashing&quot;:{&quot;statedUsage&quot;:false,&quot;actualUsage&quot;:false},&quot;person&quot;:{&quot;firstName&quot;:&quot;FIRSTTEST&quot;,&quot;lastName&quot;:&quot;LASTTEST&quot;,&quot;dateOfBirth&quot;:&quot;1983-05-01&quot;,&quot;preferredLanguage&quot;:&quot;en-US&quot;,&quot;ssn&quot;:&quot;686-14-6505&quot;,&quot;ssnNA&quot;:false},&quot;email&quot;:{&quot;emailAddress&quot;:&quot;jdoe@example.com&quot;,&quot;emailAddressNA&quot;:false},&quot;phone&quot;:{&quot;type&quot;:&quot;MOBILE&quot;,&quot;number&quot;:&quot;(415) 333-5555&quot;},&quot;address&quot;:{&quot;address1&quot;:&quot;CA Address&quot;,&quot;city&quot;:&quot;San Francisco&quot;,&quot;state&quot;:&quot;TX&quot;,&quot;postalCode&quot;:11111,&quot;since&quot;:&quot;6_TO_12_MONTHS&quot;,&quot;inServiceArea&quot;:true},&quot;statedIncome&quot;:{&quot;amount&quot;:5000,&quot;frequency&quot;:&quot;MONTHLY&quot;},&quot;memberOfArmedForces&quot;:&quot;N&quot;}}&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/prequalification${__javaScript(encodeURIComponent(&apos;|application&apos;))}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Prequal Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="loanapp prequal start" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__FileToString(./files/prequal_start.json,,)};&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/prequalification${__javaScript(encodeURIComponent(&apos;|application&apos;))}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Prequal Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Loanapp prequal authorization" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;applicant&quot;:{&quot;preferences&quot;:{&quot;smsMmsConsent&quot;:true}},&quot;loanApplicationSummary&quot;:{&quot;preQualification&quot;:{&quot;applicant&quot;:{&quot;authorized&quot;:&quot;Y&quot;}}}}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/prequalification${__javaScript(encodeURIComponent(&apos;|authorization&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Prequal Authorization Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp preapproval start" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"> {&quot;applicant&quot;:{&quot;hasBankAccount&quot;:&quot;N&quot;,&quot;inUSSince&quot;:&quot;ONE_TO_TWO_YEARS&quot;,&quot;homeOwnership&quot;:&quot;OWN&quot;,&quot;numberOfDependents&quot;:&quot;0&quot;,&quot;numberOfChildren&quot;:&quot;0&quot;,&quot;employed&quot;:&quot;Y&quot;,&quot;otherIncome&quot;:&quot;N&quot;,&quot;incomeSources&quot;:[{&quot;selfEmployed&quot;:&quot;N&quot;,&quot;incomeType&quot;:&quot;AGRICULTURE_FARMING&quot;,&quot;employerName&quot;:&quot;dsfg&quot;,&quot;since&quot;:&quot;LESS_THAN_6_MONTHS&quot;,&quot;incomeFrequency&quot;:&quot;MONTHLY&quot;,&quot;takeHomeAmount&quot;:&quot;5000&quot;}],&quot;payTransactionType&quot;:&quot;DIRECT_DEPOSIT&quot;,&quot;payCheckDestination&quot;:null,&quot;monthlyExpenses&quot;:{&quot;housing&quot;:&quot;0&quot;,&quot;car&quot;:&quot;0&quot;,&quot;phone&quot;:&quot;0&quot;,&quot;utilities&quot;:&quot;0&quot;,&quot;payday&quot;:12,&quot;otherExpenses&quot;:[]}},&quot;preferredLoan&quot;:{&quot;amount&quot;:null,&quot;loanTerm&quot;:null,&quot;paymentAmount&quot;:null,&quot;purpose&quot;:&quot;PAY_BILLS&quot;,&quot;loanPurposeOther&quot;:null}}&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/preapproval${__javaScript(encodeURIComponent(&apos;|start&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Preapproval Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp preapproval start" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__FileToString(./files/preapproval_start.json,,)};&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/preapproval${__javaScript(encodeURIComponent(&apos;|start&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Preapproval Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp preapproval loan selection" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"> {&quot;preferredLoan&quot;:{&quot;amount&quot;:2500,&quot;loanTerm&quot;:12,&quot;paymentAmount&quot;:200}}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/preapproval${__javaScript(encodeURIComponent(&apos;|loanSelection&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Preapproval Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp preapproval loan selection" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__FileToString(./files/preapproval_preferred_loan_selection.json,,)};&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/preapproval${__javaScript(encodeURIComponent(&apos;|loanSelection&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Preferred Loan selection Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp references" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;references&quot;:[{&quot;status&quot;:&quot;NEW&quot;,&quot;fullName&quot;:&quot;CECELIA MCCUIN&quot;,&quot;relationship&quot;:&quot;OTHER&quot;,&quot;phoneNumber&quot;:&quot;(300) 007-7648&quot;},{&quot;status&quot;:&quot;NEW&quot;,&quot;fullName&quot;:&quot;ADALINE ROSENTRATER&quot;,&quot;relationship&quot;:&quot;MANAGER&quot;,&quot;phoneNumber&quot;:&quot;(475) 205-3463&quot;}]}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/references</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Submitting References Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp Identification doc check" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;applicant&quot;:{&quot;identification&quot;:{&quot;verifiedByAgent&quot;:&quot;N&quot;,&quot;isMilitaryID&quot;:&quot;N&quot;}}}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/documents${__javaScript(encodeURIComponent(&apos;|identificationCheck&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Submit ID doc questions Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp submit identification docs" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;capturedImage&quot;:{&quot;captureType&quot;:&quot;IDENTIFICATION&quot;,&quot;base64String&quot;:&quot;&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/documents${__javaScript(encodeURIComponent(&apos;|scan|identification&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="identificationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">identificationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),&quot;appId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">identificationId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Submit ID image Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Root login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;root@insikt.com&quot;,&quot;password&quot;:&quot;password&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">refreshToken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">bearer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">bearer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Preapproval Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit reference verify 0" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"> {&quot;reference&quot;:{&quot;id&quot;:null,&quot;status&quot;:&quot;CONTACTED&quot;,&quot;fullName&quot;:&quot;CARLINE MANKOWSKI&quot;,&quot;relationship&quot;:&quot;OTHER&quot;,&quot;phoneNumber&quot;:&quot;(450) 739-5765&quot;,&quot;address&quot;:{},&quot;questions&quot;:{&quot;doYouKnowApplicant&quot;:&quot;YES&quot;,&quot;howYouKnowHim&quot;:&quot;LANDLORD&quot;,&quot;lendHimMoney&quot;:&quot;YES&quot;,&quot;howManyChildren&quot;:&quot;1&quot;,&quot;whereEmployed&quot;:null,&quot;interestedInLoan&quot;:&quot;YES&quot;}}}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/t/${tenantId}/api/v1/appflow/loanapp/${loanappId}/verification${__javaScript(encodeURIComponent(&apos;|reference|0&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Verify Reference 1 Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit reference verify 1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;reference&quot;:{&quot;id&quot;:null,&quot;status&quot;:&quot;CONTACTED&quot;,&quot;fullName&quot;:&quot;SHERLEY STANDLEY&quot;,&quot;relationship&quot;:&quot;OTHER&quot;,&quot;phoneNumber&quot;:&quot;(248) 596-0183&quot;,&quot;address&quot;:{},&quot;questions&quot;:{&quot;doYouKnowApplicant&quot;:&quot;YES&quot;,&quot;howYouKnowHim&quot;:&quot;LANDLORD&quot;,&quot;lendHimMoney&quot;:&quot;YES&quot;,&quot;howManyChildren&quot;:&quot;1&quot;,&quot;whereEmployed&quot;:null,&quot;interestedInLoan&quot;:&quot;YES&quot;}}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/t/${tenantId}/api/v1/appflow/loanapp/${loanappId}/verification${__javaScript(encodeURIComponent(&apos;|reference|1&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Submit Reference 2 Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Agent login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;testagent@${tenantname_1}.com&quot;,&quot;password&quot;:&quot;Password1&quot;}&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">refreshToken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">bearer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">bearer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp submit photo docs" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;capturedImage&quot;:{&quot;captureType&quot;:&quot;PHOTO&quot;,&quot;base64String&quot;:&quot;&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/documents${__javaScript(encodeURIComponent(&apos;|scan|photo&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="photoId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">photoId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),&quot;appId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">photoId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Submit Personal Photo image Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp submit Income docs" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;capturedImage&quot;:{&quot;captureType&quot;:&quot;INCOME&quot;,&quot;base64String&quot;:&quot;&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/documents${__javaScript(encodeURIComponent(&apos;|scan|income&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="incomeId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">incomeId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),&quot;appId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">incomeId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Submit Income image Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;\n\nAPP ID = &quot; + vars.get(&quot;loanappId&quot;));
System.out.println(&quot;PARTY ID = &quot; + vars.get(&quot;partyId&quot;));
System.out.println(&quot;\n\n ------------------------------------------------------------------ \n\n&quot;));</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If &apos;prequal_complete&apos; scope" enabled="true">
          <stringProp name="IfController.condition">&apos;${scope}&apos; == &apos;prequal_complete&apos;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Agent login " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;testagent@${tenantname_1}.com&quot;,&quot;password&quot;:&quot;Password1&quot;}&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">refreshToken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Authenticating as &quot; + vars.get(&quot;tenantname_1&quot;) + &quot; agent testagent@&quot; + vars.get(&quot;tenantname_1&quot;) + &quot;.com\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">bearer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">bearer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Starting new app creation.....\n&quot;);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="New loanapp start" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">#loanapp=vars.get(&quot;loanappId&quot;);
#print(ctx.getCurrentSampler().getVars(&quot;loanappId&quot;).toString());</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Start new loanapp Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="loanappId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">loanappId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;appId&quot;:&quot;(.+?)&quot;,&quot;appFlowType&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">loanappId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller- listo prequal submit" enabled="true">
            <stringProp name="IfController.condition">${tenantId} == 102</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Loanapp prequal application- Listo" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;applicant&quot;:{&quot;memberOfArmedForces&quot;:&quot;N&quot;,&quot;EID&quot;:null,&quot;timeZone&quot;:&quot;America/Los_Angeles&quot;,&quot;externalIdNA&quot;:true,&quot;externalId&quot;:null,&quot;isTenantEmployee&quot;:{&quot;flag&quot;:false},&quot;person&quot;:{&quot;firstName&quot;:&quot;stephen&quot;,&quot;lastName&quot;:&quot;curry&quot;,&quot;paternalLastName&quot;:null,&quot;maternalLastName&quot;:null,&quot;middleName&quot;:null,&quot;nameSuffix&quot;:null,&quot;title&quot;:null,&quot;nationality&quot;:null,&quot;gender&quot;:null,&quot;dateOfBirth&quot;:&quot;1980-02-04&quot;,&quot;placeOfBirth&quot;:null,&quot;countryOfBirth&quot;:null,&quot;cityOfBirth&quot;:null,&quot;preferredLanguage&quot;:&quot;en-US&quot;,&quot;ssn&quot;:&quot;425-16-2621&quot;,&quot;ssnNA&quot;:false,&quot;last4Ssn&quot;:null},&quot;email&quot;:{&quot;emailAddress&quot;:&quot;test@listo.com&quot;,&quot;emailAddressNA&quot;:false},&quot;phone&quot;:{&quot;type&quot;:&quot;MOBILE&quot;,&quot;number&quot;:&quot;(415) 555-5555&quot;},&quot;address&quot;:{&quot;address1&quot;:&quot;3223&quot;,&quot;city&quot;:&quot;sdsad&quot;,&quot;state&quot;:&quot;TX&quot;,&quot;postalCode&quot;:&quot;11111&quot;,&quot;since&quot;:&quot;6_TO_12_MONTHS&quot;,&quot;inServiceArea&quot;:false},&quot;statedIncome&quot;:{&quot;amount&quot;:3000,&quot;frequency&quot;:&quot;MONTHLY&quot;},&quot;identification&quot;:{&quot;verifiedByAgent&quot;:null,&quot;isMilitaryID&quot;:null},&quot;payday&quot;:{&quot;statedUsage&quot;:&quot;N&quot;,&quot;actualUsage&quot;:null},&quot;checkCashing&quot;:{&quot;statedUsage&quot;:null,&quot;actualUsage&quot;:null},&quot;insurance&quot;:{&quot;statedUsage&quot;:&quot;N&quot;},&quot;hasBankAccount&quot;:null,&quot;inUSSince&quot;:null,&quot;homeOwnership&quot;:null,&quot;numberOfDependents&quot;:null,&quot;numberOfChildren&quot;:null,&quot;employed&quot;:null,&quot;otherIncome&quot;:null,&quot;incomeSources&quot;:[],&quot;payTransactionType&quot;:null,&quot;payCheckDestination&quot;:null,&quot;monthlyExpenses&quot;:{&quot;housing&quot;:null,&quot;car&quot;:null,&quot;phone&quot;:null,&quot;utilities&quot;:null,&quot;otherExpenses&quot;:[]},&quot;hasExistingLoans&quot;:null,&quot;existingLoans&quot;:[],&quot;references&quot;:[],&quot;preferences&quot;:{&quot;smsMmsConsent&quot;:false},&quot;disclosureDocument&quot;:{&quot;base64Signature&quot;:null,&quot;signatureDate&quot;:null,&quot;timestamp&quot;:null,&quot;boxKey&quot;:null},&quot;documents&quot;:[],&quot;images&quot;:[]}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/prequalification${__javaScript(encodeURIComponent(&apos;|application&apos;))}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Prequal Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Loanapp prequal start- Listo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__FileToString(./files/prequal_listo_start.json,,)};</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/prequalification${__javaScript(encodeURIComponent(&apos;|application&apos;))}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Prequal Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">${tenantId} != 102</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp prequal application" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;applicant&quot;:{&quot;timeZone&quot;:&quot;America/Los_Angeles&quot;,&quot;externalId&quot;:&quot;VQzyuxRmgy${externalId}&quot;,&quot;payday&quot;:{&quot;statedUsage&quot;:true,&quot;actualUsage&quot;:false},&quot;checkCashing&quot;:{&quot;statedUsage&quot;:false,&quot;actualUsage&quot;:false},&quot;person&quot;:{&quot;firstName&quot;:&quot;FIRSTTEST&quot;,&quot;lastName&quot;:&quot;LASTTEST&quot;,&quot;dateOfBirth&quot;:&quot;1983-05-01&quot;,&quot;preferredLanguage&quot;:&quot;en-US&quot;,&quot;ssn&quot;:&quot;686-14-6505&quot;,&quot;ssnNA&quot;:false},&quot;email&quot;:{&quot;emailAddress&quot;:&quot;jdoe@example.com&quot;,&quot;emailAddressNA&quot;:false},&quot;phone&quot;:{&quot;type&quot;:&quot;MOBILE&quot;,&quot;number&quot;:&quot;(415) 333-5555&quot;},&quot;address&quot;:{&quot;address1&quot;:&quot;CA Address&quot;,&quot;city&quot;:&quot;San Francisco&quot;,&quot;state&quot;:&quot;TX&quot;,&quot;postalCode&quot;:11111,&quot;since&quot;:&quot;6_TO_12_MONTHS&quot;,&quot;inServiceArea&quot;:true},&quot;statedIncome&quot;:{&quot;amount&quot;:5000,&quot;frequency&quot;:&quot;MONTHLY&quot;},&quot;memberOfArmedForces&quot;:&quot;N&quot;}}&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/prequalification${__javaScript(encodeURIComponent(&apos;|application&apos;))}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Prequal Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="loanapp prequal start" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__FileToString(./files/prequal_start.json,,)};&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/prequalification${__javaScript(encodeURIComponent(&apos;|application&apos;))}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Prequal Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Loanapp prequal authorization" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;applicant&quot;:{&quot;preferences&quot;:{&quot;smsMmsConsent&quot;:true}},&quot;loanApplicationSummary&quot;:{&quot;preQualification&quot;:{&quot;applicant&quot;:{&quot;authorized&quot;:&quot;Y&quot;}}}}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/prequalification${__javaScript(encodeURIComponent(&apos;|authorization&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Prequal Authorization Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;\n\nAPP ID = &quot; + vars.get(&quot;loanappId&quot;));
System.out.println(&quot;PARTY ID = &quot; + vars.get(&quot;partyId&quot;));
System.out.println(&quot;\n\n ------------------------------------------------------------------ \n\n&quot;));</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If &apos;start_complete&apos; scope" enabled="true">
          <stringProp name="IfController.condition">&apos;${scope}&apos; == &apos;start_complete&apos;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Agent login " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;testagent@${tenantname_1}.com&quot;,&quot;password&quot;:&quot;Password1&quot;}&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">refreshToken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Authenticating as &quot; + vars.get(&quot;tenantname_1&quot;) + &quot; agent testagent@&quot; + vars.get(&quot;tenantname_1&quot;) + &quot;.com\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">bearer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">bearer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Starting new app creation.....\n&quot;);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="New loanapp start" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">#loanapp=vars.get(&quot;loanappId&quot;);
#print(ctx.getCurrentSampler().getVars(&quot;loanappId&quot;).toString());</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Start new loanapp Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="loanappId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">loanappId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;appId&quot;:&quot;(.+?)&quot;,&quot;appFlowType&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">loanappId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;\n\nAPP ID = &quot; + vars.get(&quot;loanappId&quot;));
System.out.println(&quot;PARTY ID = &quot; + vars.get(&quot;partyId&quot;));
System.out.println(&quot;\n\n ------------------------------------------------------------------ \n\n&quot;));</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If &apos;notification_complete&apos; scope" enabled="true">
          <stringProp name="IfController.condition">&apos;${scope}&apos;== &apos;notification_complete&apos;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Agent login " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;testagent@${tenantname_1}.com&quot;,&quot;password&quot;:&quot;Password1&quot;}&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">refreshToken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Authenticating as &quot; + vars.get(&quot;tenantname_1&quot;) + &quot; agent testagent@&quot; + vars.get(&quot;tenantname_1&quot;) + &quot;.com\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">bearer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">bearer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Starting new app creation.....\n&quot;);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="New loanapp start" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">#loanapp=vars.get(&quot;loanappId&quot;);
#print(ctx.getCurrentSampler().getVars(&quot;loanappId&quot;).toString());</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Start new loanapp Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="loanappId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">loanappId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;appId&quot;:&quot;(.+?)&quot;,&quot;appFlowType&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">loanappId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller- listo prequal submit" enabled="true">
            <stringProp name="IfController.condition">${tenantId} == 102</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Loanapp prequal application- Listo" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;applicant&quot;:{&quot;memberOfArmedForces&quot;:&quot;N&quot;,&quot;EID&quot;:null,&quot;timeZone&quot;:&quot;America/Los_Angeles&quot;,&quot;externalIdNA&quot;:true,&quot;externalId&quot;:null,&quot;isTenantEmployee&quot;:{&quot;flag&quot;:false},&quot;person&quot;:{&quot;firstName&quot;:&quot;stephen&quot;,&quot;lastName&quot;:&quot;curry&quot;,&quot;paternalLastName&quot;:null,&quot;maternalLastName&quot;:null,&quot;middleName&quot;:null,&quot;nameSuffix&quot;:null,&quot;title&quot;:null,&quot;nationality&quot;:null,&quot;gender&quot;:null,&quot;dateOfBirth&quot;:&quot;1980-02-04&quot;,&quot;placeOfBirth&quot;:null,&quot;countryOfBirth&quot;:null,&quot;cityOfBirth&quot;:null,&quot;preferredLanguage&quot;:&quot;en-US&quot;,&quot;ssn&quot;:&quot;425-16-2621&quot;,&quot;ssnNA&quot;:false,&quot;last4Ssn&quot;:null},&quot;email&quot;:{&quot;emailAddress&quot;:&quot;test@listo.com&quot;,&quot;emailAddressNA&quot;:false},&quot;phone&quot;:{&quot;type&quot;:&quot;MOBILE&quot;,&quot;number&quot;:&quot;(415) 555-5555&quot;},&quot;address&quot;:{&quot;address1&quot;:&quot;3223&quot;,&quot;city&quot;:&quot;sdsad&quot;,&quot;state&quot;:&quot;TX&quot;,&quot;postalCode&quot;:&quot;11111&quot;,&quot;since&quot;:&quot;6_TO_12_MONTHS&quot;,&quot;inServiceArea&quot;:false},&quot;statedIncome&quot;:{&quot;amount&quot;:3000,&quot;frequency&quot;:&quot;MONTHLY&quot;},&quot;identification&quot;:{&quot;verifiedByAgent&quot;:null,&quot;isMilitaryID&quot;:null},&quot;payday&quot;:{&quot;statedUsage&quot;:&quot;N&quot;,&quot;actualUsage&quot;:null},&quot;checkCashing&quot;:{&quot;statedUsage&quot;:null,&quot;actualUsage&quot;:null},&quot;insurance&quot;:{&quot;statedUsage&quot;:&quot;N&quot;},&quot;hasBankAccount&quot;:null,&quot;inUSSince&quot;:null,&quot;homeOwnership&quot;:null,&quot;numberOfDependents&quot;:null,&quot;numberOfChildren&quot;:null,&quot;employed&quot;:null,&quot;otherIncome&quot;:null,&quot;incomeSources&quot;:[],&quot;payTransactionType&quot;:null,&quot;payCheckDestination&quot;:null,&quot;monthlyExpenses&quot;:{&quot;housing&quot;:null,&quot;car&quot;:null,&quot;phone&quot;:null,&quot;utilities&quot;:null,&quot;otherExpenses&quot;:[]},&quot;hasExistingLoans&quot;:null,&quot;existingLoans&quot;:[],&quot;references&quot;:[],&quot;preferences&quot;:{&quot;smsMmsConsent&quot;:false},&quot;disclosureDocument&quot;:{&quot;base64Signature&quot;:null,&quot;signatureDate&quot;:null,&quot;timestamp&quot;:null,&quot;boxKey&quot;:null},&quot;documents&quot;:[],&quot;images&quot;:[]}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/prequalification${__javaScript(encodeURIComponent(&apos;|application&apos;))}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Prequal Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Loanapp prequal start- Listo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__FileToString(./files/prequal_listo_start.json,,)};</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/prequalification${__javaScript(encodeURIComponent(&apos;|application&apos;))}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Prequal Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">${tenantId} != 102</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp prequal application" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;applicant&quot;:{&quot;timeZone&quot;:&quot;America/Los_Angeles&quot;,&quot;externalId&quot;:&quot;VQzyuxRmgy${externalId}&quot;,&quot;payday&quot;:{&quot;statedUsage&quot;:true,&quot;actualUsage&quot;:false},&quot;checkCashing&quot;:{&quot;statedUsage&quot;:false,&quot;actualUsage&quot;:false},&quot;person&quot;:{&quot;firstName&quot;:&quot;FIRSTTEST&quot;,&quot;lastName&quot;:&quot;LASTTEST&quot;,&quot;dateOfBirth&quot;:&quot;1983-05-01&quot;,&quot;preferredLanguage&quot;:&quot;en-US&quot;,&quot;ssn&quot;:&quot;686-14-6505&quot;,&quot;ssnNA&quot;:false},&quot;email&quot;:{&quot;emailAddress&quot;:&quot;jdoe@example.com&quot;,&quot;emailAddressNA&quot;:false},&quot;phone&quot;:{&quot;type&quot;:&quot;MOBILE&quot;,&quot;number&quot;:&quot;(415) 333-5555&quot;},&quot;address&quot;:{&quot;address1&quot;:&quot;CA Address&quot;,&quot;city&quot;:&quot;San Francisco&quot;,&quot;state&quot;:&quot;TX&quot;,&quot;postalCode&quot;:11111,&quot;since&quot;:&quot;6_TO_12_MONTHS&quot;,&quot;inServiceArea&quot;:true},&quot;statedIncome&quot;:{&quot;amount&quot;:5000,&quot;frequency&quot;:&quot;MONTHLY&quot;},&quot;memberOfArmedForces&quot;:&quot;N&quot;}}&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/prequalification${__javaScript(encodeURIComponent(&apos;|application&apos;))}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Prequal Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="loanapp prequal start" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__FileToString(./files/prequal_start.json,,)};&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/prequalification${__javaScript(encodeURIComponent(&apos;|application&apos;))}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Prequal Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Loanapp prequal authorization" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;applicant&quot;:{&quot;preferences&quot;:{&quot;smsMmsConsent&quot;:true}},&quot;loanApplicationSummary&quot;:{&quot;preQualification&quot;:{&quot;applicant&quot;:{&quot;authorized&quot;:&quot;Y&quot;}}}}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/prequalification${__javaScript(encodeURIComponent(&apos;|authorization&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Prequal Authorization Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp preapproval start" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"> {&quot;applicant&quot;:{&quot;hasBankAccount&quot;:&quot;N&quot;,&quot;inUSSince&quot;:&quot;ONE_TO_TWO_YEARS&quot;,&quot;homeOwnership&quot;:&quot;OWN&quot;,&quot;numberOfDependents&quot;:&quot;0&quot;,&quot;numberOfChildren&quot;:&quot;0&quot;,&quot;employed&quot;:&quot;Y&quot;,&quot;otherIncome&quot;:&quot;N&quot;,&quot;incomeSources&quot;:[{&quot;selfEmployed&quot;:&quot;N&quot;,&quot;incomeType&quot;:&quot;AGRICULTURE_FARMING&quot;,&quot;employerName&quot;:&quot;dsfg&quot;,&quot;since&quot;:&quot;LESS_THAN_6_MONTHS&quot;,&quot;incomeFrequency&quot;:&quot;MONTHLY&quot;,&quot;takeHomeAmount&quot;:&quot;5000&quot;}],&quot;payTransactionType&quot;:&quot;DIRECT_DEPOSIT&quot;,&quot;payCheckDestination&quot;:null,&quot;monthlyExpenses&quot;:{&quot;housing&quot;:&quot;0&quot;,&quot;car&quot;:&quot;0&quot;,&quot;phone&quot;:&quot;0&quot;,&quot;utilities&quot;:&quot;0&quot;,&quot;payday&quot;:12,&quot;otherExpenses&quot;:[]}},&quot;preferredLoan&quot;:{&quot;amount&quot;:null,&quot;loanTerm&quot;:null,&quot;paymentAmount&quot;:null,&quot;purpose&quot;:&quot;PAY_BILLS&quot;,&quot;loanPurposeOther&quot;:null}}&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/preapproval${__javaScript(encodeURIComponent(&apos;|start&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Preapproval Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp preapproval start" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__FileToString(./files/preapproval_start.json,,)};&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/preapproval${__javaScript(encodeURIComponent(&apos;|start&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Preapproval Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp preapproval loan selection" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"> {&quot;preferredLoan&quot;:{&quot;amount&quot;:2500,&quot;loanTerm&quot;:12,&quot;paymentAmount&quot;:200}}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/preapproval${__javaScript(encodeURIComponent(&apos;|loanSelection&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Preapproval Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp preapproval loan selection" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__FileToString(./files/preapproval_preferred_loan_selection.json,,)};&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/preapproval${__javaScript(encodeURIComponent(&apos;|loanSelection&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Preferred Loan selection Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp references" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;references&quot;:[{&quot;status&quot;:&quot;NEW&quot;,&quot;fullName&quot;:&quot;CECELIA MCCUIN&quot;,&quot;relationship&quot;:&quot;OTHER&quot;,&quot;phoneNumber&quot;:&quot;(300) 007-7648&quot;},{&quot;status&quot;:&quot;NEW&quot;,&quot;fullName&quot;:&quot;ADALINE ROSENTRATER&quot;,&quot;relationship&quot;:&quot;MANAGER&quot;,&quot;phoneNumber&quot;:&quot;(475) 205-3463&quot;}]}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/references</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Submitting References Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp Identification doc check" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;applicant&quot;:{&quot;identification&quot;:{&quot;verifiedByAgent&quot;:&quot;N&quot;,&quot;isMilitaryID&quot;:&quot;N&quot;}}}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/documents${__javaScript(encodeURIComponent(&apos;|identificationCheck&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Submit ID doc questions Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp submit identification docs" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;capturedImage&quot;:{&quot;captureType&quot;:&quot;IDENTIFICATION&quot;,&quot;base64String&quot;:&quot;&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/documents${__javaScript(encodeURIComponent(&apos;|scan|identification&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="identificationId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">identificationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),&quot;appId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">identificationId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Submit ID image Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Root login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;root@insikt.com&quot;,&quot;password&quot;:&quot;password&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">refreshToken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">bearer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">bearer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Preapproval Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit reference verify 0" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"> {&quot;reference&quot;:{&quot;id&quot;:null,&quot;status&quot;:&quot;CONTACTED&quot;,&quot;fullName&quot;:&quot;CARLINE MANKOWSKI&quot;,&quot;relationship&quot;:&quot;OTHER&quot;,&quot;phoneNumber&quot;:&quot;(450) 739-5765&quot;,&quot;address&quot;:{},&quot;questions&quot;:{&quot;doYouKnowApplicant&quot;:&quot;YES&quot;,&quot;howYouKnowHim&quot;:&quot;LANDLORD&quot;,&quot;lendHimMoney&quot;:&quot;YES&quot;,&quot;howManyChildren&quot;:&quot;1&quot;,&quot;whereEmployed&quot;:null,&quot;interestedInLoan&quot;:&quot;YES&quot;}}}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/t/${tenantId}/api/v1/appflow/loanapp/${loanappId}/verification${__javaScript(encodeURIComponent(&apos;|reference|0&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Verify Reference 1 Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit reference verify 1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;reference&quot;:{&quot;id&quot;:null,&quot;status&quot;:&quot;CONTACTED&quot;,&quot;fullName&quot;:&quot;SHERLEY STANDLEY&quot;,&quot;relationship&quot;:&quot;OTHER&quot;,&quot;phoneNumber&quot;:&quot;(248) 596-0183&quot;,&quot;address&quot;:{},&quot;questions&quot;:{&quot;doYouKnowApplicant&quot;:&quot;YES&quot;,&quot;howYouKnowHim&quot;:&quot;LANDLORD&quot;,&quot;lendHimMoney&quot;:&quot;YES&quot;,&quot;howManyChildren&quot;:&quot;1&quot;,&quot;whereEmployed&quot;:null,&quot;interestedInLoan&quot;:&quot;YES&quot;}}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/t/${tenantId}/api/v1/appflow/loanapp/${loanappId}/verification${__javaScript(encodeURIComponent(&apos;|reference|1&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Submit Reference 2 Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit doc verify ID US_DRIVERS_LICENSE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;proofDocument&quot;:{&quot;documentType&quot;:&quot;US_DRIVERS_LICENSE&quot;,&quot;data&quot;:{&quot;IDDOBMatch&quot;:&quot;YES&quot;,&quot;IDExpireDate&quot;:&quot;${IdExpiryDate}&quot;,&quot;IDNameMatch&quot;:&quot;YES&quot;,&quot;IDNumber&quot;:&quot;9250712645&quot;,&quot;applicationAddressMatch&quot;:&quot;YES&quot;,&quot;countryDivision&quot;:&quot;CA&quot;,&quot;damagedDoc&quot;:&quot;NO&quot;,&quot;fakeDocument&quot;:&quot;NO&quot;,&quot;hasIDNumber&quot;:&quot;YES&quot;,&quot;photoID&quot;:&quot;YES&quot;,&quot;photoIDMatchesPhoto&quot;:&quot;YES&quot;,&quot;programs&quot;:{&quot;photoRequired&quot;:true},&quot;usableID&quot;:&quot;YES&quot;},&quot;images&quot;:[${identificationId}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/t/${tenantId}/api/v1/appflow/loanapp/${loanappId}/verification${__javaScript(encodeURIComponent(&apos;|documents&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="greencardid" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">greencardid</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),&quot;appId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">greencardid</stringProp>
              <stringProp name="RegexExtractor.match_number">3</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat; 
import java.util.Date; 

// You need to define ${InDays} as how many days forward/back you want to go
int IdExpDays = Integer.valueOf(vars.get(&quot;DaysExpiryId&quot;));


Date dateIdExp = new Date(); 
dateIdExp.setDate(dateIdExp.getDate() + IdExpDays); 
SimpleDateFormat df  = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS&apos;Z&apos;&quot;); 
String formattedDate = df.format(dateIdExp); 
// Resulting date will be in ${FutureDate}
vars.put(&quot;IdExpiryDate&quot;,formattedDate);




</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Verify ID doc(US Driver&apos;s license) Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Agent login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;testagent@${tenantname_1}.com&quot;,&quot;password&quot;:&quot;Password1&quot;}&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">refreshToken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">bearer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">bearer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp submit photo docs" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;capturedImage&quot;:{&quot;captureType&quot;:&quot;PHOTO&quot;,&quot;base64String&quot;:&quot;&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/documents${__javaScript(encodeURIComponent(&apos;|scan|photo&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="photoId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">photoId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),&quot;appId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">photoId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Submit Personal Photo image Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Root login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;root@insikt.com&quot;,&quot;password&quot;:&quot;password&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">refreshToken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">bearer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">bearer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit doc verify Photo" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"> {&quot;proofDocument&quot;:{&quot;documentType&quot;:&quot;PHOTO&quot;,&quot;data&quot;:{&quot;isPhotoFake&quot;:&quot;NO&quot;,&quot;isPhotoUseable&quot;:&quot;YES&quot;},&quot;images&quot;:[${photoId}]}}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/t/${tenantId}/api/v1/appflow/loanapp/${loanappId}/verification${__javaScript(encodeURIComponent(&apos;|documents&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Verify Personal Photo Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Agent login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;testagent@${tenantname_1}.com&quot;,&quot;password&quot;:&quot;Password1&quot;}&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">refreshToken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">bearer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">bearer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp submit Income docs" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;capturedImage&quot;:{&quot;captureType&quot;:&quot;INCOME&quot;,&quot;base64String&quot;:&quot;&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/documents${__javaScript(encodeURIComponent(&apos;|scan|income&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="incomeId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">incomeId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),&quot;appId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">incomeId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Submit Income image Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Root login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;root@insikt.com&quot;,&quot;password&quot;:&quot;password&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">refreshToken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">bearer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">bearer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit doc verify Income BANK_TRANSACTION_HISTORY" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;proofDocument&quot;:{&quot;documentType&quot;:&quot;BANK_TRANSACTION_HISTORY&quot;,&quot;data&quot;:{&quot;clearDocument&quot;:&quot;YES&quot;,&quot;fakeDocument&quot;:&quot;NO&quot;,&quot;applicantNameMatch&quot;:&quot;YES&quot;,&quot;applicationAddressMatch&quot;:&quot;YES&quot;,&quot;bankName&quot;:&quot;MlsXS&quot;,&quot;mostRecentTransactionDate&quot;:&quot;${RecentTxnDate}&quot;,&quot;oldestTransactionDate&quot;:&quot;${OldestTxnDate}&quot;,&quot;anyDepositTransactions&quot;:&quot;NO&quot;,&quot;maximumBalance&quot;:&quot;29491&quot;,&quot;minimumBalance&quot;:&quot;82306&quot;,&quot;overdrafts&quot;:&quot;NO&quot;,&quot;netIncome&quot;:&quot;37441&quot;,&quot;grossIncome&quot;:&quot;60785&quot;,&quot;transactions&quot;:[{&quot;transactionAmount&quot;:4000,&quot;transactionDate&quot;:&quot;2017-04-25T21:20:06.065Z&quot;},{&quot;transactionAmount&quot;:4000,&quot;transactionDate&quot;:&quot;2017-03-26T21:20:06.065Z&quot;},{&quot;transactionAmount&quot;:4000,&quot;transactionDate&quot;:&quot;2017-02-24T22:20:06.065Z&quot;}]},&quot;images&quot;:[${incomeId}]}}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/t/${tenantId}/api/v1/appflow/loanapp/${loanappId}/verification${__javaScript(encodeURIComponent(&apos;|documents&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat; 
import java.util.Date; 

// You need to define ${InDays} as how many days forward/back you want to go
//int InDays = Integer.valueOf(vars.get(&quot;InDays&quot;));
int RecentDays = 10;
int OldestDays = 75;

Date dateRecent = new Date(); 
dateRecent.setDate(dateRecent.getDate() - RecentDays); 
SimpleDateFormat df1  = new SimpleDateFormat(&quot;yyyy-MM-dd\&apos;T\&apos;hh:mm:ss.SSS\&apos;Z\&apos;&quot;);
df1.setTimeZone(TimeZone.getTimeZone(&quot;GMT&quot;)); 
String formattedRecentDate = df1.format(dateRecent); 

Date dateOldest = new Date(); 
dateOldest.setDate(dateOldest.getDate() - OldestDays); 
SimpleDateFormat df2  = new SimpleDateFormat(&quot;yyyy-MM-dd\&apos;T\&apos;hh:mm:ss.SSS\&apos;Z\&apos;&quot;);
df2.setTimeZone(TimeZone.getTimeZone(&quot;GMT&quot;)); 
String formattedOldestDate = df2.format(dateOldest); 

// Resulting date will be in ${FutureDate}
vars.put(&quot;recentTxnDate&quot;,formattedRecentDate);
vars.put(&quot;oldestTxnDate&quot;,formattedOldestDate);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Verify income doc(Bank transaction history) Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat; 
import java.util.Date; 

// You need to define ${InDays} as how many days forward/back you want to go

int TxnDate1 = Integer.valueOf(vars.get(&quot;DaysInPastNewestTxn&quot;));
int TxnDate2 = Integer.valueOf(vars.get(&quot;DaysInPastOldestTxn&quot;));


Date dateTxn1 = new Date();
dateTxn1.setDate(dateTxn1.getDate() - TxnDate1);
SimpleDateFormat df1 = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS&apos;Z&apos;&quot;);
String formattedDate1= df1.format(dateTxn1);
vars.put(&quot;RecentTxnDate&quot;,formattedDate1);

Date dateTxn2 = new Date();
dateTxn2.setDate(dateTxn2.getDate() - TxnDate2);
SimpleDateFormat df2 = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS&apos;Z&apos;&quot;);
String formattedDate2= df2.format(dateTxn2);
vars.put(&quot;OldestTxnDate&quot;,formattedDate2);


</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regex- approved loan amount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">approvedLoanAmount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;approvedLoan&quot;:{&quot;amount&quot;:(.+?),&quot;term&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regex- approved loan term" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">approvedLoanTerm</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;approvedLoan&quot;:{&quot;amount&quot;:(.+?),&quot;term&quot;:(.+?),&quot;paymentAmount&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">partyId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;EID&quot;:(.+?),&quot;timeZone&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - App flow loanapp documents|scan|address" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;capturedImage&quot;:{&quot;captureType&quot;:&quot;ADDRESS&quot;,&quot;base64String&quot;:&quot;&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/documents${__javaScript(encodeURIComponent(&apos;|scan|address&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="addressId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">addressId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),&quot;appId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">addressId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - VerifyDocs - CABLE_OR_INTERNET_BILL" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;proofDocument&quot;:{&quot;documentType&quot;:&quot;CABLE_OR_INTERNET_BILL&quot;,&quot;data&quot;:{&quot;clearDocument&quot;:&quot;YES&quot;,&quot;fakeDocument&quot;:&quot;NO&quot;,&quot;applicantNameMatch&quot;:&quot;YES&quot;,&quot;applicationAddressMatch&quot;:&quot;YES&quot;,&quot;dateOnDocument&quot;:&quot;2017-09-25T21:20:06.064Z&quot;},&quot;images&quot;:[${addressId}]}}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/t/${tenantId}/api/v1/appflow/loanapp/${loanappId}/verification${__javaScript(encodeURIComponent(&apos;|documents&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Agent login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;testagent@${tenantname_1}.com&quot;,&quot;password&quot;:&quot;Password1&quot;}&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">refreshToken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">bearer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">bearer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get notification start" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/t/${tenantId}/api/v1/appflow/loanapp/${loanappId}/notification${__javaScript(encodeURIComponent(&apos;|start&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="productCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">productCode</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;productCode&quot;:&quot;(.+?)&quot;,&quot;loanProductInputRules&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">productCode</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="loanProductInputRules" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">loanProductInputRules</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;loanProductInputRules&quot;:&quot;(.+?)&quot;}</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">loanProductInputRules</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Get Notification payment days Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get notification payment days" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;lastPaycheckDate&quot;:&quot;2017-11-23T17:50:21.518Z&quot;,&quot;paymentFrequency&quot;:&quot;BI_WEEKLY&quot;,&quot;productCode&quot;:&quot;TX&quot;}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/t/${tenantId}/api/v1/loans/validPaymentDays</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname"></stringProp>
              <stringProp name="RegexExtractor.regex"></stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Preapproval Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit notification start" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;notification&quot;:{&quot;selectedLoan&quot;:{&quot;lastPaycheckDate&quot;:${TodaysDate},&quot;locationId&quot;:1147,&quot;disbursementDate&quot;:${TodaysDate},&quot;amount&quot;:${approvedLoanAmount},&quot;loanProductInputRules&quot;:&quot;${loanProductInputRules}&quot;,&quot;productCode&quot;:&quot;${productCode}&quot;,&quot;paymentFrequency&quot;:&quot;BI_WEEKLY&quot;,&quot;checkPaymentFrequency&quot;:&quot;BI_WEEKLY&quot;,&quot;term&quot;:${approvedLoanTerm},&quot;paymentDay&quot;:5},&quot;enrollAch&quot;:false},&quot;disbursement&quot;:{&quot;type&quot;:&quot;CASH&quot;,&quot;typeDetails&quot;:null}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/t/${tenantId}/api/v1/appflow/loanapp/${loanappId}/notification${__javaScript(encodeURIComponent(&apos;|start&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Submit Notification Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;\n\nAPP ID = &quot; + vars.get(&quot;loanappId&quot;));
System.out.println(&quot;PARTY ID = &quot; + vars.get(&quot;partyId&quot;));
System.out.println(&quot;\n\n ------------------------------------------------------------------ \n\n&quot;));</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If &apos;preapproval_complete&apos; scope" enabled="true">
          <stringProp name="IfController.condition">&apos;${scope}&apos; == &apos;preapproval_complete&apos;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Agent login " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;testagent@${tenantname_1}.com&quot;,&quot;password&quot;:&quot;Password1&quot;}&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">refreshToken</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Authenticating as &quot; + vars.get(&quot;tenantname_1&quot;) + &quot; agent testagent@&quot; + vars.get(&quot;tenantname_1&quot;) + &quot;.com\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">bearer</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">bearer</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Starting new app creation.....\n&quot;);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="New loanapp start" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">#loanapp=vars.get(&quot;loanappId&quot;);
#print(ctx.getCurrentSampler().getVars(&quot;loanappId&quot;).toString());</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Start new loanapp Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="loanappId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">loanappId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;appId&quot;:&quot;(.+?)&quot;,&quot;appFlowType&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">loanappId</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller- listo prequal submit" enabled="true">
            <stringProp name="IfController.condition">${tenantId} == 102</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Loanapp prequal application- Listo" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;applicant&quot;:{&quot;memberOfArmedForces&quot;:&quot;N&quot;,&quot;EID&quot;:null,&quot;timeZone&quot;:&quot;America/Los_Angeles&quot;,&quot;externalIdNA&quot;:true,&quot;externalId&quot;:null,&quot;isTenantEmployee&quot;:{&quot;flag&quot;:false},&quot;person&quot;:{&quot;firstName&quot;:&quot;stephen&quot;,&quot;lastName&quot;:&quot;curry&quot;,&quot;paternalLastName&quot;:null,&quot;maternalLastName&quot;:null,&quot;middleName&quot;:null,&quot;nameSuffix&quot;:null,&quot;title&quot;:null,&quot;nationality&quot;:null,&quot;gender&quot;:null,&quot;dateOfBirth&quot;:&quot;1980-02-04&quot;,&quot;placeOfBirth&quot;:null,&quot;countryOfBirth&quot;:null,&quot;cityOfBirth&quot;:null,&quot;preferredLanguage&quot;:&quot;en-US&quot;,&quot;ssn&quot;:&quot;425-16-2621&quot;,&quot;ssnNA&quot;:false,&quot;last4Ssn&quot;:null},&quot;email&quot;:{&quot;emailAddress&quot;:&quot;test@listo.com&quot;,&quot;emailAddressNA&quot;:false},&quot;phone&quot;:{&quot;type&quot;:&quot;MOBILE&quot;,&quot;number&quot;:&quot;(415) 555-5555&quot;},&quot;address&quot;:{&quot;address1&quot;:&quot;3223&quot;,&quot;city&quot;:&quot;sdsad&quot;,&quot;state&quot;:&quot;TX&quot;,&quot;postalCode&quot;:&quot;11111&quot;,&quot;since&quot;:&quot;6_TO_12_MONTHS&quot;,&quot;inServiceArea&quot;:false},&quot;statedIncome&quot;:{&quot;amount&quot;:3000,&quot;frequency&quot;:&quot;MONTHLY&quot;},&quot;identification&quot;:{&quot;verifiedByAgent&quot;:null,&quot;isMilitaryID&quot;:null},&quot;payday&quot;:{&quot;statedUsage&quot;:&quot;N&quot;,&quot;actualUsage&quot;:null},&quot;checkCashing&quot;:{&quot;statedUsage&quot;:null,&quot;actualUsage&quot;:null},&quot;insurance&quot;:{&quot;statedUsage&quot;:&quot;N&quot;},&quot;hasBankAccount&quot;:null,&quot;inUSSince&quot;:null,&quot;homeOwnership&quot;:null,&quot;numberOfDependents&quot;:null,&quot;numberOfChildren&quot;:null,&quot;employed&quot;:null,&quot;otherIncome&quot;:null,&quot;incomeSources&quot;:[],&quot;payTransactionType&quot;:null,&quot;payCheckDestination&quot;:null,&quot;monthlyExpenses&quot;:{&quot;housing&quot;:null,&quot;car&quot;:null,&quot;phone&quot;:null,&quot;utilities&quot;:null,&quot;otherExpenses&quot;:[]},&quot;hasExistingLoans&quot;:null,&quot;existingLoans&quot;:[],&quot;references&quot;:[],&quot;preferences&quot;:{&quot;smsMmsConsent&quot;:false},&quot;disclosureDocument&quot;:{&quot;base64Signature&quot;:null,&quot;signatureDate&quot;:null,&quot;timestamp&quot;:null,&quot;boxKey&quot;:null},&quot;documents&quot;:[],&quot;images&quot;:[]}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/prequalification${__javaScript(encodeURIComponent(&apos;|application&apos;))}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Prequal Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Loanapp prequal start- Listo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__FileToString(./files/prequal_listo_start.json,,)};</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/prequalification${__javaScript(encodeURIComponent(&apos;|application&apos;))}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Prequal Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">${tenantId} != 102</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp prequal application" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;applicant&quot;:{&quot;timeZone&quot;:&quot;America/Los_Angeles&quot;,&quot;externalId&quot;:&quot;VQzyuxRmgy${externalId}&quot;,&quot;payday&quot;:{&quot;statedUsage&quot;:true,&quot;actualUsage&quot;:false},&quot;checkCashing&quot;:{&quot;statedUsage&quot;:false,&quot;actualUsage&quot;:false},&quot;person&quot;:{&quot;firstName&quot;:&quot;FIRSTTEST&quot;,&quot;lastName&quot;:&quot;LASTTEST&quot;,&quot;dateOfBirth&quot;:&quot;1983-05-01&quot;,&quot;preferredLanguage&quot;:&quot;en-US&quot;,&quot;ssn&quot;:&quot;686-14-6505&quot;,&quot;ssnNA&quot;:false},&quot;email&quot;:{&quot;emailAddress&quot;:&quot;jdoe@example.com&quot;,&quot;emailAddressNA&quot;:false},&quot;phone&quot;:{&quot;type&quot;:&quot;MOBILE&quot;,&quot;number&quot;:&quot;(415) 333-5555&quot;},&quot;address&quot;:{&quot;address1&quot;:&quot;CA Address&quot;,&quot;city&quot;:&quot;San Francisco&quot;,&quot;state&quot;:&quot;TX&quot;,&quot;postalCode&quot;:11111,&quot;since&quot;:&quot;6_TO_12_MONTHS&quot;,&quot;inServiceArea&quot;:true},&quot;statedIncome&quot;:{&quot;amount&quot;:5000,&quot;frequency&quot;:&quot;MONTHLY&quot;},&quot;memberOfArmedForces&quot;:&quot;N&quot;}}&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/prequalification${__javaScript(encodeURIComponent(&apos;|application&apos;))}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Prequal Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="loanapp prequal start" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__FileToString(./files/prequal_start.json,,)};&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/prequalification${__javaScript(encodeURIComponent(&apos;|application&apos;))}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">0</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive </stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">refreshToken</stringProp>
                    <stringProp name="Header.value">${refreshToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">System.out.println(&quot;Prequal Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">respCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-56506402">refreshToken</stringProp>
                  <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Loanapp prequal authorization" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;applicant&quot;:{&quot;preferences&quot;:{&quot;smsMmsConsent&quot;:true}},&quot;loanApplicationSummary&quot;:{&quot;preQualification&quot;:{&quot;applicant&quot;:{&quot;authorized&quot;:&quot;Y&quot;}}}}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/prequalification${__javaScript(encodeURIComponent(&apos;|authorization&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;|&quot;, URLEncoder.encode(vars.get(&quot;queryTerm&quot;)));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-56506402">refreshToken</stringProp>
                <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Prequal Authorization Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp preapproval start" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"> {&quot;applicant&quot;:{&quot;hasBankAccount&quot;:&quot;N&quot;,&quot;inUSSince&quot;:&quot;ONE_TO_TWO_YEARS&quot;,&quot;homeOwnership&quot;:&quot;OWN&quot;,&quot;numberOfDependents&quot;:&quot;0&quot;,&quot;numberOfChildren&quot;:&quot;0&quot;,&quot;employed&quot;:&quot;Y&quot;,&quot;otherIncome&quot;:&quot;N&quot;,&quot;incomeSources&quot;:[{&quot;selfEmployed&quot;:&quot;N&quot;,&quot;incomeType&quot;:&quot;AGRICULTURE_FARMING&quot;,&quot;employerName&quot;:&quot;dsfg&quot;,&quot;since&quot;:&quot;LESS_THAN_6_MONTHS&quot;,&quot;incomeFrequency&quot;:&quot;MONTHLY&quot;,&quot;takeHomeAmount&quot;:&quot;5000&quot;}],&quot;payTransactionType&quot;:&quot;DIRECT_DEPOSIT&quot;,&quot;payCheckDestination&quot;:null,&quot;monthlyExpenses&quot;:{&quot;housing&quot;:&quot;0&quot;,&quot;car&quot;:&quot;0&quot;,&quot;phone&quot;:&quot;0&quot;,&quot;utilities&quot;:&quot;0&quot;,&quot;payday&quot;:12,&quot;otherExpenses&quot;:[]}},&quot;preferredLoan&quot;:{&quot;amount&quot;:null,&quot;loanTerm&quot;:null,&quot;paymentAmount&quot;:null,&quot;purpose&quot;:&quot;PAY_BILLS&quot;,&quot;loanPurposeOther&quot;:null}}&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/preapproval${__javaScript(encodeURIComponent(&apos;|start&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Preapproval Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp preapproval start" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__FileToString(./files/preapproval_start.json,,)};&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/preapproval${__javaScript(encodeURIComponent(&apos;|start&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Preapproval Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp preapproval loan selection" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"> {&quot;preferredLoan&quot;:{&quot;amount&quot;:2500,&quot;loanTerm&quot;:12,&quot;paymentAmount&quot;:200}}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/preapproval${__javaScript(encodeURIComponent(&apos;|loanSelection&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Preapproval Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit loanapp preapproval loan selection" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__FileToString(./files/preapproval_preferred_loan_selection.json,,)};&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/appflow/loanapp/${loanappId}/preapproval${__javaScript(encodeURIComponent(&apos;|loanSelection&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">respCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;Preferred Loan selection Request-Response\n&quot;);
vars.put(&quot;JSONRequest&quot;, prev.getSamplerData());
vars.put(&quot;JSONResponse&quot;, prev.getResponseDataAsString());
System.out.println(&quot;Request = &quot; + vars.get(&quot;JSONRequest&quot;));
System.out.println(&quot;RESPONSE (HTTP) CODE  = &quot; + vars.get(&quot;respCode&quot;) + &quot;\n&quot; );
System.out.println(&quot;Response body = &quot; + vars.get(&quot;JSONResponse&quot;) + &quot;\n&quot; );
System.out.println(&quot;--------------------------------------------------------------------------------------------------------------&quot;);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive </stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">refreshToken</stringProp>
                  <stringProp name="Header.value">${refreshToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">System.out.println(&quot;\n\nAPP ID = &quot; + vars.get(&quot;loanappId&quot;));
System.out.println(&quot;PARTY ID = &quot; + vars.get(&quot;partyId&quot;));
System.out.println(&quot;\n\n ------------------------------------------------------------------ \n\n&quot;));</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>false</time>
              <latency>false</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>false</label>
              <code>true</code>
              <message>true</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <url>true</url>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="IDP account creation AGENT" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">40</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time"></stringProp>
        <longProp name="ThreadGroup.start_time">1391586690000</longProp>
        <longProp name="ThreadGroup.end_time">1391586690000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dev Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="2645995">User</stringProp>
            <stringProp name="2606829">Time</stringProp>
            <stringProp name="80811750">Time3</stringProp>
            <stringProp name="2122702">Date</stringProp>
            <stringProp name="80811751">Time4</stringProp>
            <stringProp name="-177061321">firstName2</stringProp>
            <stringProp name="1997046290">lastName3</stringProp>
            <stringProp name="-300736880">tenantExternalId</stringProp>
            <stringProp name="1541836720">locationId</stringProp>
            <stringProp name="-1699764666">externalId</stringProp>
            <stringProp name="-1306693787">tenantId</stringProp>
            <stringProp name="96862150">admin_username</stringProp>
            <stringProp name="22193741">admin_pwd</stringProp>
            <stringProp name="-1700717821">agent_pwd</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-153940482">
              <stringProp name="-1332388061">${__Random(7122,9009234)}</stringProp>
              <stringProp name="217092793">${__time}</stringProp>
              <stringProp name="1196789496">${__time(ssssss)}</stringProp>
              <stringProp name="-1983561601">${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(new Date()))}</stringProp>
              <stringProp name="1821498968">${__time(HH:mm:ss)}</stringProp>
              <stringProp name="3600">qa</stringProp>
              <stringProp name="-2116752012">THOMPSON</stringProp>
              <stringProp name="1506879327">312300</stringProp>
              <stringProp name="1508515">1147</stringProp>
              <stringProp name="-485296928">${__Random(10000,50000)}</stringProp>
              <stringProp name="48626">101</stringProp>
              <stringProp name="445605506">dev@insikt.com</stringProp>
              <stringProp name="1075820758">Password1</stringProp>
              <stringProp name="1075820758">Password1</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">true</boolProp>
        </UserParameters>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="2645995">User</stringProp>
            <stringProp name="2606829">Time</stringProp>
            <stringProp name="-723339844">Todays Date</stringProp>
            <stringProp name="1103663083">Future Date</stringProp>
            <stringProp name="1022806780">Past Date</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-1740362595">
              <stringProp name="-1997876883">${__Random(7754,9009987)}</stringProp>
              <stringProp name="217092793">${__time}</stringProp>
              <stringProp name="-261594534">${__javaScript(var d=new Date();d.setDate(d.getDate()); var date=d.getDate(); var month=d.getMonth()+1; $DATE=d.getFullYear() + &quot;-&quot; + (month&lt;10?&quot;0&quot;+month:month) + &quot;-&quot; + (date&lt;10?&quot;0&quot;+date:date);,DATE)} </stringProp>
              <stringProp name="1941502547">${__javaScript(var d=new Date();d.setDate(d.getDate()); var date=d.getDate()+2; var month=d.getMonth()+1; $DATE=d.getFullYear() + &quot;-&quot; + (month&lt;10?&quot;0&quot;+month:month) + &quot;-&quot; + (date&lt;10?&quot;0&quot;+date:date);,DATE)} </stringProp>
              <stringProp name="1506996949">${__javaScript(var d=new Date();d.setDate(d.getDate()); var date=d.getDate()-2; var month=d.getMonth()+1; $DATE=d.getFullYear() + &quot;-&quot; + (month&lt;10?&quot;0&quot;+month:month) + &quot;-&quot; + (date&lt;10?&quot;0&quot;+date:date);,DATE)} </stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">true</boolProp>
        </UserParameters>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">false</boolProp>
          <boolProp name="useExpires">false</boolProp>
        </CacheManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - loginUser -root" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;username&quot;:&quot;${admin_username}&quot;,&quot;password&quot;:&quot;${admin_pwd}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">refreshToken</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-56506402">refreshToken</stringProp>
              <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">bearer</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">bearer</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Screening location" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;locationId&quot;:${locationId}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/screening/locations</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${bearer}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">refreshToken</stringProp>
                <stringProp name="Header.value">${refreshToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1030792413">&quot;success&quot;:true,&quot;redirectUrl&quot;:&quot;/t/1/&quot;,&quot;bearer&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create idp account" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;uniqueIdentifier&quot;:&quot;qaagent${User}@dolex.com&quot;,&quot;firstName&quot;:&quot;qa${User}&quot;,&quot;lastName&quot;:&quot;agent&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/idp-directory/accounts</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${bearer}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">refreshToken</stringProp>
                <stringProp name="Header.value">${refreshToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;idpAccountId&quot;:(.+?)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create idp account" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;uniqueIdentifier&quot;:&quot;testagent@${name}.com&quot;,&quot;firstName&quot;:&quot;test${name}&quot;,&quot;lastName&quot;:&quot;agent&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/idp-directory/accounts</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${bearer}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">refreshToken</stringProp>
                <stringProp name="Header.value">${refreshToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;idpAccountId&quot;:(.+?)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set contractor ID" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;contractorId&quot;:&quot;${id}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/idp-directory/accounts/testagent@${name}.com/contractorId</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${bearer}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">refreshToken</stringProp>
                <stringProp name="Header.value">${refreshToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;idpAccountId&quot;:(.+?)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set tenant Id" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenantIds&quot;:[${id}]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/idp-directory/accounts/testagent@${name}.com/tenantIds</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${bearer}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">refreshToken</stringProp>
                <stringProp name="Header.value">${refreshToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;idpAccountId&quot;:(.+?)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set idp-directory app role" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;roles&quot;:[&quot;accountAccessor&quot;]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/idp-directory/accounts/testagent@${name}.com/applications/idp-directory/roles</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${bearer}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">refreshToken</stringProp>
                <stringProp name="Header.value">${refreshToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;idpAccountId&quot;:(.+?)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set retail app role" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;roles&quot;:[&quot;agent&quot;]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/idp-directory/accounts/testagent@${name}.com/applications/retail/roles</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${bearer}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">refreshToken</stringProp>
                <stringProp name="Header.value">${refreshToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;idpAccountId&quot;:(.+?)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set account password" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;password&quot;:&quot;Password1&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/idp-directory/accounts/testagent@${name}.com/password</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${bearer}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">refreshToken</stringProp>
                <stringProp name="Header.value">${refreshToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;idpAccountId&quot;:(.+?)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login with new agent" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;username&quot;:&quot;testagent@${name}.com&quot;,&quot;password&quot;:&quot;Password1&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">refreshToken</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-56506402">refreshToken</stringProp>
              <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">bearer</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">bearer</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Screening location - Admin" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;locationId&quot;:${locationId}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/screening/locations</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${bearer}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">refreshToken</stringProp>
                <stringProp name="Header.value">${refreshToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="998315213">&quot;success&quot;:true,&quot;redirectUrl&quot;:&quot;/t/${tenantId}/&quot;,&quot;bearer&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - loginUser -root" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;username&quot;:&quot;root@insikt.com&quot;,&quot;password&quot;:&quot;password&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">refreshToken</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-56506402">refreshToken</stringProp>
              <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">bearer</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">bearer</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Device locations" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/fabric/locations/devices</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${bearer}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">refreshToken</stringProp>
                <stringProp name="Header.value">${refreshToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Device Code" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/idp-directory/accounts/${uniqueIdentifier}/code</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${bearer}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">refreshToken</stringProp>
                <stringProp name="Header.value">${refreshToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="deviceCode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">deviceCode</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">deviceCode</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - OTP Login" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;uniqueIdentifier&quot;:&quot;${uniqueIdentifier}&quot;,&quot;code&quot;:${deviceCode}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/otp/login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${bearer}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">refreshToken</stringProp>
                <stringProp name="Header.value">${refreshToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Device Contractor Id " enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Device Contractor Id </stringProp>
            <stringProp name="RegexExtractor.regex">&quot;contractorId&quot;:(.+?),&quot;metadata&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Device Contractor Id </stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-56506402">refreshToken</stringProp>
              <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Device Mount Mode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Device Mount Mode</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;mountMode&quot;:&quot;(.+?)&quot;}</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Device Mount Mode</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - User Devices" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/fabric/user_devices/devices/${uniqueIdentifier} </stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${bearer}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">refreshToken</stringProp>
                <stringProp name="Header.value">${refreshToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Device Contractor Id " enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Device Contractor Id </stringProp>
            <stringProp name="RegexExtractor.regex">&quot;contractorId&quot;:(.+?),&quot;metadata&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Device Contractor Id </stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-56506402">refreshToken</stringProp>
              <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Device Mount Mode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Device Mount Mode</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;mountMode&quot;:&quot;(.+?)&quot;}</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Device Mount Mode</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="IDP account creation COLLECTOR" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time"></stringProp>
        <longProp name="ThreadGroup.start_time">1391586690000</longProp>
        <longProp name="ThreadGroup.end_time">1391586690000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dev Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="2645995">User</stringProp>
            <stringProp name="2606829">Time</stringProp>
            <stringProp name="80811750">Time3</stringProp>
            <stringProp name="2122702">Date</stringProp>
            <stringProp name="80811751">Time4</stringProp>
            <stringProp name="-201069322">Username</stringProp>
            <stringProp name="-125484198">uniqueIdentifier</stringProp>
            <stringProp name="-177061321">firstName2</stringProp>
            <stringProp name="1997046290">lastName3</stringProp>
            <stringProp name="-300736880">tenantExternalId</stringProp>
            <stringProp name="1541836720">locationId</stringProp>
            <stringProp name="48608054">31136</stringProp>
            <stringProp name="466335109">loanappId1</stringProp>
            <stringProp name="3556498">test</stringProp>
            <stringProp name="-1699764666">externalId</stringProp>
            <stringProp name="-1185250696">images</stringProp>
            <stringProp name="1911934138">images2</stringProp>
            <stringProp name="-1306693787">tenantId</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="834150470">
              <stringProp name="-1332388061">${__Random(7122,9009234)}</stringProp>
              <stringProp name="217092793">${__time}</stringProp>
              <stringProp name="1196789496">${__time(ssssss)}</stringProp>
              <stringProp name="-1983561601">${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(new Date()))}</stringProp>
              <stringProp name="1821498968">${__time(HH:mm:ss)}</stringProp>
              <stringProp name="-193851953">admin@bbva.com</stringProp>
              <stringProp name="190645642">4375bda8c93891b6ff77e53fba7d09c4520545ab</stringProp>
              <stringProp name="141592545">CATHERINE</stringProp>
              <stringProp name="-2116752012">THOMPSON</stringProp>
              <stringProp name="1506879327">312300</stringProp>
              <stringProp name="1508515">1147</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="974752833">57715f34e4b030857d454bdd</stringProp>
              <stringProp name="1066348727">https://retail.qa.lendifyfin.com/_relayEndpoint?endpointIdentifier=startApplication&amp;partnerPartyId=31181&amp;partyType=EXTERNAL&amp;partnerLocationId=1328834</stringProp>
              <stringProp name="-485296928">${__Random(10000,50000)}</stringProp>
              <stringProp name="-849626933">${__Random(176990,990092)}</stringProp>
              <stringProp name="1343154419">${__Random(276990,290092)}</stringProp>
              <stringProp name="48626">101</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">true</boolProp>
        </UserParameters>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="2645995">User</stringProp>
            <stringProp name="2606829">Time</stringProp>
            <stringProp name="-723339844">Todays Date</stringProp>
            <stringProp name="1103663083">Future Date</stringProp>
            <stringProp name="1022806780">Past Date</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-1740362595">
              <stringProp name="-1997876883">${__Random(7754,9009987)}</stringProp>
              <stringProp name="217092793">${__time}</stringProp>
              <stringProp name="-261594534">${__javaScript(var d=new Date();d.setDate(d.getDate()); var date=d.getDate(); var month=d.getMonth()+1; $DATE=d.getFullYear() + &quot;-&quot; + (month&lt;10?&quot;0&quot;+month:month) + &quot;-&quot; + (date&lt;10?&quot;0&quot;+date:date);,DATE)} </stringProp>
              <stringProp name="1941502547">${__javaScript(var d=new Date();d.setDate(d.getDate()); var date=d.getDate()+2; var month=d.getMonth()+1; $DATE=d.getFullYear() + &quot;-&quot; + (month&lt;10?&quot;0&quot;+month:month) + &quot;-&quot; + (date&lt;10?&quot;0&quot;+date:date);,DATE)} </stringProp>
              <stringProp name="1506996949">${__javaScript(var d=new Date();d.setDate(d.getDate()); var date=d.getDate()-2; var month=d.getMonth()+1; $DATE=d.getFullYear() + &quot;-&quot; + (month&lt;10?&quot;0&quot;+month:month) + &quot;-&quot; + (date&lt;10?&quot;0&quot;+date:date);,DATE)} </stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">true</boolProp>
        </UserParameters>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">false</boolProp>
          <boolProp name="useExpires">false</boolProp>
        </CacheManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - loginUser -root" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;username&quot;:&quot;root@insikt.com&quot;,&quot;password&quot;:&quot;password&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">refreshToken</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-56506402">refreshToken</stringProp>
              <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">bearer</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">bearer</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Screening location" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;locationId&quot;:${locationId}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/screening/locations</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${bearer}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">refreshToken</stringProp>
                <stringProp name="Header.value">${refreshToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1030792413">&quot;success&quot;:true,&quot;redirectUrl&quot;:&quot;/t/1/&quot;,&quot;bearer&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create idp account" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;uniqueIdentifier&quot;:&quot;qacollector1@insikt.com&quot;,&quot;firstName&quot;:&quot;qa&quot;,&quot;lastName&quot;:&quot;collector1&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/idp-directory/accounts</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${bearer}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">refreshToken</stringProp>
                <stringProp name="Header.value">${refreshToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;idpAccountId&quot;:(.+?)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set contractor ID" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;contractorId&quot;:&quot;101&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/idp-directory/accounts/qacollector1@insikt.com/contractorId</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${bearer}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">refreshToken</stringProp>
                <stringProp name="Header.value">${refreshToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;idpAccountId&quot;:(.+?)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set tenant Id" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenantIds&quot;:[101]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/idp-directory/accounts/qacollector1@insikt.com/tenantIds</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${bearer}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">refreshToken</stringProp>
                <stringProp name="Header.value">${refreshToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;idpAccountId&quot;:(.+?)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set idp-directory app role" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;roles&quot;:[&quot;accountAccessor&quot;]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/idp-directory/accounts/qacollector1@insikt.com/applications/idp-directory/roles</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${bearer}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">refreshToken</stringProp>
                <stringProp name="Header.value">${refreshToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;idpAccountId&quot;:(.+?)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set retail app role" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;roles&quot;:[&quot;collector&quot;]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/idp-directory/accounts/qacollector1@insikt.com/applications/retail/roles</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${bearer}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">refreshToken</stringProp>
                <stringProp name="Header.value">${refreshToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;idpAccountId&quot;:(.+?)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set retail app role" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;roles&quot;:[&quot;csr&quot;]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/idp-directory/accounts/qacollector1@insikt.com/applications/retail/roles</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${bearer}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">refreshToken</stringProp>
                <stringProp name="Header.value">${refreshToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;idpAccountId&quot;:(.+?)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set retail app role" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;roles&quot;:[&quot;document_reviewer&quot;]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/idp-directory/accounts/qacollector1@insikt.com/applications/retail/roles</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${bearer}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">refreshToken</stringProp>
                <stringProp name="Header.value">${refreshToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;idpAccountId&quot;:(.+?)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set retail app role" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;roles&quot;:[&quot;notifier&quot;]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/idp-directory/accounts/qacollector1@insikt.com/applications/retail/roles</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${bearer}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">refreshToken</stringProp>
                <stringProp name="Header.value">${refreshToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;idpAccountId&quot;:(.+?)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set retail app role" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;roles&quot;:[&quot;reference_checker&quot;]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/idp-directory/accounts/qacollector1@insikt.com/applications/retail/roles</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${bearer}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">refreshToken</stringProp>
                <stringProp name="Header.value">${refreshToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;idpAccountId&quot;:(.+?)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set retail app role" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;roles&quot;:[&quot;telesales&quot;]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/idp-directory/accounts/qacollector1@insikt.com/applications/retail/roles</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${bearer}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">refreshToken</stringProp>
                <stringProp name="Header.value">${refreshToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;idpAccountId&quot;:(.+?)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set account password" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;password&quot;:&quot;Password1&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/idp-directory/accounts/qacollector1@insikt.com/password</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${bearer}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">refreshToken</stringProp>
                <stringProp name="Header.value">${refreshToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="idpAccountId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;idpAccountId&quot;:(.+?)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">idpAccountId</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login with new agent" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;username&quot;:&quot;qacollector1@insikt.com&quot;,&quot;password&quot;:&quot;Password1&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">refreshToken</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-56506402">refreshToken</stringProp>
              <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">bearer</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">bearer</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Screening location - Admin" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;locationId&quot;:${locationId}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/screening/locations</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${bearer}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">refreshToken</stringProp>
                <stringProp name="Header.value">${refreshToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="998315213">&quot;success&quot;:true,&quot;redirectUrl&quot;:&quot;/t/${tenantId}/&quot;,&quot;bearer&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - loginUser -root" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;username&quot;:&quot;root@insikt.com&quot;,&quot;password&quot;:&quot;password&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refreshToken" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">refreshToken</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;refreshToken&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">refreshToken</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-56506402">refreshToken</stringProp>
              <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="bearer" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">bearer</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;bearer&quot;:&quot;(.+?)&quot;,&quot;contractorId&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">bearer</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Device locations" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/fabric/locations/devices</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${bearer}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">refreshToken</stringProp>
                <stringProp name="Header.value">${refreshToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Device Code" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseIdpPartnerUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/idp-directory/accounts/${uniqueIdentifier}/code</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${bearer}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">refreshToken</stringProp>
                <stringProp name="Header.value">${refreshToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="deviceCode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">deviceCode</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">deviceCode</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - OTP Login" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;uniqueIdentifier&quot;:&quot;${uniqueIdentifier}&quot;,&quot;code&quot;:${deviceCode}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/idp/auth/accounts/otp/login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${bearer}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">refreshToken</stringProp>
                <stringProp name="Header.value">${refreshToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Device Contractor Id " enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Device Contractor Id </stringProp>
            <stringProp name="RegexExtractor.regex">&quot;contractorId&quot;:(.+?),&quot;metadata&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Device Contractor Id </stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-56506402">refreshToken</stringProp>
              <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Device Mount Mode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Device Mount Mode</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;mountMode&quot;:&quot;(.+?)&quot;}</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Device Mount Mode</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - User Devices" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/fabric/user_devices/devices/${uniqueIdentifier} </stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive </stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${bearer}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">refreshToken</stringProp>
                <stringProp name="Header.value">${refreshToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Device Contractor Id " enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Device Contractor Id </stringProp>
            <stringProp name="RegexExtractor.regex">&quot;contractorId&quot;:(.+?),&quot;metadata&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Device Contractor Id </stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-56506402">refreshToken</stringProp>
              <stringProp name="179346545">{&quot;success&quot;:true,&quot;bearer&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Device Mount Mode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Device Mount Mode</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;mountMode&quot;:&quot;(.+?)&quot;}</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Device Mount Mode</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
